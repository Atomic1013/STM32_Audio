
H743XI_WM8978_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120c0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002ae08  08012360  08012360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803d168  0803d168  0003e168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803d170  0803d170  0003e170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0803d174  0803d174  0003e174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000e0  24000000  0803d178  0003f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c10  240000e0  0803d258  0003f0e0  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  24004cf0  0803d258  0003fcf0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003f0e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022524  00000000  00000000  0003f10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004856  00000000  00000000  00061632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001870  00000000  00000000  00065e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012d2  00000000  00000000  000676f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cb61  00000000  00000000  000689ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027f8f  00000000  00000000  000a552b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016610e  00000000  00000000  000cd4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002335c8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c4c  00000000  00000000  0023360c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  0023a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012348 	.word	0x08012348

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	08012348 	.word	0x08012348

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <DebugInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void DebugInit(UART_HandleTypeDef *huart) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80006b4:	4a07      	ldr	r2, [pc, #28]	@ (80006d4 <DebugInit+0x28>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80006ba:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <DebugInit+0x2c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6898      	ldr	r0, [r3, #8]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2202      	movs	r2, #2
 80006c4:	2100      	movs	r1, #0
 80006c6:	f010 ff1b 	bl	8011500 <setvbuf>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	240000fc 	.word	0x240000fc
 80006d8:	24000090 	.word	0x24000090

080006dc <_isatty>:
  (void)sig;
  errno = EINVAL;
  return -1;
}

int _isatty(int fd) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db04      	blt.n	80006f4 <_isatty+0x18>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	dc01      	bgt.n	80006f4 <_isatty+0x18>
    return 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e005      	b.n	8000700 <_isatty+0x24>

  errno = EBADF;
 80006f4:	f011 f8de 	bl	80118b4 <__errno>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2209      	movs	r2, #9
 80006fc:	601a      	str	r2, [r3, #0]
  return 0;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <_write>:

int _write(int fd, char* ptr, int len) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d002      	beq.n	8000720 <_write+0x18>
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d111      	bne.n	8000744 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <_write+0x54>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	b29a      	uxth	r2, r3
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	f00b fa83 	bl	800bc38 <HAL_UART_Transmit>
 8000732:	4603      	mov	r3, r0
 8000734:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000736:	7dfb      	ldrb	r3, [r7, #23]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <_write+0x38>
      return len;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	e008      	b.n	8000752 <_write+0x4a>
    else
      return EIO;
 8000740:	2305      	movs	r3, #5
 8000742:	e006      	b.n	8000752 <_write+0x4a>
  }
  errno = EBADF;
 8000744:	f011 f8b6 	bl	80118b4 <__errno>
 8000748:	4603      	mov	r3, r0
 800074a:	2209      	movs	r2, #9
 800074c:	601a      	str	r2, [r3, #0]
  return -1;
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	240000fc 	.word	0x240000fc

08000760 <_close>:

int _close(int fd) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db04      	blt.n	8000778 <_close+0x18>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b02      	cmp	r3, #2
 8000772:	dc01      	bgt.n	8000778 <_close+0x18>
    return 0;
 8000774:	2300      	movs	r3, #0
 8000776:	e006      	b.n	8000786 <_close+0x26>

  errno = EBADF;
 8000778:	f011 f89c 	bl	80118b4 <__errno>
 800077c:	4603      	mov	r3, r0
 800077e:	2209      	movs	r2, #9
 8000780:	601a      	str	r2, [r3, #0]
  return -1;
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800079a:	f011 f88b 	bl	80118b4 <__errno>
 800079e:	4603      	mov	r3, r0
 80007a0:	2209      	movs	r2, #9
 80007a2:	601a      	str	r2, [r3, #0]
  return -1;
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_read>:

int _read(int fd, char* ptr, int len) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d110      	bne.n	80007e4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <_read+0x4c>)
 80007c4:	6818      	ldr	r0, [r3, #0]
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	2201      	movs	r2, #1
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	f00b fac1 	bl	800bd54 <HAL_UART_Receive>
 80007d2:	4603      	mov	r3, r0
 80007d4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d101      	bne.n	80007e0 <_read+0x30>
      return 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	e008      	b.n	80007f2 <_read+0x42>
    else
      return EIO;
 80007e0:	2305      	movs	r3, #5
 80007e2:	e006      	b.n	80007f2 <_read+0x42>
  }
  errno = EBADF;
 80007e4:	f011 f866 	bl	80118b4 <__errno>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2209      	movs	r2, #9
 80007ec:	601a      	str	r2, [r3, #0]
  return -1;
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	240000fc 	.word	0x240000fc

08000800 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	db08      	blt.n	8000822 <_fstat+0x22>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b02      	cmp	r3, #2
 8000814:	dc05      	bgt.n	8000822 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800081c:	605a      	str	r2, [r3, #4]
    return 0;
 800081e:	2300      	movs	r3, #0
 8000820:	e005      	b.n	800082e <_fstat+0x2e>
  }

  errno = EBADF;
 8000822:	f011 f847 	bl	80118b4 <__errno>
 8000826:	4603      	mov	r3, r0
 8000828:	2209      	movs	r2, #9
 800082a:	601a      	str	r2, [r3, #0]
  return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <MX_DMA_Init+0x3c>)
 8000840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000844:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <MX_DMA_Init+0x3c>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_DMA_Init+0x3c>)
 8000850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	200b      	movs	r0, #11
 8000862:	f001 fbe6 	bl	8002032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000866:	200b      	movs	r0, #11
 8000868:	f001 fbfd 	bl	8002066 <HAL_NVIC_EnableIRQ>

}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	58024400 	.word	0x58024400

08000878 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	@ 0x30
 800087c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b35      	ldr	r3, [pc, #212]	@ (8000964 <MX_GPIO_Init+0xec>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000894:	4a33      	ldr	r2, [pc, #204]	@ (8000964 <MX_GPIO_Init+0xec>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800089e:	4b31      	ldr	r3, [pc, #196]	@ (8000964 <MX_GPIO_Init+0xec>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <MX_GPIO_Init+0xec>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000964 <MX_GPIO_Init+0xec>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008bc:	4b29      	ldr	r3, [pc, #164]	@ (8000964 <MX_GPIO_Init+0xec>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b26      	ldr	r3, [pc, #152]	@ (8000964 <MX_GPIO_Init+0xec>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d0:	4a24      	ldr	r2, [pc, #144]	@ (8000964 <MX_GPIO_Init+0xec>)
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008da:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <MX_GPIO_Init+0xec>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_GPIO_Init+0xec>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000964 <MX_GPIO_Init+0xec>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_GPIO_Init+0xec>)
 80008fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_GPIO_Init+0xec>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <MX_GPIO_Init+0xec>)
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <MX_GPIO_Init+0xec>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_GPIO_Init+0xec>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092a:	4a0e      	ldr	r2, [pc, #56]	@ (8000964 <MX_GPIO_Init+0xec>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000934:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <MX_GPIO_Init+0xec>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000942:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800094c:	2302      	movs	r3, #2
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_GPIO_Init+0xf0>)
 8000958:	f004 f9e8 	bl	8004d2c <HAL_GPIO_Init>

}
 800095c:	bf00      	nop
 800095e:	3730      	adds	r7, #48	@ 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	58024400 	.word	0x58024400
 8000968:	58020000 	.word	0x58020000

0800096c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_I2C1_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <MX_I2C1_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_I2C1_Init+0x74>)
 8000978:	4a1b      	ldr	r2, [pc, #108]	@ (80009e8 <MX_I2C1_Init+0x7c>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_I2C1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_I2C1_Init+0x74>)
 8000984:	2201      	movs	r2, #1
 8000986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_I2C1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_I2C1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a6:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <MX_I2C1_Init+0x74>)
 80009a8:	f004 fb88 	bl	80050bc <HAL_I2C_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009b2:	f000 fac1 	bl	8000f38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <MX_I2C1_Init+0x74>)
 80009ba:	f004 ff4d 	bl	8005858 <HAL_I2CEx_ConfigAnalogFilter>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f000 fab8 	bl	8000f38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_I2C1_Init+0x74>)
 80009cc:	f004 ff8f 	bl	80058ee <HAL_I2CEx_ConfigDigitalFilter>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 faaf 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	24000100 	.word	0x24000100
 80009e4:	40005400 	.word	0x40005400
 80009e8:	307075b1 	.word	0x307075b1

080009ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0ba      	sub	sp, #232	@ 0xe8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	22c0      	movs	r2, #192	@ 0xc0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f010 ff03 	bl	8011818 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a26      	ldr	r2, [pc, #152]	@ (8000ab0 <HAL_I2C_MspInit+0xc4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d145      	bne.n	8000aa8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a1c:	f04f 0208 	mov.w	r2, #8
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 ffc8 	bl	80069c8 <HAL_RCCEx_PeriphCLKConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000a3e:	f000 fa7b 	bl	8000f38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a60:	23c0      	movs	r3, #192	@ 0xc0
 8000a62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a66:	2312      	movs	r3, #18
 8000a68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a72:	2302      	movs	r3, #2
 8000a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <HAL_I2C_MspInit+0xcc>)
 8000a86:	f004 f951 	bl	8004d2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a90:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	37e8      	adds	r7, #232	@ 0xe8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	58024400 	.word	0x58024400
 8000ab8:	58020400 	.word	0x58020400

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f001 f919 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 f991 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f7ff fed5 	bl	8000878 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ace:	f7ff feb3 	bl	8000838 <MX_DMA_Init>
  MX_SAI1_Init();
 8000ad2:	f000 fa37 	bl	8000f44 <MX_SAI1_Init>
  MX_I2C1_Init();
 8000ad6:	f7ff ff49 	bl	800096c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ada:	f000 fd2d 	bl	8001538 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000ade:	f000 fb33 	bl	8001148 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000ae2:	f00d f855 	bl	800db90 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  DebugInit(&huart1);
 8000ae6:	48a6      	ldr	r0, [pc, #664]	@ (8000d80 <main+0x2c4>)
 8000ae8:	f7ff fde0 	bl	80006ac <DebugInit>
  printf("\n*********************************WM8978 test*****************************************\n");
 8000aec:	48a5      	ldr	r0, [pc, #660]	@ (8000d84 <main+0x2c8>)
 8000aee:	f010 fcff 	bl	80114f0 <puts>

  /* 检测WM8978芯片，此函数会自动配置CPU的GPIO */
  if (WM8978_Init() != HAL_OK)
 8000af2:	f000 fe57 	bl	80017a4 <WM8978_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d004      	beq.n	8000b06 <main+0x4a>
  {
    printf("检测不到WM8978芯片!!!\n");
 8000afc:	48a2      	ldr	r0, [pc, #648]	@ (8000d88 <main+0x2cc>)
 8000afe:	f010 fcf7 	bl	80114f0 <puts>
    while (1);	/* 停机 */
 8000b02:	bf00      	nop
 8000b04:	e7fd      	b.n	8000b02 <main+0x46>
  }
  printf("初始化WM8978成功\n");
 8000b06:	48a1      	ldr	r0, [pc, #644]	@ (8000d8c <main+0x2d0>)
 8000b08:	f010 fcf2 	bl	80114f0 <puts>

  /* 延迟一段时间，等待I2S中断结束 */
  HAL_Delay(10);
 8000b0c:	200a      	movs	r0, #10
 8000b0e:	f001 f985 	bl	8001e1c <HAL_Delay>

  /* 复位WM8978到复位状态 */
  WM8978_Reset();
 8000b12:	f001 f8bd 	bl	8001c90 <WM8978_Reset>

  /* 配置WM8978芯片，输入为DAC，输出为耳机 */
  WM8978_CfgAudioPath(DAC_ON, EAR_LEFT_ON | EAR_RIGHT_ON);
 8000b16:	2103      	movs	r1, #3
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f000 feb4 	bl	8001886 <WM8978_CfgAudioPath>
//  WM8978_CfgAudioPath(DAC_ON, SPK_ON);
//  WM8978_CfgAudioPath(DAC_ON, EAR_LEFT_ON );

  /* 调节音量，左右相同音量 */
  WM8978_SetOUT1Volume(20);
 8000b1e:	2014      	movs	r0, #20
 8000b20:	f000 fe4f 	bl	80017c2 <WM8978_SetOUT1Volume>
//  WM8978_SetOUT2Volume(60);

  /* 配置WM8978音频接口为飞利浦标准I2S接口，16bit */
  WM8978_CfgAudioIF(SAI_I2S_STANDARD, 16);
 8000b24:	2110      	movs	r1, #16
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 fe70 	bl	800180c <WM8978_CfgAudioIF>


  res = f_mount(&fs, "0:", 1);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4998      	ldr	r1, [pc, #608]	@ (8000d90 <main+0x2d4>)
 8000b30:	4898      	ldr	r0, [pc, #608]	@ (8000d94 <main+0x2d8>)
 8000b32:	f00f fc77 	bl	8010424 <f_mount>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b97      	ldr	r3, [pc, #604]	@ (8000d98 <main+0x2dc>)
 8000b3c:	701a      	strb	r2, [r3, #0]
  if(res) {printf("%s(%d),错误码:%d\n",__FILE__, __LINE__,res);while(1);}
 8000b3e:	4b96      	ldr	r3, [pc, #600]	@ (8000d98 <main+0x2dc>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d008      	beq.n	8000b58 <main+0x9c>
 8000b46:	4b94      	ldr	r3, [pc, #592]	@ (8000d98 <main+0x2dc>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2299      	movs	r2, #153	@ 0x99
 8000b4c:	4993      	ldr	r1, [pc, #588]	@ (8000d9c <main+0x2e0>)
 8000b4e:	4894      	ldr	r0, [pc, #592]	@ (8000da0 <main+0x2e4>)
 8000b50:	f010 fc66 	bl	8011420 <iprintf>
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <main+0x98>

  res = f_opendir(&dir, "0:");
 8000b58:	498d      	ldr	r1, [pc, #564]	@ (8000d90 <main+0x2d4>)
 8000b5a:	4892      	ldr	r0, [pc, #584]	@ (8000da4 <main+0x2e8>)
 8000b5c:	f010 f9aa 	bl	8010eb4 <f_opendir>
 8000b60:	4603      	mov	r3, r0
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b8c      	ldr	r3, [pc, #560]	@ (8000d98 <main+0x2dc>)
 8000b66:	701a      	strb	r2, [r3, #0]
  if(res) {printf("%s(%d),错误码:%d\n",__FILE__, __LINE__,res);while(1);}
 8000b68:	4b8b      	ldr	r3, [pc, #556]	@ (8000d98 <main+0x2dc>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d008      	beq.n	8000b82 <main+0xc6>
 8000b70:	4b89      	ldr	r3, [pc, #548]	@ (8000d98 <main+0x2dc>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	229c      	movs	r2, #156	@ 0x9c
 8000b76:	4989      	ldr	r1, [pc, #548]	@ (8000d9c <main+0x2e0>)
 8000b78:	4889      	ldr	r0, [pc, #548]	@ (8000da0 <main+0x2e4>)
 8000b7a:	f010 fc51 	bl	8011420 <iprintf>
 8000b7e:	bf00      	nop
 8000b80:	e7fd      	b.n	8000b7e <main+0xc2>

  res = f_readdir(&dir, &fno);
 8000b82:	4989      	ldr	r1, [pc, #548]	@ (8000da8 <main+0x2ec>)
 8000b84:	4887      	ldr	r0, [pc, #540]	@ (8000da4 <main+0x2e8>)
 8000b86:	f010 fa08 	bl	8010f9a <f_readdir>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b82      	ldr	r3, [pc, #520]	@ (8000d98 <main+0x2dc>)
 8000b90:	701a      	strb	r2, [r3, #0]
  while(res == FR_OK && fno.fname[0])
 8000b92:	e00a      	b.n	8000baa <main+0xee>
  {
	  printf("%s\n",fno.fname);
 8000b94:	4885      	ldr	r0, [pc, #532]	@ (8000dac <main+0x2f0>)
 8000b96:	f010 fcab 	bl	80114f0 <puts>
	  res = f_readdir(&dir, &fno);
 8000b9a:	4983      	ldr	r1, [pc, #524]	@ (8000da8 <main+0x2ec>)
 8000b9c:	4881      	ldr	r0, [pc, #516]	@ (8000da4 <main+0x2e8>)
 8000b9e:	f010 f9fc 	bl	8010f9a <f_readdir>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b7c      	ldr	r3, [pc, #496]	@ (8000d98 <main+0x2dc>)
 8000ba8:	701a      	strb	r2, [r3, #0]
  while(res == FR_OK && fno.fname[0])
 8000baa:	4b7b      	ldr	r3, [pc, #492]	@ (8000d98 <main+0x2dc>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d103      	bne.n	8000bba <main+0xfe>
 8000bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8000da8 <main+0x2ec>)
 8000bb4:	7d9b      	ldrb	r3, [r3, #22]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1ec      	bne.n	8000b94 <main+0xd8>
  }

  res = f_open(&file, "music.wav", FA_READ);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	497c      	ldr	r1, [pc, #496]	@ (8000db0 <main+0x2f4>)
 8000bbe:	487d      	ldr	r0, [pc, #500]	@ (8000db4 <main+0x2f8>)
 8000bc0:	f00f fc76 	bl	80104b0 <f_open>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b73      	ldr	r3, [pc, #460]	@ (8000d98 <main+0x2dc>)
 8000bca:	701a      	strb	r2, [r3, #0]
  if(res) {printf("%s(%d),错误码:%d\n",__FILE__, __LINE__,res);while(1);}
 8000bcc:	4b72      	ldr	r3, [pc, #456]	@ (8000d98 <main+0x2dc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d008      	beq.n	8000be6 <main+0x12a>
 8000bd4:	4b70      	ldr	r3, [pc, #448]	@ (8000d98 <main+0x2dc>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	22a6      	movs	r2, #166	@ 0xa6
 8000bda:	4970      	ldr	r1, [pc, #448]	@ (8000d9c <main+0x2e0>)
 8000bdc:	4870      	ldr	r0, [pc, #448]	@ (8000da0 <main+0x2e4>)
 8000bde:	f010 fc1f 	bl	8011420 <iprintf>
 8000be2:	bf00      	nop
 8000be4:	e7fd      	b.n	8000be2 <main+0x126>

  res = f_read(&file, BuffHead, PLAY_HEADER, &br);
 8000be6:	4b74      	ldr	r3, [pc, #464]	@ (8000db8 <main+0x2fc>)
 8000be8:	222c      	movs	r2, #44	@ 0x2c
 8000bea:	4974      	ldr	r1, [pc, #464]	@ (8000dbc <main+0x300>)
 8000bec:	4871      	ldr	r0, [pc, #452]	@ (8000db4 <main+0x2f8>)
 8000bee:	f00f fe19 	bl	8010824 <f_read>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b68      	ldr	r3, [pc, #416]	@ (8000d98 <main+0x2dc>)
 8000bf8:	701a      	strb	r2, [r3, #0]
  if(res) {printf("%s(%d),错误码:%d\n",__FILE__, __LINE__,res);while(1);}
 8000bfa:	4b67      	ldr	r3, [pc, #412]	@ (8000d98 <main+0x2dc>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d008      	beq.n	8000c14 <main+0x158>
 8000c02:	4b65      	ldr	r3, [pc, #404]	@ (8000d98 <main+0x2dc>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	22a9      	movs	r2, #169	@ 0xa9
 8000c08:	4964      	ldr	r1, [pc, #400]	@ (8000d9c <main+0x2e0>)
 8000c0a:	4865      	ldr	r0, [pc, #404]	@ (8000da0 <main+0x2e4>)
 8000c0c:	f010 fc08 	bl	8011420 <iprintf>
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <main+0x154>
//  printf("读取了:0x%X个字节\n",br);
  for (int i = 0; i < br; ++i)
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	e00a      	b.n	8000c30 <main+0x174>
  {
	  printf("0x%02X ",BuffHead[i]);
 8000c1a:	4a68      	ldr	r2, [pc, #416]	@ (8000dbc <main+0x300>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4413      	add	r3, r2
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4866      	ldr	r0, [pc, #408]	@ (8000dc0 <main+0x304>)
 8000c26:	f010 fbfb 	bl	8011420 <iprintf>
  for (int i = 0; i < br; ++i)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	4b61      	ldr	r3, [pc, #388]	@ (8000db8 <main+0x2fc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d3ef      	bcc.n	8000c1a <main+0x15e>
  }

  uint32_t Date_Size = (uint32_t)BuffHead[0x2B]<<24 | (uint32_t)BuffHead[0x2A]<<16 | (uint32_t)BuffHead[0x29]<<8 | BuffHead[0x28];
 8000c3a:	4b60      	ldr	r3, [pc, #384]	@ (8000dbc <main+0x300>)
 8000c3c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c40:	061a      	lsls	r2, r3, #24
 8000c42:	4b5e      	ldr	r3, [pc, #376]	@ (8000dbc <main+0x300>)
 8000c44:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000c48:	041b      	lsls	r3, r3, #16
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	4b5b      	ldr	r3, [pc, #364]	@ (8000dbc <main+0x300>)
 8000c4e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	4313      	orrs	r3, r2
 8000c56:	4a59      	ldr	r2, [pc, #356]	@ (8000dbc <main+0x300>)
 8000c58:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	603b      	str	r3, [r7, #0]
  printf("\n数据量:0x%lX\n",Date_Size);
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	4858      	ldr	r0, [pc, #352]	@ (8000dc4 <main+0x308>)
 8000c64:	f010 fbdc 	bl	8011420 <iprintf>
  printf("时长 %d:%02d\n",(uint8_t)(Date_Size/(2*44100*16/8) / 60),(uint8_t)(Date_Size/(2*44100*16/8) % 60));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	4a57      	ldr	r2, [pc, #348]	@ (8000dc8 <main+0x30c>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	0ddb      	lsrs	r3, r3, #23
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4618      	mov	r0, r3
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	4a54      	ldr	r2, [pc, #336]	@ (8000dcc <main+0x310>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	0c59      	lsrs	r1, r3, #17
 8000c80:	4b53      	ldr	r3, [pc, #332]	@ (8000dd0 <main+0x314>)
 8000c82:	fba3 2301 	umull	r2, r3, r3, r1
 8000c86:	095a      	lsrs	r2, r3, #5
 8000c88:	4613      	mov	r3, r2
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	1aca      	subs	r2, r1, r3
 8000c92:	b2d3      	uxtb	r3, r2
 8000c94:	461a      	mov	r2, r3
 8000c96:	4601      	mov	r1, r0
 8000c98:	484e      	ldr	r0, [pc, #312]	@ (8000dd4 <main+0x318>)
 8000c9a:	f010 fbc1 	bl	8011420 <iprintf>

  res = f_read(&file, (uint8_t *)PlayBuff_0, PLAY_BUFF_SIZE * 2, &br);
 8000c9e:	4b46      	ldr	r3, [pc, #280]	@ (8000db8 <main+0x2fc>)
 8000ca0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca4:	494c      	ldr	r1, [pc, #304]	@ (8000dd8 <main+0x31c>)
 8000ca6:	4843      	ldr	r0, [pc, #268]	@ (8000db4 <main+0x2f8>)
 8000ca8:	f00f fdbc 	bl	8010824 <f_read>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b39      	ldr	r3, [pc, #228]	@ (8000d98 <main+0x2dc>)
 8000cb2:	701a      	strb	r2, [r3, #0]
  if(res) {printf("%s(%d),错误码:%d\n",__FILE__, __LINE__,res);while(1);}
 8000cb4:	4b38      	ldr	r3, [pc, #224]	@ (8000d98 <main+0x2dc>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d008      	beq.n	8000cce <main+0x212>
 8000cbc:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <main+0x2dc>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	22b5      	movs	r2, #181	@ 0xb5
 8000cc2:	4936      	ldr	r1, [pc, #216]	@ (8000d9c <main+0x2e0>)
 8000cc4:	4836      	ldr	r0, [pc, #216]	@ (8000da0 <main+0x2e4>)
 8000cc6:	f010 fbab 	bl	8011420 <iprintf>
 8000cca:	bf00      	nop
 8000ccc:	e7fd      	b.n	8000cca <main+0x20e>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)PlayBuff_0, PLAY_BUFF_SIZE * 2);
 8000cce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cd2:	4941      	ldr	r1, [pc, #260]	@ (8000dd8 <main+0x31c>)
 8000cd4:	4841      	ldr	r0, [pc, #260]	@ (8000ddc <main+0x320>)
 8000cd6:	f008 fee1 	bl	8009a9c <HAL_SAI_Transmit_DMA>

  while (1)
  {
	  while (SAI_Sate == 1);
 8000cda:	bf00      	nop
 8000cdc:	4b40      	ldr	r3, [pc, #256]	@ (8000de0 <main+0x324>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d0fb      	beq.n	8000cdc <main+0x220>
	  res = f_read(&file, (uint8_t *)PlayBuff_1, PLAY_BUFF_SIZE * 2, &br);
 8000ce4:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <main+0x2fc>)
 8000ce6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cea:	493e      	ldr	r1, [pc, #248]	@ (8000de4 <main+0x328>)
 8000cec:	4831      	ldr	r0, [pc, #196]	@ (8000db4 <main+0x2f8>)
 8000cee:	f00f fd99 	bl	8010824 <f_read>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b28      	ldr	r3, [pc, #160]	@ (8000d98 <main+0x2dc>)
 8000cf8:	701a      	strb	r2, [r3, #0]
	  if(res) {printf("%s(%d),错误码:%d\n",__FILE__, __LINE__,res);while(1);}
 8000cfa:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <main+0x2dc>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d008      	beq.n	8000d14 <main+0x258>
 8000d02:	4b25      	ldr	r3, [pc, #148]	@ (8000d98 <main+0x2dc>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	22bc      	movs	r2, #188	@ 0xbc
 8000d08:	4924      	ldr	r1, [pc, #144]	@ (8000d9c <main+0x2e0>)
 8000d0a:	4825      	ldr	r0, [pc, #148]	@ (8000da0 <main+0x2e4>)
 8000d0c:	f010 fb88 	bl	8011420 <iprintf>
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <main+0x254>
	  if(br < PLAY_BUFF_SIZE * 2) {printf("结束\n");f_lseek(&file, 0);}
 8000d14:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <main+0x2fc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d1c:	d206      	bcs.n	8000d2c <main+0x270>
 8000d1e:	4832      	ldr	r0, [pc, #200]	@ (8000de8 <main+0x32c>)
 8000d20:	f010 fbe6 	bl	80114f0 <puts>
 8000d24:	2100      	movs	r1, #0
 8000d26:	4823      	ldr	r0, [pc, #140]	@ (8000db4 <main+0x2f8>)
 8000d28:	f00f febb 	bl	8010aa2 <f_lseek>

	  while (SAI_Sate == 0);
 8000d2c:	bf00      	nop
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <main+0x324>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0fb      	beq.n	8000d2e <main+0x272>
	  res = f_read(&file, (uint8_t *)PlayBuff_0, PLAY_BUFF_SIZE * 2, &br);
 8000d36:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <main+0x2fc>)
 8000d38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d3c:	4926      	ldr	r1, [pc, #152]	@ (8000dd8 <main+0x31c>)
 8000d3e:	481d      	ldr	r0, [pc, #116]	@ (8000db4 <main+0x2f8>)
 8000d40:	f00f fd70 	bl	8010824 <f_read>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <main+0x2dc>)
 8000d4a:	701a      	strb	r2, [r3, #0]
	  if(res) {printf("%s(%d),错误码:%d\n",__FILE__, __LINE__,res);while(1);}
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <main+0x2dc>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d008      	beq.n	8000d66 <main+0x2aa>
 8000d54:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <main+0x2dc>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	22c1      	movs	r2, #193	@ 0xc1
 8000d5a:	4910      	ldr	r1, [pc, #64]	@ (8000d9c <main+0x2e0>)
 8000d5c:	4810      	ldr	r0, [pc, #64]	@ (8000da0 <main+0x2e4>)
 8000d5e:	f010 fb5f 	bl	8011420 <iprintf>
 8000d62:	bf00      	nop
 8000d64:	e7fd      	b.n	8000d62 <main+0x2a6>
	  if(br < PLAY_BUFF_SIZE * 2) {printf("结束\n");f_lseek(&file, 0);}
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <main+0x2fc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d6e:	d2b4      	bcs.n	8000cda <main+0x21e>
 8000d70:	481d      	ldr	r0, [pc, #116]	@ (8000de8 <main+0x32c>)
 8000d72:	f010 fbbd 	bl	80114f0 <puts>
 8000d76:	2100      	movs	r1, #0
 8000d78:	480e      	ldr	r0, [pc, #56]	@ (8000db4 <main+0x2f8>)
 8000d7a:	f00f fe92 	bl	8010aa2 <f_lseek>
	  while (SAI_Sate == 1);
 8000d7e:	e7ac      	b.n	8000cda <main+0x21e>
 8000d80:	240048d0 	.word	0x240048d0
 8000d84:	08012360 	.word	0x08012360
 8000d88:	080123b8 	.word	0x080123b8
 8000d8c:	080123d4 	.word	0x080123d4
 8000d90:	080123ec 	.word	0x080123ec
 8000d94:	24000158 	.word	0x24000158
 8000d98:	24000154 	.word	0x24000154
 8000d9c:	080123f0 	.word	0x080123f0
 8000da0:	08012404 	.word	0x08012404
 8000da4:	2400038c 	.word	0x2400038c
 8000da8:	240003c0 	.word	0x240003c0
 8000dac:	240003d6 	.word	0x240003d6
 8000db0:	0801241c 	.word	0x0801241c
 8000db4:	240004d8 	.word	0x240004d8
 8000db8:	24000708 	.word	0x24000708
 8000dbc:	2400470c 	.word	0x2400470c
 8000dc0:	08012428 	.word	0x08012428
 8000dc4:	08012430 	.word	0x08012430
 8000dc8:	cae628c7 	.word	0xcae628c7
 8000dcc:	be37c63b 	.word	0xbe37c63b
 8000dd0:	88888889 	.word	0x88888889
 8000dd4:	08012444 	.word	0x08012444
 8000dd8:	2400070c 	.word	0x2400070c
 8000ddc:	2400473c 	.word	0x2400473c
 8000de0:	24004738 	.word	0x24004738
 8000de4:	2400270c 	.word	0x2400270c
 8000de8:	08012454 	.word	0x08012454

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b09c      	sub	sp, #112	@ 0x70
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df6:	224c      	movs	r2, #76	@ 0x4c
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f010 fd0c 	bl	8011818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2220      	movs	r2, #32
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f010 fd06 	bl	8011818 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f004 fdbb 	bl	8005988 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <SystemClock_Config+0xec>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ed8 <SystemClock_Config+0xec>)
 8000e1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e20:	6193      	str	r3, [r2, #24]
 8000e22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <SystemClock_Config+0xec>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000edc <SystemClock_Config+0xf0>)
 8000e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e30:	4a2a      	ldr	r2, [pc, #168]	@ (8000edc <SystemClock_Config+0xf0>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e38:	4b28      	ldr	r3, [pc, #160]	@ (8000edc <SystemClock_Config+0xf0>)
 8000e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e44:	bf00      	nop
 8000e46:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <SystemClock_Config+0xec>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e52:	d1f8      	bne.n	8000e46 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e54:	2301      	movs	r3, #1
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e62:	2302      	movs	r3, #2
 8000e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e66:	2305      	movs	r3, #5
 8000e68:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e6a:	23c0      	movs	r3, #192	@ 0xc0
 8000e6c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000e72:	230d      	movs	r3, #13
 8000e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e76:	2302      	movs	r3, #2
 8000e78:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f004 fdb6 	bl	80059fc <HAL_RCC_OscConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e96:	f000 f84f 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9a:	233f      	movs	r3, #63	@ 0x3f
 8000e9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000eaa:	2340      	movs	r3, #64	@ 0x40
 8000eac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eae:	2340      	movs	r3, #64	@ 0x40
 8000eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eb6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000eb8:	2340      	movs	r3, #64	@ 0x40
 8000eba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f005 f9f5 	bl	80062b0 <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ecc:	f000 f834 	bl	8000f38 <Error_Handler>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3770      	adds	r7, #112	@ 0x70
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	58024800 	.word	0x58024800
 8000edc:	58000400 	.word	0x58000400

08000ee0 <HAL_SAI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
//	printf("%d\n",SAI_Time++);
	if(SAI_Sate == 0)
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <HAL_SAI_TxCpltCallback+0x48>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d109      	bne.n	8000f04 <HAL_SAI_TxCpltCallback+0x24>
	{
		HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)PlayBuff_1, PLAY_BUFF_SIZE);
 8000ef0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ef4:	490d      	ldr	r1, [pc, #52]	@ (8000f2c <HAL_SAI_TxCpltCallback+0x4c>)
 8000ef6:	480e      	ldr	r0, [pc, #56]	@ (8000f30 <HAL_SAI_TxCpltCallback+0x50>)
 8000ef8:	f008 fdd0 	bl	8009a9c <HAL_SAI_Transmit_DMA>
		SAI_Sate = 1;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <HAL_SAI_TxCpltCallback+0x48>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
	else if(SAI_Sate == 1)
	{
		HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)PlayBuff_0, PLAY_BUFF_SIZE);
		SAI_Sate = 0;
	}
}
 8000f02:	e00c      	b.n	8000f1e <HAL_SAI_TxCpltCallback+0x3e>
	else if(SAI_Sate == 1)
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <HAL_SAI_TxCpltCallback+0x48>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d108      	bne.n	8000f1e <HAL_SAI_TxCpltCallback+0x3e>
		HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)PlayBuff_0, PLAY_BUFF_SIZE);
 8000f0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f10:	4908      	ldr	r1, [pc, #32]	@ (8000f34 <HAL_SAI_TxCpltCallback+0x54>)
 8000f12:	4807      	ldr	r0, [pc, #28]	@ (8000f30 <HAL_SAI_TxCpltCallback+0x50>)
 8000f14:	f008 fdc2 	bl	8009a9c <HAL_SAI_Transmit_DMA>
		SAI_Sate = 0;
 8000f18:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <HAL_SAI_TxCpltCallback+0x48>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	24004738 	.word	0x24004738
 8000f2c:	2400270c 	.word	0x2400270c
 8000f30:	2400473c 	.word	0x2400473c
 8000f34:	2400070c 	.word	0x2400070c

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <Error_Handler+0x8>

08000f44 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fb4 <MX_SAI1_Init+0x70>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f54:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f60:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000f74:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f76:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000f7a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000f94:	2302      	movs	r3, #2
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_SAI1_Init+0x6c>)
 8000f9c:	f008 fa12 	bl	80093c4 <HAL_SAI_InitProtocol>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_SAI1_Init+0x66>
  {
    Error_Handler();
 8000fa6:	f7ff ffc7 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2400473c 	.word	0x2400473c
 8000fb4:	40015804 	.word	0x40015804

08000fb8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0ba      	sub	sp, #232	@ 0xe8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	22c0      	movs	r2, #192	@ 0xc0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f010 fc25 	bl	8011818 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a56      	ldr	r2, [pc, #344]	@ (800112c <HAL_SAI_MspInit+0x174>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	f040 80a5 	bne.w	8001124 <HAL_SAI_MspInit+0x16c>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 8000fe6:	2319      	movs	r3, #25
 8000fe8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 479;
 8000fea:	f240 13df 	movw	r3, #479	@ 0x1df
 8000fee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 39;
 8000ff0:	2327      	movs	r3, #39	@ 0x27
 8000ff2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001008:	2301      	movs	r3, #1
 800100a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4618      	mov	r0, r3
 8001012:	f005 fcd9 	bl	80069c8 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_SAI_MspInit+0x68>
    {
      Error_Handler();
 800101c:	f7ff ff8c 	bl	8000f38 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001020:	4b43      	ldr	r3, [pc, #268]	@ (8001130 <HAL_SAI_MspInit+0x178>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d116      	bne.n	8001056 <HAL_SAI_MspInit+0x9e>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001028:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <HAL_SAI_MspInit+0x17c>)
 800102a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800102e:	4a41      	ldr	r2, [pc, #260]	@ (8001134 <HAL_SAI_MspInit+0x17c>)
 8001030:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001034:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001038:	4b3e      	ldr	r3, [pc, #248]	@ (8001134 <HAL_SAI_MspInit+0x17c>)
 800103a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800103e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2057      	movs	r0, #87	@ 0x57
 800104c:	f000 fff1 	bl	8002032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001050:	2057      	movs	r0, #87	@ 0x57
 8001052:	f001 f808 	bl	8002066 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001056:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <HAL_SAI_MspInit+0x178>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a34      	ldr	r2, [pc, #208]	@ (8001130 <HAL_SAI_MspInit+0x178>)
 800105e:	6013      	str	r3, [r2, #0]
    PD6     ------> SAI1_SD_A
    PE2     ------> SAI1_MCLK_A
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001060:	2340      	movs	r3, #64	@ 0x40
 8001062:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001078:	2306      	movs	r3, #6
 800107a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001082:	4619      	mov	r1, r3
 8001084:	482c      	ldr	r0, [pc, #176]	@ (8001138 <HAL_SAI_MspInit+0x180>)
 8001086:	f003 fe51 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_4;
 800108a:	2334      	movs	r3, #52	@ 0x34
 800108c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4823      	ldr	r0, [pc, #140]	@ (800113c <HAL_SAI_MspInit+0x184>)
 80010b0:	f003 fe3c 	bl	8004d2c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 80010b4:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 80010b6:	4a23      	ldr	r2, [pc, #140]	@ (8001144 <HAL_SAI_MspInit+0x18c>)
 80010b8:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80010ba:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 80010bc:	2257      	movs	r2, #87	@ 0x57
 80010be:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 80010c2:	2240      	movs	r2, #64	@ 0x40
 80010c4:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 80010ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010d2:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 80010d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010da:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 80010de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010e2:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 80010ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010f0:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f2:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80010f8:	4811      	ldr	r0, [pc, #68]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 80010fa:	f000 ffcf 	bl	800209c <HAL_DMA_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8001104:	f7ff ff18 	bl	8000f38 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a0d      	ldr	r2, [pc, #52]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 800110c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 800111a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800111e:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <HAL_SAI_MspInit+0x188>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001124:	bf00      	nop
 8001126:	37e8      	adds	r7, #232	@ 0xe8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40015804 	.word	0x40015804
 8001130:	2400484c 	.word	0x2400484c
 8001134:	58024400 	.word	0x58024400
 8001138:	58020c00 	.word	0x58020c00
 800113c:	58021000 	.word	0x58021000
 8001140:	240047d4 	.word	0x240047d4
 8001144:	40020010 	.word	0x40020010

08001148 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_SDMMC1_SD_Init+0x34>)
 800114e:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <MX_SDMMC1_SD_Init+0x38>)
 8001150:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <MX_SDMMC1_SD_Init+0x34>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <MX_SDMMC1_SD_Init+0x34>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <MX_SDMMC1_SD_Init+0x34>)
 8001160:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001164:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001166:	4b05      	ldr	r3, [pc, #20]	@ (800117c <MX_SDMMC1_SD_Init+0x34>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 3;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <MX_SDMMC1_SD_Init+0x34>)
 800116e:	2203      	movs	r2, #3
 8001170:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	24004850 	.word	0x24004850
 8001180:	52007000 	.word	0x52007000

08001184 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0bc      	sub	sp, #240	@ 0xf0
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	22c0      	movs	r2, #192	@ 0xc0
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f010 fb37 	bl	8011818 <memset>
  if(sdHandle->Instance==SDMMC1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a38      	ldr	r2, [pc, #224]	@ (8001290 <HAL_SD_MspInit+0x10c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d169      	bne.n	8001288 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80011b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 fbfd 	bl	80069c8 <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80011d4:	f7ff feb0 	bl	8000f38 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80011d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <HAL_SD_MspInit+0x110>)
 80011da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011de:	4a2d      	ldr	r2, [pc, #180]	@ (8001294 <HAL_SD_MspInit+0x110>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80011e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <HAL_SD_MspInit+0x110>)
 80011ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <HAL_SD_MspInit+0x110>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fc:	4a25      	ldr	r2, [pc, #148]	@ (8001294 <HAL_SD_MspInit+0x110>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001206:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <HAL_SD_MspInit+0x110>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <HAL_SD_MspInit+0x110>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121a:	4a1e      	ldr	r2, [pc, #120]	@ (8001294 <HAL_SD_MspInit+0x110>)
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <HAL_SD_MspInit+0x110>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8001232:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800124c:	230c      	movs	r3, #12
 800124e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001256:	4619      	mov	r1, r3
 8001258:	480f      	ldr	r0, [pc, #60]	@ (8001298 <HAL_SD_MspInit+0x114>)
 800125a:	f003 fd67 	bl	8004d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800125e:	2304      	movs	r3, #4
 8001260:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001276:	230c      	movs	r3, #12
 8001278:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	@ (800129c <HAL_SD_MspInit+0x118>)
 8001284:	f003 fd52 	bl	8004d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	37f0      	adds	r7, #240	@ 0xf0
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	52007000 	.word	0x52007000
 8001294:	58024400 	.word	0x58024400
 8001298:	58020800 	.word	0x58020800
 800129c:	58020c00 	.word	0x58020c00

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_MspInit+0x30>)
 80012a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012ac:	4a08      	ldr	r2, [pc, #32]	@ (80012d0 <HAL_MspInit+0x30>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_MspInit+0x30>)
 80012b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	58024400 	.word	0x58024400

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <NMI_Handler+0x4>

080012dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <MemManage_Handler+0x4>

080012ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132a:	f000 fd57 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <DMA1_Stream0_IRQHandler+0x10>)
 800133a:	f002 f9d9 	bl	80036f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	240047d4 	.word	0x240047d4

08001348 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <SAI1_IRQHandler+0x10>)
 800134e:	f008 fc5b 	bl	8009c08 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2400473c 	.word	0x2400473c

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	@ (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f010 fa92 	bl	80118b4 <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	24080000 	.word	0x24080000
 80013bc:	00004000 	.word	0x00004000
 80013c0:	240048cc 	.word	0x240048cc
 80013c4:	24004cf0 	.word	0x24004cf0

080013c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013cc:	4b43      	ldr	r3, [pc, #268]	@ (80014dc <SystemInit+0x114>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013d2:	4a42      	ldr	r2, [pc, #264]	@ (80014dc <SystemInit+0x114>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013dc:	4b40      	ldr	r3, [pc, #256]	@ (80014e0 <SystemInit+0x118>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d807      	bhi.n	80013f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e8:	4b3d      	ldr	r3, [pc, #244]	@ (80014e0 <SystemInit+0x118>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 030f 	bic.w	r3, r3, #15
 80013f0:	4a3b      	ldr	r2, [pc, #236]	@ (80014e0 <SystemInit+0x118>)
 80013f2:	f043 0307 	orr.w	r3, r3, #7
 80013f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013f8:	4b3a      	ldr	r3, [pc, #232]	@ (80014e4 <SystemInit+0x11c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a39      	ldr	r2, [pc, #228]	@ (80014e4 <SystemInit+0x11c>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001404:	4b37      	ldr	r3, [pc, #220]	@ (80014e4 <SystemInit+0x11c>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800140a:	4b36      	ldr	r3, [pc, #216]	@ (80014e4 <SystemInit+0x11c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4935      	ldr	r1, [pc, #212]	@ (80014e4 <SystemInit+0x11c>)
 8001410:	4b35      	ldr	r3, [pc, #212]	@ (80014e8 <SystemInit+0x120>)
 8001412:	4013      	ands	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001416:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <SystemInit+0x118>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001422:	4b2f      	ldr	r3, [pc, #188]	@ (80014e0 <SystemInit+0x118>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 030f 	bic.w	r3, r3, #15
 800142a:	4a2d      	ldr	r2, [pc, #180]	@ (80014e0 <SystemInit+0x118>)
 800142c:	f043 0307 	orr.w	r3, r3, #7
 8001430:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001432:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <SystemInit+0x11c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001438:	4b2a      	ldr	r3, [pc, #168]	@ (80014e4 <SystemInit+0x11c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800143e:	4b29      	ldr	r3, [pc, #164]	@ (80014e4 <SystemInit+0x11c>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001444:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <SystemInit+0x11c>)
 8001446:	4a29      	ldr	r2, [pc, #164]	@ (80014ec <SystemInit+0x124>)
 8001448:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800144a:	4b26      	ldr	r3, [pc, #152]	@ (80014e4 <SystemInit+0x11c>)
 800144c:	4a28      	ldr	r2, [pc, #160]	@ (80014f0 <SystemInit+0x128>)
 800144e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001450:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <SystemInit+0x11c>)
 8001452:	4a28      	ldr	r2, [pc, #160]	@ (80014f4 <SystemInit+0x12c>)
 8001454:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001456:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <SystemInit+0x11c>)
 8001458:	2200      	movs	r2, #0
 800145a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800145c:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <SystemInit+0x11c>)
 800145e:	4a25      	ldr	r2, [pc, #148]	@ (80014f4 <SystemInit+0x12c>)
 8001460:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001462:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <SystemInit+0x11c>)
 8001464:	2200      	movs	r2, #0
 8001466:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001468:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <SystemInit+0x11c>)
 800146a:	4a22      	ldr	r2, [pc, #136]	@ (80014f4 <SystemInit+0x12c>)
 800146c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800146e:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <SystemInit+0x11c>)
 8001470:	2200      	movs	r2, #0
 8001472:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <SystemInit+0x11c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1a      	ldr	r2, [pc, #104]	@ (80014e4 <SystemInit+0x11c>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001480:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <SystemInit+0x11c>)
 8001482:	2200      	movs	r2, #0
 8001484:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <SystemInit+0x130>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <SystemInit+0x134>)
 800148c:	4013      	ands	r3, r2
 800148e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001492:	d202      	bcs.n	800149a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <SystemInit+0x138>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <SystemInit+0x11c>)
 800149c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d113      	bne.n	80014d0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <SystemInit+0x11c>)
 80014aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014ae:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <SystemInit+0x11c>)
 80014b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <SystemInit+0x13c>)
 80014ba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014be:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <SystemInit+0x11c>)
 80014c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014c6:	4a07      	ldr	r2, [pc, #28]	@ (80014e4 <SystemInit+0x11c>)
 80014c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00
 80014e0:	52002000 	.word	0x52002000
 80014e4:	58024400 	.word	0x58024400
 80014e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80014ec:	02020200 	.word	0x02020200
 80014f0:	01ff0000 	.word	0x01ff0000
 80014f4:	01010280 	.word	0x01010280
 80014f8:	5c001000 	.word	0x5c001000
 80014fc:	ffff0000 	.word	0xffff0000
 8001500:	51008108 	.word	0x51008108
 8001504:	52004000 	.word	0x52004000

08001508 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <ExitRun0Mode+0x2c>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4a08      	ldr	r2, [pc, #32]	@ (8001534 <ExitRun0Mode+0x2c>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001518:	bf00      	nop
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <ExitRun0Mode+0x2c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f9      	beq.n	800151a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	58024800 	.word	0x58024800

08001538 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800153c:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 800153e:	4a23      	ldr	r2, [pc, #140]	@ (80015cc <MX_USART1_UART_Init+0x94>)
 8001540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001542:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001556:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156e:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800157a:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001580:	4811      	ldr	r0, [pc, #68]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 8001582:	f00a fb09 	bl	800bb98 <HAL_UART_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800158c:	f7ff fcd4 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001590:	2100      	movs	r1, #0
 8001592:	480d      	ldr	r0, [pc, #52]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 8001594:	f00b fc67 	bl	800ce66 <HAL_UARTEx_SetTxFifoThreshold>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800159e:	f7ff fccb 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a2:	2100      	movs	r1, #0
 80015a4:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 80015a6:	f00b fc9c 	bl	800cee2 <HAL_UARTEx_SetRxFifoThreshold>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015b0:	f7ff fcc2 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <MX_USART1_UART_Init+0x90>)
 80015b6:	f00b fc1d 	bl	800cdf4 <HAL_UARTEx_DisableFifoMode>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015c0:	f7ff fcba 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	240048d0 	.word	0x240048d0
 80015cc:	40011000 	.word	0x40011000

080015d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0ba      	sub	sp, #232	@ 0xe8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	22c0      	movs	r2, #192	@ 0xc0
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f010 f911 	bl	8011818 <memset>
  if(uartHandle->Instance==USART1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a27      	ldr	r2, [pc, #156]	@ (8001698 <HAL_UART_MspInit+0xc8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d146      	bne.n	800168e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001600:	f04f 0201 	mov.w	r2, #1
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	4618      	mov	r0, r3
 8001618:	f005 f9d6 	bl	80069c8 <HAL_RCCEx_PeriphCLKConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001622:	f7ff fc89 	bl	8000f38 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001626:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <HAL_UART_MspInit+0xcc>)
 8001628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800162c:	4a1b      	ldr	r2, [pc, #108]	@ (800169c <HAL_UART_MspInit+0xcc>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_UART_MspInit+0xcc>)
 8001638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b15      	ldr	r3, [pc, #84]	@ (800169c <HAL_UART_MspInit+0xcc>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	4a14      	ldr	r2, [pc, #80]	@ (800169c <HAL_UART_MspInit+0xcc>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <HAL_UART_MspInit+0xcc>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001662:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001666:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800167c:	2307      	movs	r3, #7
 800167e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <HAL_UART_MspInit+0xd0>)
 800168a:	f003 fb4f 	bl	8004d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800168e:	bf00      	nop
 8001690:	37e8      	adds	r7, #232	@ 0xe8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40011000 	.word	0x40011000
 800169c:	58024400 	.word	0x58024400
 80016a0:	58020000 	.word	0x58020000

080016a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016a4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80016e0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80016a8:	f7ff ff2e 	bl	8001508 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016ac:	f7ff fe8c 	bl	80013c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	@ (80016e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	@ (80016f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d6:	f010 f8f3 	bl	80118c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7ff f9ef 	bl	8000abc <main>
  bx  lr
 80016de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016e8:	240000e0 	.word	0x240000e0
  ldr r2, =_sidata
 80016ec:	0803d178 	.word	0x0803d178
  ldr r2, =_sbss
 80016f0:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 80016f4:	24004cf0 	.word	0x24004cf0

080016f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC3_IRQHandler>
	...

080016fc <WM8978_I2C_WriteRegister>:
  * @参数  RegisterAddr 待写入寄存器的地址
  * 		RegisterValue 要写入目标寄存器的字节值
  * @返回  HAL状态
  */
static HAL_StatusTypeDef WM8978_I2C_WriteRegister(uint8_t RegisterAddr, uint16_t RegisterValue)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af02      	add	r7, sp, #8
 8001702:	4603      	mov	r3, r0
 8001704:	460a      	mov	r2, r1
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4613      	mov	r3, r2
 800170a:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp;
	tmp = (RegisterValue&0xff) << 8;
 800170c:	88bb      	ldrh	r3, [r7, #4]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b29b      	uxth	r3, r3
 8001712:	81fb      	strh	r3, [r7, #14]
	tmp |= ((RegisterAddr << 1) & 0xFE) | ((RegisterValue >> 8) & 0x1);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	b21b      	sxth	r3, r3
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	b21b      	sxth	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	b21a      	sxth	r2, r3
 8001720:	88bb      	ldrh	r3, [r7, #4]
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	b29b      	uxth	r3, r3
 8001726:	b21b      	sxth	r3, r3
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	b21b      	sxth	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b21a      	sxth	r2, r3
 8001732:	89fb      	ldrh	r3, [r7, #14]
 8001734:	b21b      	sxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b21b      	sxth	r3, r3
 800173a:	b29b      	uxth	r3, r3
 800173c:	81fb      	strh	r3, [r7, #14]
	if(HAL_I2C_Master_Transmit(&WM8978_I2C_HANDLE,WM8978_I2C_ADDRESS,(uint8_t *)&tmp,2,WM8978_I2C_FLAG_TIMEOUT) == HAL_OK)
 800173e:	f107 020e 	add.w	r2, r7, #14
 8001742:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2302      	movs	r3, #2
 800174a:	2134      	movs	r1, #52	@ 0x34
 800174c:	4806      	ldr	r0, [pc, #24]	@ (8001768 <WM8978_I2C_WriteRegister+0x6c>)
 800174e:	f003 fd51 	bl	80051f4 <HAL_I2C_Master_Transmit>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <WM8978_I2C_WriteRegister+0x60>
	{
		return HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <WM8978_I2C_WriteRegister+0x62>
	}
	else
		return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	24000100 	.word	0x24000100

0800176c <WM8978_WriteReg>:
  * @参数  _ucRegAddr 寄存器地址
  * 		_usValue 寄存器值
  * @返回  HAL状态
  */
static HAL_StatusTypeDef WM8978_WriteReg(uint8_t _ucRegAddr, uint16_t _usValue)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	80bb      	strh	r3, [r7, #4]
	uint8_t res;
	res = WM8978_I2C_WriteRegister(_ucRegAddr,_usValue);
 800177c:	88ba      	ldrh	r2, [r7, #4]
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ffba 	bl	80016fc <WM8978_I2C_WriteRegister>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
	wm8978_RegCash[_ucRegAddr] = _usValue;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4904      	ldr	r1, [pc, #16]	@ (80017a0 <WM8978_WriteReg+0x34>)
 8001790:	88ba      	ldrh	r2, [r7, #4]
 8001792:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	return res;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	24000008 	.word	0x24000008

080017a4 <WM8978_Init>:
/**
  * @简介  WM8978进行初始化.
  * @返回  状态
  */
HAL_StatusTypeDef WM8978_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
	uint8_t res;
	res = WM8978_Reset();		/* 硬件复位WM8978所有寄存器到缺省状态 */
 80017aa:	f000 fa71 	bl	8001c90 <WM8978_Reset>
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
	WM8978_CtrlGPIO1(1);	/* 控制WM8978的一个GPIO接口控制其为放音状态 */
 80017b2:	2001      	movs	r0, #1
 80017b4:	f000 fa56 	bl	8001c64 <WM8978_CtrlGPIO1>
	/* 返回函数状态 */
	return res;
 80017b8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <WM8978_SetOUT1Volume>:
  * @简介  修改输出通道1音量
  * @参数  _ucVolume 音量值, 0-63
  * @返回  无
  */
void WM8978_SetOUT1Volume(uint8_t _ucVolume)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	71fb      	strb	r3, [r7, #7]
	uint16_t regL;
	uint16_t regR;

	if (_ucVolume > 0x3F)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80017d0:	d901      	bls.n	80017d6 <WM8978_SetOUT1Volume+0x14>
	{
		_ucVolume = 0x3F;
 80017d2:	233f      	movs	r3, #63	@ 0x3f
 80017d4:	71fb      	strb	r3, [r7, #7]
	}

	regL = _ucVolume;
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	81fb      	strh	r3, [r7, #14]
	regR = _ucVolume;
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	81bb      	strh	r3, [r7, #12]
	/*
		R52	LOUT1 Volume control
		R53	ROUT1 Volume control
	*/
	/* 先更新左声道缓存值 */
	WM8978_WriteReg(52, regL | 0x00);
 80017de:	89fb      	ldrh	r3, [r7, #14]
 80017e0:	4619      	mov	r1, r3
 80017e2:	2034      	movs	r0, #52	@ 0x34
 80017e4:	f7ff ffc2 	bl	800176c <WM8978_WriteReg>

	/* 再同步更新左右声道的音量 */
	WM8978_WriteReg(53, regR | 0x100);	/* 0x180表示 在音量为0时再更新，避免调节音量出现的“嘎哒”声 */
 80017e8:	89bb      	ldrh	r3, [r7, #12]
 80017ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4619      	mov	r1, r3
 80017f2:	2035      	movs	r0, #53	@ 0x35
 80017f4:	f7ff ffba 	bl	800176c <WM8978_WriteReg>
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <WM8978_PowerDown>:
  * @简介  关闭WM8978，进入低功耗模式
  * @参数  无
  * @返回  无
  */
void WM8978_PowerDown(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	WM8978_Reset();			/* 硬件复位WM8978所有寄存器到缺省状态 */
 8001804:	f000 fa44 	bl	8001c90 <WM8978_Reset>
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <WM8978_CfgAudioIF>:
  * @参数  _usStandard 接口标准，I2S_Standard_Phillips, I2S_Standard_MSB 或 I2S_Standard_LSB
  * 		_ucWordLen 字长，16、24、32  （丢弃不常用的20bit格式）
  * @返回  无
  */
void WM8978_CfgAudioIF(uint16_t _usStandard, uint8_t _ucWordLen)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	460a      	mov	r2, r1
 8001816:	80fb      	strh	r3, [r7, #6]
 8001818:	4613      	mov	r3, r2
 800181a:	717b      	strb	r3, [r7, #5]
		B4:3	FMT = x，音频数据格式，00=右对齐，01=左对齐，10=I2S格式，11=PCM
		B2		DACLRSWAP = x, 控制DAC数据出现在LRC时钟的左边还是右边
		B1 		ADCLRSWAP = x，控制ADC数据出现在LRC时钟的左边还是右边
		B0		MONO	= 0，0表示立体声，1表示单声道，仅左声道有效
	*/
	usReg = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	81fb      	strh	r3, [r7, #14]
	if (_usStandard == SAI_I2S_STANDARD)	/* I2S飞利浦标准 */
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d104      	bne.n	8001830 <WM8978_CfgAudioIF+0x24>
	{
		usReg |= (2 << 3);
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	f043 0310 	orr.w	r3, r3, #16
 800182c:	81fb      	strh	r3, [r7, #14]
 800182e:	e00e      	b.n	800184e <WM8978_CfgAudioIF+0x42>
	}
	else if (_usStandard == SAI_I2S_MSBJUSTIFIED)	/* MSB对齐标准(左对齐) */
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d104      	bne.n	8001840 <WM8978_CfgAudioIF+0x34>
	{
		usReg |= (1 << 3);
 8001836:	89fb      	ldrh	r3, [r7, #14]
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	81fb      	strh	r3, [r7, #14]
 800183e:	e006      	b.n	800184e <WM8978_CfgAudioIF+0x42>
	}
	else if (_usStandard == SAI_I2S_LSBJUSTIFIED)	/* LSB对齐标准(右对齐) */
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d003      	beq.n	800184e <WM8978_CfgAudioIF+0x42>
	{
		usReg |= (0 << 3);
	}
	else	/* PCM标准(16位通道帧上带长或短帧同步或者16位数据帧扩展为32位通道帧) */
	{
		usReg |= (3 << 3);;
 8001846:	89fb      	ldrh	r3, [r7, #14]
 8001848:	f043 0318 	orr.w	r3, r3, #24
 800184c:	81fb      	strh	r3, [r7, #14]
	}

	if (_ucWordLen == 24)
 800184e:	797b      	ldrb	r3, [r7, #5]
 8001850:	2b18      	cmp	r3, #24
 8001852:	d104      	bne.n	800185e <WM8978_CfgAudioIF+0x52>
	{
		usReg |= (2 << 5);
 8001854:	89fb      	ldrh	r3, [r7, #14]
 8001856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800185a:	81fb      	strh	r3, [r7, #14]
 800185c:	e006      	b.n	800186c <WM8978_CfgAudioIF+0x60>
	}
	else if (_ucWordLen == 32)
 800185e:	797b      	ldrb	r3, [r7, #5]
 8001860:	2b20      	cmp	r3, #32
 8001862:	d103      	bne.n	800186c <WM8978_CfgAudioIF+0x60>
	{
		usReg |= (3 << 5);
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800186a:	81fb      	strh	r3, [r7, #14]
	}
	else
	{
		usReg |= (0 << 5);		/* 16bit */
	}
	WM8978_WriteReg(4, usReg);
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	4619      	mov	r1, r3
 8001870:	2004      	movs	r0, #4
 8001872:	f7ff ff7b 	bl	800176c <WM8978_WriteReg>

	/*
		R6，时钟产生控制寄存器
		MS = 0,  WM8978被动时钟，由MCU提供MCLK时钟
	*/
	WM8978_WriteReg(6, 0x000);
 8001876:	2100      	movs	r1, #0
 8001878:	2006      	movs	r0, #6
 800187a:	f7ff ff77 	bl	800176c <WM8978_WriteReg>
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <WM8978_CfgAudioPath>:
  * @参数  _InPath 音频输入通道配置
  * 		_OutPath 音频输出通道配置
  * @返回  无
  */
void WM8978_CfgAudioPath(uint16_t _InPath, uint16_t _OutPath)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	460a      	mov	r2, r1
 8001890:	80fb      	strh	r3, [r7, #6]
 8001892:	4613      	mov	r3, r2
 8001894:	80bb      	strh	r3, [r7, #4]
	uint16_t usReg;

	/* 查看WM8978数据手册的 REGISTER MAP 章节， 第89页 */

	if ((_InPath == IN_PATH_OFF) && (_OutPath == OUT_PATH_OFF))
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d105      	bne.n	80018a8 <WM8978_CfgAudioPath+0x22>
 800189c:	88bb      	ldrh	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <WM8978_CfgAudioPath+0x22>
	{
		WM8978_PowerDown();
 80018a2:	f7ff ffad 	bl	8001800 <WM8978_PowerDown>
		return;
 80018a6:	e1da      	b.n	8001c5e <WM8978_CfgAudioPath+0x3d8>
		Bit4    MICBEN	,Microphone Bias Enable (MIC偏置电路使能)
		Bit3    BIASEN	,Analogue amplifier bias control 必须设置为1模拟放大器才工作
		Bit2    BUFIOEN , Unused input/output tie off buffer enable
		Bit1:0  VMIDSEL, 必须设置为非00值模拟放大器才工作
	*/
	usReg = (1 << 3) | (3 << 0);
 80018a8:	230b      	movs	r3, #11
 80018aa:	81fb      	strh	r3, [r7, #14]
	if (_OutPath & OUT3_4_ON) 	/* OUT3和OUT4使能输出到GSM模块 */
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <WM8978_CfgAudioPath+0x38>
	{
		usReg |= ((1 << 7) | (1 << 6));
 80018b6:	89fb      	ldrh	r3, [r7, #14]
 80018b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80018bc:	81fb      	strh	r3, [r7, #14]
	}
	if ((_InPath & MIC_LEFT_ON) || (_InPath & MIC_RIGHT_ON))
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d104      	bne.n	80018d2 <WM8978_CfgAudioPath+0x4c>
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <WM8978_CfgAudioPath+0x54>
	{
		usReg |= (1 << 4);
 80018d2:	89fb      	ldrh	r3, [r7, #14]
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(1, usReg);	/* 写寄存器 */
 80018da:	89fb      	ldrh	r3, [r7, #14]
 80018dc:	4619      	mov	r1, r3
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff ff44 	bl	800176c <WM8978_WriteReg>
		Bit3	INPGAENR,	Right channel input PGA enable 右声道输入PGA使能
		Bit2	INPGAENL,	Left channel input PGA enable
		Bit1	ADCENR,		Enable ADC right channel
		Bit0	ADCENL,		Enable ADC left channel
	*/
	usReg = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	81fb      	strh	r3, [r7, #14]
	if (_OutPath & EAR_LEFT_ON)
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <WM8978_CfgAudioPath+0x74>
	{
		usReg |= (1 << 7);
 80018f2:	89fb      	ldrh	r3, [r7, #14]
 80018f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f8:	81fb      	strh	r3, [r7, #14]
	}
	if (_OutPath & EAR_RIGHT_ON)
 80018fa:	88bb      	ldrh	r3, [r7, #4]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <WM8978_CfgAudioPath+0x86>
	{
		usReg |= (1 << 8);
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190a:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & MIC_LEFT_ON)
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <WM8978_CfgAudioPath+0x98>
	{
		usReg |= ((1 << 4) | (1 << 2));
 8001916:	89fb      	ldrh	r3, [r7, #14]
 8001918:	f043 0314 	orr.w	r3, r3, #20
 800191c:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & MIC_RIGHT_ON)
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <WM8978_CfgAudioPath+0xaa>
	{
		usReg |= ((1 << 5) | (1 << 3));
 8001928:	89fb      	ldrh	r3, [r7, #14]
 800192a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800192e:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & LINE_ON)
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <WM8978_CfgAudioPath+0xbc>
	{
		usReg |= ((1 << 4) | (1 << 5));
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001940:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & MIC_RIGHT_ON)
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <WM8978_CfgAudioPath+0xce>
	{
		usReg |= ((1 << 5) | (1 << 3));
 800194c:	89fb      	ldrh	r3, [r7, #14]
 800194e:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001952:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & ADC_ON)
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <WM8978_CfgAudioPath+0xe0>
	{
		usReg |= ((1 << 1) | (1 << 0));
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	f043 0303 	orr.w	r3, r3, #3
 8001964:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(2, usReg);	/* 写寄存器 */
 8001966:	89fb      	ldrh	r3, [r7, #14]
 8001968:	4619      	mov	r1, r3
 800196a:	2002      	movs	r0, #2
 800196c:	f7ff fefe 	bl	800176c <WM8978_WriteReg>
		Bit3	RMIXEN,		Right mixer enable
		Bit2	LMIXEN,		Left mixer enable
		Bit1	DACENR,		Right channel DAC enable
		Bit0	DACENL,		Left channel DAC enable
	*/
	usReg = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	81fb      	strh	r3, [r7, #14]
	if (_OutPath & OUT3_4_ON)
 8001974:	88bb      	ldrh	r3, [r7, #4]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <WM8978_CfgAudioPath+0x100>
	{
		usReg |= ((1 << 8) | (1 << 7));
 800197e:	89fb      	ldrh	r3, [r7, #14]
 8001980:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8001984:	81fb      	strh	r3, [r7, #14]
	}
	if (_OutPath & SPK_ON)
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <WM8978_CfgAudioPath+0x112>
	{
		usReg |= ((1 << 6) | (1 << 5));
 8001990:	89fb      	ldrh	r3, [r7, #14]
 8001992:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001996:	81fb      	strh	r3, [r7, #14]
	}
	if (_OutPath != OUT_PATH_OFF)
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <WM8978_CfgAudioPath+0x120>
	{
		usReg |= ((1 << 3) | (1 << 2));
 800199e:	89fb      	ldrh	r3, [r7, #14]
 80019a0:	f043 030c 	orr.w	r3, r3, #12
 80019a4:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & DAC_ON)
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <WM8978_CfgAudioPath+0x132>
	{
		usReg |= ((1 << 1) | (1 << 0));
 80019b0:	89fb      	ldrh	r3, [r7, #14]
 80019b2:	f043 0303 	orr.w	r3, r3, #3
 80019b6:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(3, usReg);	/* 写寄存器 */
 80019b8:	89fb      	ldrh	r3, [r7, #14]
 80019ba:	4619      	mov	r1, r3
 80019bc:	2003      	movs	r0, #3
 80019be:	f7ff fed5 	bl	800176c <WM8978_WriteReg>
		Bit3	0
		Bit2	L2_2INPPGA,		Connect L2 pin to left channel input PGA positive terminal
		Bit1	LIN2INPPGA,		Connect LIN pin to left channel input PGA negative terminal
		Bit0	LIP2INPPGA,		Connect LIP pin to left channel input PGA amplifier positive terminal
	*/
	usReg = 0 << 8;
 80019c2:	2300      	movs	r3, #0
 80019c4:	81fb      	strh	r3, [r7, #14]
	if (_InPath & LINE_ON)
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <WM8978_CfgAudioPath+0x152>
	{
		usReg |= ((1 << 6) | (1 << 2));
 80019d0:	89fb      	ldrh	r3, [r7, #14]
 80019d2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80019d6:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & MIC_RIGHT_ON)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <WM8978_CfgAudioPath+0x164>
	{
		usReg |= ((1 << 5) | (1 << 4));
 80019e2:	89fb      	ldrh	r3, [r7, #14]
 80019e4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80019e8:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & MIC_LEFT_ON)
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <WM8978_CfgAudioPath+0x176>
	{
		usReg |= ((1 << 1) | (1 << 0));
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	f043 0303 	orr.w	r3, r3, #3
 80019fa:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(44, usReg);	/* 写寄存器 */
 80019fc:	89fb      	ldrh	r3, [r7, #14]
 80019fe:	4619      	mov	r1, r3
 8001a00:	202c      	movs	r0, #44	@ 0x2c
 8001a02:	f7ff feb3 	bl	800176c <WM8978_WriteReg>
		Bit3 	ADCOSR,	ADC oversample rate select: 0=64x (lower power) 1=128x (best performance)
		Bit2   	0
		Bit1 	ADC right channel polarity adjust:  0=normal  1=inverted
		Bit0 	ADC left channel polarity adjust:  0=normal 1=inverted
	*/
	if (_InPath & ADC_ON)
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	f003 0320 	and.w	r3, r3, #32
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <WM8978_CfgAudioPath+0x190>
	{
		usReg = (1 << 3) | (0 << 8) | (4 << 0);		/* 禁止ADC高通滤波器, 设置截至频率 */
 8001a10:	230c      	movs	r3, #12
 8001a12:	81fb      	strh	r3, [r7, #14]
 8001a14:	e001      	b.n	8001a1a <WM8978_CfgAudioPath+0x194>
	}
	else
	{
		usReg = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(14, usReg);	/* 写寄存器 */
 8001a1a:	89fb      	ldrh	r3, [r7, #14]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	200e      	movs	r0, #14
 8001a20:	f7ff fea4 	bl	800176c <WM8978_WriteReg>

	/* 设置陷波滤波器（notch filter），主要用于抑制话筒声波正反馈，避免啸叫.  暂时关闭
		R27，R28，R29，R30 用于控制限波滤波器，WM8978(V4.5_2011).pdf 33页
		R7的 Bit7 NFEN = 0 表示禁止，1表示使能
	*/
	if (_InPath & ADC_ON)
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d017      	beq.n	8001a5e <WM8978_CfgAudioPath+0x1d8>
	{
		usReg = (0 << 7);
 8001a2e:	2300      	movs	r3, #0
 8001a30:	81fb      	strh	r3, [r7, #14]
		WM8978_WriteReg(27, usReg);	/* 写寄存器 */
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	4619      	mov	r1, r3
 8001a36:	201b      	movs	r0, #27
 8001a38:	f7ff fe98 	bl	800176c <WM8978_WriteReg>
		usReg = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	81fb      	strh	r3, [r7, #14]
		WM8978_WriteReg(28, usReg);	/* 写寄存器,填0，因为已经禁止，所以也可不做 */
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	4619      	mov	r1, r3
 8001a44:	201c      	movs	r0, #28
 8001a46:	f7ff fe91 	bl	800176c <WM8978_WriteReg>
		WM8978_WriteReg(29, usReg);	/* 写寄存器,填0，因为已经禁止，所以也可不做 */
 8001a4a:	89fb      	ldrh	r3, [r7, #14]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	201d      	movs	r0, #29
 8001a50:	f7ff fe8c 	bl	800176c <WM8978_WriteReg>
		WM8978_WriteReg(30, usReg);	/* 写寄存器,填0，因为已经禁止，所以也可不做 */
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	4619      	mov	r1, r3
 8001a58:	201e      	movs	r0, #30
 8001a5a:	f7ff fe87 	bl	800176c <WM8978_WriteReg>
	}

	/* 自动增益控制 ALC, R32  - 34  WM8978(V4.5_2011).pdf 36页 */
	{
		usReg = 0;		/* 禁止自动增益控制 */
 8001a5e:	2300      	movs	r3, #0
 8001a60:	81fb      	strh	r3, [r7, #14]
		WM8978_WriteReg(32, usReg);
 8001a62:	89fb      	ldrh	r3, [r7, #14]
 8001a64:	4619      	mov	r1, r3
 8001a66:	2020      	movs	r0, #32
 8001a68:	f7ff fe80 	bl	800176c <WM8978_WriteReg>
		WM8978_WriteReg(33, usReg);
 8001a6c:	89fb      	ldrh	r3, [r7, #14]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	2021      	movs	r0, #33	@ 0x21
 8001a72:	f7ff fe7b 	bl	800176c <WM8978_WriteReg>
		WM8978_WriteReg(34, usReg);
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	2022      	movs	r0, #34	@ 0x22
 8001a7c:	f7ff fe76 	bl	800176c <WM8978_WriteReg>

	/*  R35  ALC Noise Gate Control
		Bit3	NGATEN, Noise gate function enable
		Bit2:0	Noise gate threshold:
	*/
	usReg = (3 << 1) | (7 << 0);		/* 禁止自动增益控制 */
 8001a80:	2307      	movs	r3, #7
 8001a82:	81fb      	strh	r3, [r7, #14]
	WM8978_WriteReg(35, usReg);
 8001a84:	89fb      	ldrh	r3, [r7, #14]
 8001a86:	4619      	mov	r1, r3
 8001a88:	2023      	movs	r0, #35	@ 0x23
 8001a8a:	f7ff fe6f 	bl	800176c <WM8978_WriteReg>
		B7		= 0， 保留
		B6:4	L2_2BOOSTVOL = x， 0表示禁止，1-7表示增益-12dB ~ +6dB  （可以衰减也可以放大）
		B3		= 0， 保留
		B2:0`	AUXL2BOOSTVOL = x，0表示禁止，1-7表示增益-12dB ~ +6dB  （可以衰减也可以放大）
	*/
	usReg = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	81fb      	strh	r3, [r7, #14]
	if ((_InPath & MIC_LEFT_ON) || (_InPath & MIC_RIGHT_ON))
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <WM8978_CfgAudioPath+0x220>
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <WM8978_CfgAudioPath+0x228>
	{
		usReg |= (1 << 8);	/* MIC增益取+20dB */
 8001aa6:	89fb      	ldrh	r3, [r7, #14]
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aac:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & AUX_ON)
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <WM8978_CfgAudioPath+0x23a>
	{
		usReg |= (3 << 0);	/* Aux增益固定取3，用户可以自行调整 */
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
 8001aba:	f043 0303 	orr.w	r3, r3, #3
 8001abe:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & LINE_ON)
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <WM8978_CfgAudioPath+0x24c>
	{
		usReg |= (3 << 4);	/* Line增益固定取3，用户可以自行调整 */
 8001aca:	89fb      	ldrh	r3, [r7, #14]
 8001acc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001ad0:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(47, usReg);	/* 写左声道输入增益控制寄存器 */
 8001ad2:	89fb      	ldrh	r3, [r7, #14]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	202f      	movs	r0, #47	@ 0x2f
 8001ad8:	f7ff fe48 	bl	800176c <WM8978_WriteReg>
	WM8978_WriteReg(48, usReg);	/* 写右声道输入增益控制寄存器 */
 8001adc:	89fb      	ldrh	r3, [r7, #14]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	2030      	movs	r0, #48	@ 0x30
 8001ae2:	f7ff fe43 	bl	800176c <WM8978_WriteReg>
		Bit7:0 	增益选择； 0000 0000 = 静音
						   0000 0001 = -127dB
						   0000 0010 = -12.5dB  （0.5dB 步长）
						   1111 1111 = 0dB  （不衰减）
	*/
	usReg = 0xFF;
 8001ae6:	23ff      	movs	r3, #255	@ 0xff
 8001ae8:	81fb      	strh	r3, [r7, #14]
	WM8978_WriteReg(15, usReg);	/* 选择0dB，先缓存左声道 */
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	4619      	mov	r1, r3
 8001aee:	200f      	movs	r0, #15
 8001af0:	f7ff fe3c 	bl	800176c <WM8978_WriteReg>
	usReg = 0x1FF;
 8001af4:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001af8:	81fb      	strh	r3, [r7, #14]
	WM8978_WriteReg(16, usReg);	/* 同步更新左右声道 */
 8001afa:	89fb      	ldrh	r3, [r7, #14]
 8001afc:	4619      	mov	r1, r3
 8001afe:	2010      	movs	r0, #16
 8001b00:	f7ff fe34 	bl	800176c <WM8978_WriteReg>
		B4	 INVROUT2,  Invert ROUT2 output 用于扬声器推挽输出
		B3:1 BEEPVOL = 7;	AUXR input to ROUT2 inverter gain
		B0	 BEEPEN = 1;	Enable AUXR beep input

	*/
	usReg = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	81fb      	strh	r3, [r7, #14]
	if (_OutPath & SPK_ON)
 8001b08:	88bb      	ldrh	r3, [r7, #4]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <WM8978_CfgAudioPath+0x294>
	{
		usReg |= (1 << 4);	/* ROUT2 反相, 用于驱动扬声器 */
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & AUX_ON)
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <WM8978_CfgAudioPath+0x2a6>
	{
		usReg |= ((7 << 1) | (1 << 0));
 8001b24:	89fb      	ldrh	r3, [r7, #14]
 8001b26:	f043 030f 	orr.w	r3, r3, #15
 8001b2a:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(43, usReg);
 8001b2c:	89fb      	ldrh	r3, [r7, #14]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	202b      	movs	r0, #43	@ 0x2b
 8001b32:	f7ff fe1b 	bl	800176c <WM8978_WriteReg>
		B3		OUT3BOOST,	0 = OUT3 output gain = -1; DC = AVDD / 2；1 = OUT3 output gain = +1.5；DC = 1.5 x AVDD / 2
		B2		SPKBOOST,	0 = Speaker gain = -1;  DC = AVDD / 2 ; 1 = Speaker gain = +1.5; DC = 1.5 x AVDD / 2
		B1		TSDEN,   Thermal Shutdown Enable  扬声器热保护使能（缺省1）
		B0		VROI,	Disabled Outputs to VREF Resistance
	*/
	usReg = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	81fb      	strh	r3, [r7, #14]
	if (_InPath & DAC_ON)
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <WM8978_CfgAudioPath+0x2c6>
	{
		usReg |= ((1 << 6) | (1 << 5));
 8001b44:	89fb      	ldrh	r3, [r7, #14]
 8001b46:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b4a:	81fb      	strh	r3, [r7, #14]
	}
	if (_OutPath & SPK_ON)
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <WM8978_CfgAudioPath+0x2d8>
	{
		usReg |=  ((1 << 2) | (1 << 1));	/* SPK 1.5x增益,  热保护使能 */
 8001b56:	89fb      	ldrh	r3, [r7, #14]
 8001b58:	f043 0306 	orr.w	r3, r3, #6
 8001b5c:	81fb      	strh	r3, [r7, #14]
	}
	if (_OutPath & OUT3_4_ON)
 8001b5e:	88bb      	ldrh	r3, [r7, #4]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <WM8978_CfgAudioPath+0x2ea>
	{
		usReg |=  ((1 << 4) | (1 << 3));	/* BOOT3  BOOT4  1.5x增益 */
 8001b68:	89fb      	ldrh	r3, [r7, #14]
 8001b6a:	f043 0318 	orr.w	r3, r3, #24
 8001b6e:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(49, usReg);
 8001b70:	89fb      	ldrh	r3, [r7, #14]
 8001b72:	4619      	mov	r1, r3
 8001b74:	2031      	movs	r0, #49	@ 0x31
 8001b76:	f7ff fdf9 	bl	800176c <WM8978_WriteReg>
		B5		AUXL2LMIX = 1		Left Auxilliary input to left channel
		B4:2	BYPLMIXVOL			音量
		B1		BYPL2LMIX = 0;		Left bypass path (from the left channel input boost output) to left output mixer
		B0		DACL2LMIX = 1;		Left DAC output to left output mixer
	*/
	usReg = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	81fb      	strh	r3, [r7, #14]
	if (_InPath & AUX_ON)
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <WM8978_CfgAudioPath+0x30a>
	{
		usReg |= ((7 << 6) | (1 << 5));
 8001b88:	89fb      	ldrh	r3, [r7, #14]
 8001b8a:	f443 73f0 	orr.w	r3, r3, #480	@ 0x1e0
 8001b8e:	81fb      	strh	r3, [r7, #14]
	}
	if ((_InPath & LINE_ON) || (_InPath & MIC_LEFT_ON) || (_InPath & MIC_RIGHT_ON))
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <WM8978_CfgAudioPath+0x328>
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d104      	bne.n	8001bae <WM8978_CfgAudioPath+0x328>
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <WM8978_CfgAudioPath+0x330>
	{
		usReg |= ((7 << 2) | (1 << 1));
 8001bae:	89fb      	ldrh	r3, [r7, #14]
 8001bb0:	f043 031e 	orr.w	r3, r3, #30
 8001bb4:	81fb      	strh	r3, [r7, #14]
	}
	if (_InPath & DAC_ON)
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <WM8978_CfgAudioPath+0x342>
	{
		usReg |= (1 << 0);
 8001bc0:	89fb      	ldrh	r3, [r7, #14]
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(50, usReg);
 8001bc8:	89fb      	ldrh	r3, [r7, #14]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	2032      	movs	r0, #50	@ 0x32
 8001bce:	f7ff fdcd 	bl	800176c <WM8978_WriteReg>
	WM8978_WriteReg(51, usReg);
 8001bd2:	89fb      	ldrh	r3, [r7, #14]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	2033      	movs	r0, #51	@ 0x33
 8001bd8:	f7ff fdc8 	bl	800176c <WM8978_WriteReg>
		B4		0
		B2		LMIX2OUT3,	Left ADC input to OUT3
		B1		LDAC2OUT3,	Left DAC mixer to OUT3
		B0		LDAC2OUT3,	Left DAC output to OUT3
	*/
	usReg = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	81fb      	strh	r3, [r7, #14]
	if (_OutPath & OUT3_4_ON)
 8001be0:	88bb      	ldrh	r3, [r7, #4]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <WM8978_CfgAudioPath+0x36c>
	{
		usReg |= (1 << 3);
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(56, usReg);
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	2038      	movs	r0, #56	@ 0x38
 8001bf8:	f7ff fdb8 	bl	800176c <WM8978_WriteReg>
		B3		LDAC2UT4,	Left DAC to OUT4
		B2		BYPR2OUT4,	Right ADC input to OUT4
		B1		RMIX2OUT4,	Right DAC mixer to OUT4
		B0		RDAC2OUT4,	Right DAC output to OUT4
	*/
	usReg = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	81fb      	strh	r3, [r7, #14]
	if (_OutPath & OUT3_4_ON)
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <WM8978_CfgAudioPath+0x38c>
	{
		usReg |= ((1 << 4) |  (1 << 1));
 8001c0a:	89fb      	ldrh	r3, [r7, #14]
 8001c0c:	f043 0312 	orr.w	r3, r3, #18
 8001c10:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(57, usReg);
 8001c12:	89fb      	ldrh	r3, [r7, #14]
 8001c14:	4619      	mov	r1, r3
 8001c16:	2039      	movs	r0, #57	@ 0x39
 8001c18:	f7ff fda8 	bl	800176c <WM8978_WriteReg>

	/* R11, 12 寄存器 DAC数字音量
		R11		Left DAC Digital Volume
		R12		Right DAC Digital Volume
	*/
	if (_InPath & DAC_ON)
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <WM8978_CfgAudioPath+0x3b4>
	{
		WM8978_WriteReg(11, 255);
 8001c26:	21ff      	movs	r1, #255	@ 0xff
 8001c28:	200b      	movs	r0, #11
 8001c2a:	f7ff fd9f 	bl	800176c <WM8978_WriteReg>
		WM8978_WriteReg(12, 255 | 0x100);
 8001c2e:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001c32:	200c      	movs	r0, #12
 8001c34:	f7ff fd9a 	bl	800176c <WM8978_WriteReg>
 8001c38:	e008      	b.n	8001c4c <WM8978_CfgAudioPath+0x3c6>
	}
	else
	{
		WM8978_WriteReg(11, 0);
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	200b      	movs	r0, #11
 8001c3e:	f7ff fd95 	bl	800176c <WM8978_WriteReg>
		WM8978_WriteReg(12, 0 | 0x100);
 8001c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c46:	200c      	movs	r0, #12
 8001c48:	f7ff fd90 	bl	800176c <WM8978_WriteReg>
		B3	DACOSR128,	DAC oversampling rate: 0=64x (lowest power) 1=128x (best performance)
		B2	AMUTE,		Automute enable
		B1	DACPOLR,	Right DAC output polarity
		B0	DACPOLL,	Left DAC output polarity:
	*/
	if (_InPath & DAC_ON)
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <WM8978_CfgAudioPath+0x3d8>
	{
		WM8978_WriteReg(10, 0);
 8001c56:	2100      	movs	r1, #0
 8001c58:	200a      	movs	r0, #10
 8001c5a:	f7ff fd87 	bl	800176c <WM8978_WriteReg>
	}
	;
}
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <WM8978_CtrlGPIO1>:
  * 				1：放音
  * 				0：录音
  * @返回  无
  */
void WM8978_CtrlGPIO1(uint8_t _ucValue)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
	uint16_t usRegValue;

	/* R8， pdf 62页 */
	if (_ucValue == 0) /* 输出0 */
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <WM8978_CtrlGPIO1+0x16>
	{
		usRegValue = 6; /* B2:0 = 110 */
 8001c74:	2306      	movs	r3, #6
 8001c76:	81fb      	strh	r3, [r7, #14]
 8001c78:	e001      	b.n	8001c7e <WM8978_CtrlGPIO1+0x1a>
	}
	else
	{
		usRegValue = 7; /* B2:0 = 111 */
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	81fb      	strh	r3, [r7, #14]
	}
	WM8978_WriteReg(8, usRegValue);
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	4619      	mov	r1, r3
 8001c82:	2008      	movs	r0, #8
 8001c84:	f7ff fd72 	bl	800176c <WM8978_WriteReg>
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <WM8978_Reset>:
/**
  * @简介  复位wm8978，所有的寄存器值恢复到缺省值.
  * @返回  HAL状态
  */
HAL_StatusTypeDef WM8978_Reset(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b09e      	sub	sp, #120	@ 0x78
 8001c94:	af00      	add	r7, sp, #0
	/* wm8978寄存器缺省值 */
	const uint16_t reg_default[] = {
 8001c96:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <WM8978_Reset+0x60>)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	2274      	movs	r2, #116	@ 0x74
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f00f fe35 	bl	801190e <memcpy>
		0x001, 0x001 };

	uint8_t res;
	uint8_t i;

	res = WM8978_WriteReg(0x00, 0);
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f7ff fd60 	bl	800176c <WM8978_WriteReg>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

	for (i = 0; i < sizeof(reg_default) / 2; i++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001cb8:	e010      	b.n	8001cdc <WM8978_Reset+0x4c>
	{
		wm8978_RegCash[i] = reg_default[i];
 8001cba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001cbe:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	3378      	adds	r3, #120	@ 0x78
 8001cc6:	443b      	add	r3, r7
 8001cc8:	f833 1c78 	ldrh.w	r1, [r3, #-120]
 8001ccc:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <WM8978_Reset+0x64>)
 8001cce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < sizeof(reg_default) / 2; i++)
 8001cd2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001cdc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001ce0:	2b39      	cmp	r3, #57	@ 0x39
 8001ce2:	d9ea      	bls.n	8001cba <WM8978_Reset+0x2a>
	}

	return res;
 8001ce4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3778      	adds	r7, #120	@ 0x78
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	0801245c 	.word	0x0801245c
 8001cf4:	24000008 	.word	0x24000008

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f000 f98c 	bl	800201c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d04:	f004 fc8a 	bl	800661c <HAL_RCC_GetSysClockFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_Init+0x68>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	4913      	ldr	r1, [pc, #76]	@ (8001d64 <HAL_Init+0x6c>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <HAL_Init+0x68>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d64 <HAL_Init+0x6c>)
 8001d2c:	5cd3      	ldrb	r3, [r2, r3]
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	4a0b      	ldr	r2, [pc, #44]	@ (8001d68 <HAL_Init+0x70>)
 8001d3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d6c <HAL_Init+0x74>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d42:	200f      	movs	r0, #15
 8001d44:	f000 f814 	bl	8001d70 <HAL_InitTick>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e002      	b.n	8001d58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d52:	f7ff faa5 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	58024400 	.word	0x58024400
 8001d64:	08012518 	.word	0x08012518
 8001d68:	24000004 	.word	0x24000004
 8001d6c:	24000000 	.word	0x24000000

08001d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d78:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_InitTick+0x60>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e021      	b.n	8001dc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d84:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <HAL_InitTick+0x64>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_InitTick+0x60>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f971 	bl	8002082 <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 f93b 	bl	8002032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	@ (8001dd8 <HAL_InitTick+0x68>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	24000080 	.word	0x24000080
 8001dd4:	24000000 	.word	0x24000000
 8001dd8:	2400007c 	.word	0x2400007c

08001ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	24000080 	.word	0x24000080
 8001e00:	24004964 	.word	0x24004964

08001e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	24004964 	.word	0x24004964

08001e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff ffee 	bl	8001e04 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	24000080 	.word	0x24000080

08001e64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e68:	4b03      	ldr	r3, [pc, #12]	@ (8001e78 <HAL_GetREVID+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0c1b      	lsrs	r3, r3, #16
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	5c001000 	.word	0x5c001000

08001e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x40>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x40>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00
 8001ec0:	05fa0000 	.word	0x05fa0000

08001ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <__NVIC_GetPriorityGrouping+0x18>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0307 	and.w	r3, r3, #7
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	db0b      	blt.n	8001f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	4907      	ldr	r1, [pc, #28]	@ (8001f18 <__NVIC_EnableIRQ+0x38>)
 8001efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	2001      	movs	r0, #1
 8001f02:	fa00 f202 	lsl.w	r2, r0, r2
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	db0a      	blt.n	8001f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	490c      	ldr	r1, [pc, #48]	@ (8001f68 <__NVIC_SetPriority+0x4c>)
 8001f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f44:	e00a      	b.n	8001f5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4908      	ldr	r1, [pc, #32]	@ (8001f6c <__NVIC_SetPriority+0x50>)
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	3b04      	subs	r3, #4
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	440b      	add	r3, r1
 8001f5a:	761a      	strb	r2, [r3, #24]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	@ 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f1c3 0307 	rsb	r3, r3, #7
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	bf28      	it	cs
 8001f8e:	2304      	movcs	r3, #4
 8001f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d902      	bls.n	8001fa0 <NVIC_EncodePriority+0x30>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3b03      	subs	r3, #3
 8001f9e:	e000      	b.n	8001fa2 <NVIC_EncodePriority+0x32>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43d9      	mvns	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	4313      	orrs	r3, r2
         );
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	@ 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe8:	d301      	bcc.n	8001fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00f      	b.n	800200e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fee:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <SysTick_Config+0x40>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f7ff ff8e 	bl	8001f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <SysTick_Config+0x40>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002006:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <SysTick_Config+0x40>)
 8002008:	2207      	movs	r2, #7
 800200a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	e000e010 	.word	0xe000e010

0800201c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff29 	bl	8001e7c <__NVIC_SetPriorityGrouping>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff40 	bl	8001ec4 <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff90 	bl	8001f70 <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5f 	bl	8001f1c <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff33 	bl	8001ee0 <__NVIC_EnableIRQ>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffa4 	bl	8001fd8 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff feae 	bl	8001e04 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e316      	b.n	80026e2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a66      	ldr	r2, [pc, #408]	@ (8002254 <HAL_DMA_Init+0x1b8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d04a      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a65      	ldr	r2, [pc, #404]	@ (8002258 <HAL_DMA_Init+0x1bc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d045      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a63      	ldr	r2, [pc, #396]	@ (800225c <HAL_DMA_Init+0x1c0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d040      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a62      	ldr	r2, [pc, #392]	@ (8002260 <HAL_DMA_Init+0x1c4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d03b      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a60      	ldr	r2, [pc, #384]	@ (8002264 <HAL_DMA_Init+0x1c8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d036      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002268 <HAL_DMA_Init+0x1cc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d031      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a5d      	ldr	r2, [pc, #372]	@ (800226c <HAL_DMA_Init+0x1d0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d02c      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002270 <HAL_DMA_Init+0x1d4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d027      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a5a      	ldr	r2, [pc, #360]	@ (8002274 <HAL_DMA_Init+0x1d8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d022      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a59      	ldr	r2, [pc, #356]	@ (8002278 <HAL_DMA_Init+0x1dc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d01d      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a57      	ldr	r2, [pc, #348]	@ (800227c <HAL_DMA_Init+0x1e0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d018      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a56      	ldr	r2, [pc, #344]	@ (8002280 <HAL_DMA_Init+0x1e4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d013      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a54      	ldr	r2, [pc, #336]	@ (8002284 <HAL_DMA_Init+0x1e8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00e      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a53      	ldr	r2, [pc, #332]	@ (8002288 <HAL_DMA_Init+0x1ec>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d009      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a51      	ldr	r2, [pc, #324]	@ (800228c <HAL_DMA_Init+0x1f0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d004      	beq.n	8002154 <HAL_DMA_Init+0xb8>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a50      	ldr	r2, [pc, #320]	@ (8002290 <HAL_DMA_Init+0x1f4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_DMA_Init+0xbc>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_DMA_Init+0xbe>
 8002158:	2300      	movs	r3, #0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 813b 	beq.w	80023d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a37      	ldr	r2, [pc, #220]	@ (8002254 <HAL_DMA_Init+0x1b8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d04a      	beq.n	8002210 <HAL_DMA_Init+0x174>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a36      	ldr	r2, [pc, #216]	@ (8002258 <HAL_DMA_Init+0x1bc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d045      	beq.n	8002210 <HAL_DMA_Init+0x174>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a34      	ldr	r2, [pc, #208]	@ (800225c <HAL_DMA_Init+0x1c0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d040      	beq.n	8002210 <HAL_DMA_Init+0x174>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a33      	ldr	r2, [pc, #204]	@ (8002260 <HAL_DMA_Init+0x1c4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d03b      	beq.n	8002210 <HAL_DMA_Init+0x174>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a31      	ldr	r2, [pc, #196]	@ (8002264 <HAL_DMA_Init+0x1c8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d036      	beq.n	8002210 <HAL_DMA_Init+0x174>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a30      	ldr	r2, [pc, #192]	@ (8002268 <HAL_DMA_Init+0x1cc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d031      	beq.n	8002210 <HAL_DMA_Init+0x174>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2e      	ldr	r2, [pc, #184]	@ (800226c <HAL_DMA_Init+0x1d0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d02c      	beq.n	8002210 <HAL_DMA_Init+0x174>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002270 <HAL_DMA_Init+0x1d4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d027      	beq.n	8002210 <HAL_DMA_Init+0x174>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002274 <HAL_DMA_Init+0x1d8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d022      	beq.n	8002210 <HAL_DMA_Init+0x174>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002278 <HAL_DMA_Init+0x1dc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d01d      	beq.n	8002210 <HAL_DMA_Init+0x174>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a28      	ldr	r2, [pc, #160]	@ (800227c <HAL_DMA_Init+0x1e0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d018      	beq.n	8002210 <HAL_DMA_Init+0x174>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a27      	ldr	r2, [pc, #156]	@ (8002280 <HAL_DMA_Init+0x1e4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <HAL_DMA_Init+0x174>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a25      	ldr	r2, [pc, #148]	@ (8002284 <HAL_DMA_Init+0x1e8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00e      	beq.n	8002210 <HAL_DMA_Init+0x174>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a24      	ldr	r2, [pc, #144]	@ (8002288 <HAL_DMA_Init+0x1ec>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_DMA_Init+0x174>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a22      	ldr	r2, [pc, #136]	@ (800228c <HAL_DMA_Init+0x1f0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d004      	beq.n	8002210 <HAL_DMA_Init+0x174>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a21      	ldr	r2, [pc, #132]	@ (8002290 <HAL_DMA_Init+0x1f4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d108      	bne.n	8002222 <HAL_DMA_Init+0x186>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e007      	b.n	8002232 <HAL_DMA_Init+0x196>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002232:	e02f      	b.n	8002294 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002234:	f7ff fde6 	bl	8001e04 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b05      	cmp	r3, #5
 8002240:	d928      	bls.n	8002294 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2203      	movs	r2, #3
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e246      	b.n	80026e2 <HAL_DMA_Init+0x646>
 8002254:	40020010 	.word	0x40020010
 8002258:	40020028 	.word	0x40020028
 800225c:	40020040 	.word	0x40020040
 8002260:	40020058 	.word	0x40020058
 8002264:	40020070 	.word	0x40020070
 8002268:	40020088 	.word	0x40020088
 800226c:	400200a0 	.word	0x400200a0
 8002270:	400200b8 	.word	0x400200b8
 8002274:	40020410 	.word	0x40020410
 8002278:	40020428 	.word	0x40020428
 800227c:	40020440 	.word	0x40020440
 8002280:	40020458 	.word	0x40020458
 8002284:	40020470 	.word	0x40020470
 8002288:	40020488 	.word	0x40020488
 800228c:	400204a0 	.word	0x400204a0
 8002290:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1c8      	bne.n	8002234 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4b83      	ldr	r3, [pc, #524]	@ (80024bc <HAL_DMA_Init+0x420>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80022ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d107      	bne.n	80022f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	4313      	orrs	r3, r2
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80022f8:	4b71      	ldr	r3, [pc, #452]	@ (80024c0 <HAL_DMA_Init+0x424>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b71      	ldr	r3, [pc, #452]	@ (80024c4 <HAL_DMA_Init+0x428>)
 80022fe:	4013      	ands	r3, r2
 8002300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002304:	d328      	bcc.n	8002358 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b28      	cmp	r3, #40	@ 0x28
 800230c:	d903      	bls.n	8002316 <HAL_DMA_Init+0x27a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b2e      	cmp	r3, #46	@ 0x2e
 8002314:	d917      	bls.n	8002346 <HAL_DMA_Init+0x2aa>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b3e      	cmp	r3, #62	@ 0x3e
 800231c:	d903      	bls.n	8002326 <HAL_DMA_Init+0x28a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b42      	cmp	r3, #66	@ 0x42
 8002324:	d90f      	bls.n	8002346 <HAL_DMA_Init+0x2aa>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b46      	cmp	r3, #70	@ 0x46
 800232c:	d903      	bls.n	8002336 <HAL_DMA_Init+0x29a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b48      	cmp	r3, #72	@ 0x48
 8002334:	d907      	bls.n	8002346 <HAL_DMA_Init+0x2aa>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b4e      	cmp	r3, #78	@ 0x4e
 800233c:	d905      	bls.n	800234a <HAL_DMA_Init+0x2ae>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b52      	cmp	r3, #82	@ 0x52
 8002344:	d801      	bhi.n	800234a <HAL_DMA_Init+0x2ae>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_DMA_Init+0x2b0>
 800234a:	2300      	movs	r3, #0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002356:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f023 0307 	bic.w	r3, r3, #7
 800236e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	2b04      	cmp	r3, #4
 8002380:	d117      	bne.n	80023b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f002 fb3f 	bl	8004a18 <DMA_CheckFifoParam>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2240      	movs	r2, #64	@ 0x40
 80023a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e197      	b.n	80026e2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f002 fa7a 	bl	80048b4 <DMA_CalcBaseAndBitshift>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	223f      	movs	r2, #63	@ 0x3f
 80023ce:	409a      	lsls	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	e0cd      	b.n	8002572 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a3b      	ldr	r2, [pc, #236]	@ (80024c8 <HAL_DMA_Init+0x42c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <HAL_DMA_Init+0x38a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a39      	ldr	r2, [pc, #228]	@ (80024cc <HAL_DMA_Init+0x430>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01d      	beq.n	8002426 <HAL_DMA_Init+0x38a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a38      	ldr	r2, [pc, #224]	@ (80024d0 <HAL_DMA_Init+0x434>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d018      	beq.n	8002426 <HAL_DMA_Init+0x38a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a36      	ldr	r2, [pc, #216]	@ (80024d4 <HAL_DMA_Init+0x438>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_DMA_Init+0x38a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a35      	ldr	r2, [pc, #212]	@ (80024d8 <HAL_DMA_Init+0x43c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00e      	beq.n	8002426 <HAL_DMA_Init+0x38a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a33      	ldr	r2, [pc, #204]	@ (80024dc <HAL_DMA_Init+0x440>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_DMA_Init+0x38a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a32      	ldr	r2, [pc, #200]	@ (80024e0 <HAL_DMA_Init+0x444>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_DMA_Init+0x38a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a30      	ldr	r2, [pc, #192]	@ (80024e4 <HAL_DMA_Init+0x448>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_DMA_Init+0x38e>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_DMA_Init+0x390>
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 8097 	beq.w	8002560 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a24      	ldr	r2, [pc, #144]	@ (80024c8 <HAL_DMA_Init+0x42c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d021      	beq.n	8002480 <HAL_DMA_Init+0x3e4>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a22      	ldr	r2, [pc, #136]	@ (80024cc <HAL_DMA_Init+0x430>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01c      	beq.n	8002480 <HAL_DMA_Init+0x3e4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a21      	ldr	r2, [pc, #132]	@ (80024d0 <HAL_DMA_Init+0x434>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d017      	beq.n	8002480 <HAL_DMA_Init+0x3e4>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1f      	ldr	r2, [pc, #124]	@ (80024d4 <HAL_DMA_Init+0x438>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d012      	beq.n	8002480 <HAL_DMA_Init+0x3e4>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1e      	ldr	r2, [pc, #120]	@ (80024d8 <HAL_DMA_Init+0x43c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00d      	beq.n	8002480 <HAL_DMA_Init+0x3e4>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <HAL_DMA_Init+0x440>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d008      	beq.n	8002480 <HAL_DMA_Init+0x3e4>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1b      	ldr	r2, [pc, #108]	@ (80024e0 <HAL_DMA_Init+0x444>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d003      	beq.n	8002480 <HAL_DMA_Init+0x3e4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a19      	ldr	r2, [pc, #100]	@ (80024e4 <HAL_DMA_Init+0x448>)
 800247e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <HAL_DMA_Init+0x44c>)
 800249c:	4013      	ands	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b40      	cmp	r3, #64	@ 0x40
 80024a6:	d021      	beq.n	80024ec <HAL_DMA_Init+0x450>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b80      	cmp	r3, #128	@ 0x80
 80024ae:	d102      	bne.n	80024b6 <HAL_DMA_Init+0x41a>
 80024b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024b4:	e01b      	b.n	80024ee <HAL_DMA_Init+0x452>
 80024b6:	2300      	movs	r3, #0
 80024b8:	e019      	b.n	80024ee <HAL_DMA_Init+0x452>
 80024ba:	bf00      	nop
 80024bc:	fe10803f 	.word	0xfe10803f
 80024c0:	5c001000 	.word	0x5c001000
 80024c4:	ffff0000 	.word	0xffff0000
 80024c8:	58025408 	.word	0x58025408
 80024cc:	5802541c 	.word	0x5802541c
 80024d0:	58025430 	.word	0x58025430
 80024d4:	58025444 	.word	0x58025444
 80024d8:	58025458 	.word	0x58025458
 80024dc:	5802546c 	.word	0x5802546c
 80024e0:	58025480 	.word	0x58025480
 80024e4:	58025494 	.word	0x58025494
 80024e8:	fffe000f 	.word	0xfffe000f
 80024ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68d2      	ldr	r2, [r2, #12]
 80024f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800250c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002514:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800251c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b6e      	ldr	r3, [pc, #440]	@ (80026ec <HAL_DMA_Init+0x650>)
 8002534:	4413      	add	r3, r2
 8002536:	4a6e      	ldr	r2, [pc, #440]	@ (80026f0 <HAL_DMA_Init+0x654>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	009a      	lsls	r2, r3, #2
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f002 f9b5 	bl	80048b4 <DMA_CalcBaseAndBitshift>
 800254a:	4603      	mov	r3, r0
 800254c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2201      	movs	r2, #1
 8002558:	409a      	lsls	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	e008      	b.n	8002572 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2240      	movs	r2, #64	@ 0x40
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2203      	movs	r2, #3
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0b7      	b.n	80026e2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a5f      	ldr	r2, [pc, #380]	@ (80026f4 <HAL_DMA_Init+0x658>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d072      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a5d      	ldr	r2, [pc, #372]	@ (80026f8 <HAL_DMA_Init+0x65c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d06d      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5c      	ldr	r2, [pc, #368]	@ (80026fc <HAL_DMA_Init+0x660>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d068      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a5a      	ldr	r2, [pc, #360]	@ (8002700 <HAL_DMA_Init+0x664>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d063      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a59      	ldr	r2, [pc, #356]	@ (8002704 <HAL_DMA_Init+0x668>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d05e      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a57      	ldr	r2, [pc, #348]	@ (8002708 <HAL_DMA_Init+0x66c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d059      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a56      	ldr	r2, [pc, #344]	@ (800270c <HAL_DMA_Init+0x670>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d054      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a54      	ldr	r2, [pc, #336]	@ (8002710 <HAL_DMA_Init+0x674>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d04f      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a53      	ldr	r2, [pc, #332]	@ (8002714 <HAL_DMA_Init+0x678>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d04a      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a51      	ldr	r2, [pc, #324]	@ (8002718 <HAL_DMA_Init+0x67c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d045      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a50      	ldr	r2, [pc, #320]	@ (800271c <HAL_DMA_Init+0x680>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d040      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002720 <HAL_DMA_Init+0x684>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d03b      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002724 <HAL_DMA_Init+0x688>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d036      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002728 <HAL_DMA_Init+0x68c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d031      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a4a      	ldr	r2, [pc, #296]	@ (800272c <HAL_DMA_Init+0x690>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d02c      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a48      	ldr	r2, [pc, #288]	@ (8002730 <HAL_DMA_Init+0x694>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d027      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a47      	ldr	r2, [pc, #284]	@ (8002734 <HAL_DMA_Init+0x698>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a45      	ldr	r2, [pc, #276]	@ (8002738 <HAL_DMA_Init+0x69c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01d      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a44      	ldr	r2, [pc, #272]	@ (800273c <HAL_DMA_Init+0x6a0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d018      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a42      	ldr	r2, [pc, #264]	@ (8002740 <HAL_DMA_Init+0x6a4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a41      	ldr	r2, [pc, #260]	@ (8002744 <HAL_DMA_Init+0x6a8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00e      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3f      	ldr	r2, [pc, #252]	@ (8002748 <HAL_DMA_Init+0x6ac>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d009      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a3e      	ldr	r2, [pc, #248]	@ (800274c <HAL_DMA_Init+0x6b0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <HAL_DMA_Init+0x5c6>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a3c      	ldr	r2, [pc, #240]	@ (8002750 <HAL_DMA_Init+0x6b4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_DMA_Init+0x5ca>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_DMA_Init+0x5cc>
 8002666:	2300      	movs	r3, #0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d032      	beq.n	80026d2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f002 fa4f 	bl	8004b10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b80      	cmp	r3, #128	@ 0x80
 8002678:	d102      	bne.n	8002680 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002694:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d010      	beq.n	80026c0 <HAL_DMA_Init+0x624>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d80c      	bhi.n	80026c0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f002 facc 	bl	8004c44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	e008      	b.n	80026d2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	a7fdabf8 	.word	0xa7fdabf8
 80026f0:	cccccccd 	.word	0xcccccccd
 80026f4:	40020010 	.word	0x40020010
 80026f8:	40020028 	.word	0x40020028
 80026fc:	40020040 	.word	0x40020040
 8002700:	40020058 	.word	0x40020058
 8002704:	40020070 	.word	0x40020070
 8002708:	40020088 	.word	0x40020088
 800270c:	400200a0 	.word	0x400200a0
 8002710:	400200b8 	.word	0x400200b8
 8002714:	40020410 	.word	0x40020410
 8002718:	40020428 	.word	0x40020428
 800271c:	40020440 	.word	0x40020440
 8002720:	40020458 	.word	0x40020458
 8002724:	40020470 	.word	0x40020470
 8002728:	40020488 	.word	0x40020488
 800272c:	400204a0 	.word	0x400204a0
 8002730:	400204b8 	.word	0x400204b8
 8002734:	58025408 	.word	0x58025408
 8002738:	5802541c 	.word	0x5802541c
 800273c:	58025430 	.word	0x58025430
 8002740:	58025444 	.word	0x58025444
 8002744:	58025458 	.word	0x58025458
 8002748:	5802546c 	.word	0x5802546c
 800274c:	58025480 	.word	0x58025480
 8002750:	58025494 	.word	0x58025494

08002754 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e226      	b.n	8002bbe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_DMA_Start_IT+0x2a>
 800277a:	2302      	movs	r3, #2
 800277c:	e21f      	b.n	8002bbe <HAL_DMA_Start_IT+0x46a>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	f040 820a 	bne.w	8002ba8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a68      	ldr	r2, [pc, #416]	@ (8002948 <HAL_DMA_Start_IT+0x1f4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d04a      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a66      	ldr	r2, [pc, #408]	@ (800294c <HAL_DMA_Start_IT+0x1f8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d045      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a65      	ldr	r2, [pc, #404]	@ (8002950 <HAL_DMA_Start_IT+0x1fc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d040      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a63      	ldr	r2, [pc, #396]	@ (8002954 <HAL_DMA_Start_IT+0x200>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d03b      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a62      	ldr	r2, [pc, #392]	@ (8002958 <HAL_DMA_Start_IT+0x204>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d036      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a60      	ldr	r2, [pc, #384]	@ (800295c <HAL_DMA_Start_IT+0x208>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d031      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002960 <HAL_DMA_Start_IT+0x20c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d02c      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002964 <HAL_DMA_Start_IT+0x210>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d027      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002968 <HAL_DMA_Start_IT+0x214>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d022      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a5a      	ldr	r2, [pc, #360]	@ (800296c <HAL_DMA_Start_IT+0x218>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01d      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a59      	ldr	r2, [pc, #356]	@ (8002970 <HAL_DMA_Start_IT+0x21c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d018      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a57      	ldr	r2, [pc, #348]	@ (8002974 <HAL_DMA_Start_IT+0x220>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a56      	ldr	r2, [pc, #344]	@ (8002978 <HAL_DMA_Start_IT+0x224>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00e      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a54      	ldr	r2, [pc, #336]	@ (800297c <HAL_DMA_Start_IT+0x228>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a53      	ldr	r2, [pc, #332]	@ (8002980 <HAL_DMA_Start_IT+0x22c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d004      	beq.n	8002842 <HAL_DMA_Start_IT+0xee>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a51      	ldr	r2, [pc, #324]	@ (8002984 <HAL_DMA_Start_IT+0x230>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d108      	bne.n	8002854 <HAL_DMA_Start_IT+0x100>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e007      	b.n	8002864 <HAL_DMA_Start_IT+0x110>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f001 fe76 	bl	800455c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a34      	ldr	r2, [pc, #208]	@ (8002948 <HAL_DMA_Start_IT+0x1f4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d04a      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a33      	ldr	r2, [pc, #204]	@ (800294c <HAL_DMA_Start_IT+0x1f8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d045      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a31      	ldr	r2, [pc, #196]	@ (8002950 <HAL_DMA_Start_IT+0x1fc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d040      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a30      	ldr	r2, [pc, #192]	@ (8002954 <HAL_DMA_Start_IT+0x200>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d03b      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2e      	ldr	r2, [pc, #184]	@ (8002958 <HAL_DMA_Start_IT+0x204>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d036      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2d      	ldr	r2, [pc, #180]	@ (800295c <HAL_DMA_Start_IT+0x208>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d031      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002960 <HAL_DMA_Start_IT+0x20c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d02c      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002964 <HAL_DMA_Start_IT+0x210>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d027      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a28      	ldr	r2, [pc, #160]	@ (8002968 <HAL_DMA_Start_IT+0x214>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d022      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a27      	ldr	r2, [pc, #156]	@ (800296c <HAL_DMA_Start_IT+0x218>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d01d      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a25      	ldr	r2, [pc, #148]	@ (8002970 <HAL_DMA_Start_IT+0x21c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d018      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a24      	ldr	r2, [pc, #144]	@ (8002974 <HAL_DMA_Start_IT+0x220>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d013      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a22      	ldr	r2, [pc, #136]	@ (8002978 <HAL_DMA_Start_IT+0x224>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00e      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	@ (800297c <HAL_DMA_Start_IT+0x228>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1f      	ldr	r2, [pc, #124]	@ (8002980 <HAL_DMA_Start_IT+0x22c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_DMA_Start_IT+0x1bc>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1e      	ldr	r2, [pc, #120]	@ (8002984 <HAL_DMA_Start_IT+0x230>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d101      	bne.n	8002914 <HAL_DMA_Start_IT+0x1c0>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_DMA_Start_IT+0x1c2>
 8002914:	2300      	movs	r3, #0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d036      	beq.n	8002988 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 021e 	bic.w	r2, r3, #30
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0216 	orr.w	r2, r2, #22
 800292c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d03e      	beq.n	80029b4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0208 	orr.w	r2, r2, #8
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e035      	b.n	80029b4 <HAL_DMA_Start_IT+0x260>
 8002948:	40020010 	.word	0x40020010
 800294c:	40020028 	.word	0x40020028
 8002950:	40020040 	.word	0x40020040
 8002954:	40020058 	.word	0x40020058
 8002958:	40020070 	.word	0x40020070
 800295c:	40020088 	.word	0x40020088
 8002960:	400200a0 	.word	0x400200a0
 8002964:	400200b8 	.word	0x400200b8
 8002968:	40020410 	.word	0x40020410
 800296c:	40020428 	.word	0x40020428
 8002970:	40020440 	.word	0x40020440
 8002974:	40020458 	.word	0x40020458
 8002978:	40020470 	.word	0x40020470
 800297c:	40020488 	.word	0x40020488
 8002980:	400204a0 	.word	0x400204a0
 8002984:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 020e 	bic.w	r2, r3, #14
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 020a 	orr.w	r2, r2, #10
 800299a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0204 	orr.w	r2, r2, #4
 80029b2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a83      	ldr	r2, [pc, #524]	@ (8002bc8 <HAL_DMA_Start_IT+0x474>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d072      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a82      	ldr	r2, [pc, #520]	@ (8002bcc <HAL_DMA_Start_IT+0x478>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d06d      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a80      	ldr	r2, [pc, #512]	@ (8002bd0 <HAL_DMA_Start_IT+0x47c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d068      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a7f      	ldr	r2, [pc, #508]	@ (8002bd4 <HAL_DMA_Start_IT+0x480>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d063      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a7d      	ldr	r2, [pc, #500]	@ (8002bd8 <HAL_DMA_Start_IT+0x484>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d05e      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7c      	ldr	r2, [pc, #496]	@ (8002bdc <HAL_DMA_Start_IT+0x488>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d059      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a7a      	ldr	r2, [pc, #488]	@ (8002be0 <HAL_DMA_Start_IT+0x48c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d054      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a79      	ldr	r2, [pc, #484]	@ (8002be4 <HAL_DMA_Start_IT+0x490>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d04f      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a77      	ldr	r2, [pc, #476]	@ (8002be8 <HAL_DMA_Start_IT+0x494>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d04a      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a76      	ldr	r2, [pc, #472]	@ (8002bec <HAL_DMA_Start_IT+0x498>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d045      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a74      	ldr	r2, [pc, #464]	@ (8002bf0 <HAL_DMA_Start_IT+0x49c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d040      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a73      	ldr	r2, [pc, #460]	@ (8002bf4 <HAL_DMA_Start_IT+0x4a0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d03b      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a71      	ldr	r2, [pc, #452]	@ (8002bf8 <HAL_DMA_Start_IT+0x4a4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d036      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a70      	ldr	r2, [pc, #448]	@ (8002bfc <HAL_DMA_Start_IT+0x4a8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d031      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a6e      	ldr	r2, [pc, #440]	@ (8002c00 <HAL_DMA_Start_IT+0x4ac>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d02c      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a6d      	ldr	r2, [pc, #436]	@ (8002c04 <HAL_DMA_Start_IT+0x4b0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d027      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6b      	ldr	r2, [pc, #428]	@ (8002c08 <HAL_DMA_Start_IT+0x4b4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d022      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6a      	ldr	r2, [pc, #424]	@ (8002c0c <HAL_DMA_Start_IT+0x4b8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d01d      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a68      	ldr	r2, [pc, #416]	@ (8002c10 <HAL_DMA_Start_IT+0x4bc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d018      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a67      	ldr	r2, [pc, #412]	@ (8002c14 <HAL_DMA_Start_IT+0x4c0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d013      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a65      	ldr	r2, [pc, #404]	@ (8002c18 <HAL_DMA_Start_IT+0x4c4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00e      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a64      	ldr	r2, [pc, #400]	@ (8002c1c <HAL_DMA_Start_IT+0x4c8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d009      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a62      	ldr	r2, [pc, #392]	@ (8002c20 <HAL_DMA_Start_IT+0x4cc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_DMA_Start_IT+0x350>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a61      	ldr	r2, [pc, #388]	@ (8002c24 <HAL_DMA_Start_IT+0x4d0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <HAL_DMA_Start_IT+0x354>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_DMA_Start_IT+0x356>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01a      	beq.n	8002ae4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ade:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ae2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a37      	ldr	r2, [pc, #220]	@ (8002bc8 <HAL_DMA_Start_IT+0x474>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d04a      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a36      	ldr	r2, [pc, #216]	@ (8002bcc <HAL_DMA_Start_IT+0x478>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d045      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a34      	ldr	r2, [pc, #208]	@ (8002bd0 <HAL_DMA_Start_IT+0x47c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d040      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a33      	ldr	r2, [pc, #204]	@ (8002bd4 <HAL_DMA_Start_IT+0x480>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d03b      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a31      	ldr	r2, [pc, #196]	@ (8002bd8 <HAL_DMA_Start_IT+0x484>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d036      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a30      	ldr	r2, [pc, #192]	@ (8002bdc <HAL_DMA_Start_IT+0x488>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d031      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2e      	ldr	r2, [pc, #184]	@ (8002be0 <HAL_DMA_Start_IT+0x48c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02c      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8002be4 <HAL_DMA_Start_IT+0x490>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d027      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2b      	ldr	r2, [pc, #172]	@ (8002be8 <HAL_DMA_Start_IT+0x494>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d022      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2a      	ldr	r2, [pc, #168]	@ (8002bec <HAL_DMA_Start_IT+0x498>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d01d      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a28      	ldr	r2, [pc, #160]	@ (8002bf0 <HAL_DMA_Start_IT+0x49c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d018      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a27      	ldr	r2, [pc, #156]	@ (8002bf4 <HAL_DMA_Start_IT+0x4a0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a25      	ldr	r2, [pc, #148]	@ (8002bf8 <HAL_DMA_Start_IT+0x4a4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00e      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a24      	ldr	r2, [pc, #144]	@ (8002bfc <HAL_DMA_Start_IT+0x4a8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d009      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a22      	ldr	r2, [pc, #136]	@ (8002c00 <HAL_DMA_Start_IT+0x4ac>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_DMA_Start_IT+0x430>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a21      	ldr	r2, [pc, #132]	@ (8002c04 <HAL_DMA_Start_IT+0x4b0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <HAL_DMA_Start_IT+0x442>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e012      	b.n	8002bbc <HAL_DMA_Start_IT+0x468>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e009      	b.n	8002bbc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40020010 	.word	0x40020010
 8002bcc:	40020028 	.word	0x40020028
 8002bd0:	40020040 	.word	0x40020040
 8002bd4:	40020058 	.word	0x40020058
 8002bd8:	40020070 	.word	0x40020070
 8002bdc:	40020088 	.word	0x40020088
 8002be0:	400200a0 	.word	0x400200a0
 8002be4:	400200b8 	.word	0x400200b8
 8002be8:	40020410 	.word	0x40020410
 8002bec:	40020428 	.word	0x40020428
 8002bf0:	40020440 	.word	0x40020440
 8002bf4:	40020458 	.word	0x40020458
 8002bf8:	40020470 	.word	0x40020470
 8002bfc:	40020488 	.word	0x40020488
 8002c00:	400204a0 	.word	0x400204a0
 8002c04:	400204b8 	.word	0x400204b8
 8002c08:	58025408 	.word	0x58025408
 8002c0c:	5802541c 	.word	0x5802541c
 8002c10:	58025430 	.word	0x58025430
 8002c14:	58025444 	.word	0x58025444
 8002c18:	58025458 	.word	0x58025458
 8002c1c:	5802546c 	.word	0x5802546c
 8002c20:	58025480 	.word	0x58025480
 8002c24:	58025494 	.word	0x58025494

08002c28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff f8e8 	bl	8001e04 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e2dc      	b.n	80031fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d008      	beq.n	8002c5e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2280      	movs	r2, #128	@ 0x80
 8002c50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e2cd      	b.n	80031fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a76      	ldr	r2, [pc, #472]	@ (8002e3c <HAL_DMA_Abort+0x214>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d04a      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a74      	ldr	r2, [pc, #464]	@ (8002e40 <HAL_DMA_Abort+0x218>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d045      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a73      	ldr	r2, [pc, #460]	@ (8002e44 <HAL_DMA_Abort+0x21c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d040      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a71      	ldr	r2, [pc, #452]	@ (8002e48 <HAL_DMA_Abort+0x220>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d03b      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a70      	ldr	r2, [pc, #448]	@ (8002e4c <HAL_DMA_Abort+0x224>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d036      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6e      	ldr	r2, [pc, #440]	@ (8002e50 <HAL_DMA_Abort+0x228>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d031      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6d      	ldr	r2, [pc, #436]	@ (8002e54 <HAL_DMA_Abort+0x22c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d02c      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6b      	ldr	r2, [pc, #428]	@ (8002e58 <HAL_DMA_Abort+0x230>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d027      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6a      	ldr	r2, [pc, #424]	@ (8002e5c <HAL_DMA_Abort+0x234>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d022      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a68      	ldr	r2, [pc, #416]	@ (8002e60 <HAL_DMA_Abort+0x238>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01d      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a67      	ldr	r2, [pc, #412]	@ (8002e64 <HAL_DMA_Abort+0x23c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d018      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a65      	ldr	r2, [pc, #404]	@ (8002e68 <HAL_DMA_Abort+0x240>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a64      	ldr	r2, [pc, #400]	@ (8002e6c <HAL_DMA_Abort+0x244>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00e      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a62      	ldr	r2, [pc, #392]	@ (8002e70 <HAL_DMA_Abort+0x248>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d009      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a61      	ldr	r2, [pc, #388]	@ (8002e74 <HAL_DMA_Abort+0x24c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d004      	beq.n	8002cfe <HAL_DMA_Abort+0xd6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e78 <HAL_DMA_Abort+0x250>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <HAL_DMA_Abort+0xda>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_DMA_Abort+0xdc>
 8002d02:	2300      	movs	r3, #0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 021e 	bic.w	r2, r2, #30
 8002d16:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d26:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e00a      	b.n	8002d46 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 020e 	bic.w	r2, r2, #14
 8002d3e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e3c <HAL_DMA_Abort+0x214>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d072      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a3a      	ldr	r2, [pc, #232]	@ (8002e40 <HAL_DMA_Abort+0x218>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d06d      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a39      	ldr	r2, [pc, #228]	@ (8002e44 <HAL_DMA_Abort+0x21c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d068      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a37      	ldr	r2, [pc, #220]	@ (8002e48 <HAL_DMA_Abort+0x220>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d063      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a36      	ldr	r2, [pc, #216]	@ (8002e4c <HAL_DMA_Abort+0x224>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d05e      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a34      	ldr	r2, [pc, #208]	@ (8002e50 <HAL_DMA_Abort+0x228>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d059      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a33      	ldr	r2, [pc, #204]	@ (8002e54 <HAL_DMA_Abort+0x22c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d054      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a31      	ldr	r2, [pc, #196]	@ (8002e58 <HAL_DMA_Abort+0x230>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d04f      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a30      	ldr	r2, [pc, #192]	@ (8002e5c <HAL_DMA_Abort+0x234>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d04a      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2e      	ldr	r2, [pc, #184]	@ (8002e60 <HAL_DMA_Abort+0x238>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d045      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a2d      	ldr	r2, [pc, #180]	@ (8002e64 <HAL_DMA_Abort+0x23c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d040      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2b      	ldr	r2, [pc, #172]	@ (8002e68 <HAL_DMA_Abort+0x240>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d03b      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8002e6c <HAL_DMA_Abort+0x244>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d036      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a28      	ldr	r2, [pc, #160]	@ (8002e70 <HAL_DMA_Abort+0x248>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d031      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a27      	ldr	r2, [pc, #156]	@ (8002e74 <HAL_DMA_Abort+0x24c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d02c      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a25      	ldr	r2, [pc, #148]	@ (8002e78 <HAL_DMA_Abort+0x250>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d027      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a24      	ldr	r2, [pc, #144]	@ (8002e7c <HAL_DMA_Abort+0x254>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d022      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a22      	ldr	r2, [pc, #136]	@ (8002e80 <HAL_DMA_Abort+0x258>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01d      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a21      	ldr	r2, [pc, #132]	@ (8002e84 <HAL_DMA_Abort+0x25c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d018      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1f      	ldr	r2, [pc, #124]	@ (8002e88 <HAL_DMA_Abort+0x260>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1e      	ldr	r2, [pc, #120]	@ (8002e8c <HAL_DMA_Abort+0x264>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00e      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002e90 <HAL_DMA_Abort+0x268>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1b      	ldr	r2, [pc, #108]	@ (8002e94 <HAL_DMA_Abort+0x26c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_DMA_Abort+0x20e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a19      	ldr	r2, [pc, #100]	@ (8002e98 <HAL_DMA_Abort+0x270>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d132      	bne.n	8002e9c <HAL_DMA_Abort+0x274>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e031      	b.n	8002e9e <HAL_DMA_Abort+0x276>
 8002e3a:	bf00      	nop
 8002e3c:	40020010 	.word	0x40020010
 8002e40:	40020028 	.word	0x40020028
 8002e44:	40020040 	.word	0x40020040
 8002e48:	40020058 	.word	0x40020058
 8002e4c:	40020070 	.word	0x40020070
 8002e50:	40020088 	.word	0x40020088
 8002e54:	400200a0 	.word	0x400200a0
 8002e58:	400200b8 	.word	0x400200b8
 8002e5c:	40020410 	.word	0x40020410
 8002e60:	40020428 	.word	0x40020428
 8002e64:	40020440 	.word	0x40020440
 8002e68:	40020458 	.word	0x40020458
 8002e6c:	40020470 	.word	0x40020470
 8002e70:	40020488 	.word	0x40020488
 8002e74:	400204a0 	.word	0x400204a0
 8002e78:	400204b8 	.word	0x400204b8
 8002e7c:	58025408 	.word	0x58025408
 8002e80:	5802541c 	.word	0x5802541c
 8002e84:	58025430 	.word	0x58025430
 8002e88:	58025444 	.word	0x58025444
 8002e8c:	58025458 	.word	0x58025458
 8002e90:	5802546c 	.word	0x5802546c
 8002e94:	58025480 	.word	0x58025480
 8002e98:	58025494 	.word	0x58025494
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6d      	ldr	r2, [pc, #436]	@ (800306c <HAL_DMA_Abort+0x444>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d04a      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6b      	ldr	r2, [pc, #428]	@ (8003070 <HAL_DMA_Abort+0x448>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d045      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a6a      	ldr	r2, [pc, #424]	@ (8003074 <HAL_DMA_Abort+0x44c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d040      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a68      	ldr	r2, [pc, #416]	@ (8003078 <HAL_DMA_Abort+0x450>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d03b      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a67      	ldr	r2, [pc, #412]	@ (800307c <HAL_DMA_Abort+0x454>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d036      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a65      	ldr	r2, [pc, #404]	@ (8003080 <HAL_DMA_Abort+0x458>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d031      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a64      	ldr	r2, [pc, #400]	@ (8003084 <HAL_DMA_Abort+0x45c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d02c      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a62      	ldr	r2, [pc, #392]	@ (8003088 <HAL_DMA_Abort+0x460>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d027      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a61      	ldr	r2, [pc, #388]	@ (800308c <HAL_DMA_Abort+0x464>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d022      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a5f      	ldr	r2, [pc, #380]	@ (8003090 <HAL_DMA_Abort+0x468>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01d      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a5e      	ldr	r2, [pc, #376]	@ (8003094 <HAL_DMA_Abort+0x46c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a5c      	ldr	r2, [pc, #368]	@ (8003098 <HAL_DMA_Abort+0x470>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a5b      	ldr	r2, [pc, #364]	@ (800309c <HAL_DMA_Abort+0x474>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a59      	ldr	r2, [pc, #356]	@ (80030a0 <HAL_DMA_Abort+0x478>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a58      	ldr	r2, [pc, #352]	@ (80030a4 <HAL_DMA_Abort+0x47c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_DMA_Abort+0x32a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a56      	ldr	r2, [pc, #344]	@ (80030a8 <HAL_DMA_Abort+0x480>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d108      	bne.n	8002f64 <HAL_DMA_Abort+0x33c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e007      	b.n	8002f74 <HAL_DMA_Abort+0x34c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f74:	e013      	b.n	8002f9e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f76:	f7fe ff45 	bl	8001e04 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d90c      	bls.n	8002f9e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e12d      	b.n	80031fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e5      	bne.n	8002f76 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2f      	ldr	r2, [pc, #188]	@ (800306c <HAL_DMA_Abort+0x444>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04a      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003070 <HAL_DMA_Abort+0x448>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d045      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8003074 <HAL_DMA_Abort+0x44c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d040      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8003078 <HAL_DMA_Abort+0x450>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d03b      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a29      	ldr	r2, [pc, #164]	@ (800307c <HAL_DMA_Abort+0x454>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d036      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a27      	ldr	r2, [pc, #156]	@ (8003080 <HAL_DMA_Abort+0x458>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d031      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a26      	ldr	r2, [pc, #152]	@ (8003084 <HAL_DMA_Abort+0x45c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d02c      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a24      	ldr	r2, [pc, #144]	@ (8003088 <HAL_DMA_Abort+0x460>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d027      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a23      	ldr	r2, [pc, #140]	@ (800308c <HAL_DMA_Abort+0x464>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a21      	ldr	r2, [pc, #132]	@ (8003090 <HAL_DMA_Abort+0x468>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_DMA_Abort+0x422>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a20      	ldr	r2, [pc, #128]	@ (8003094 <HAL_DMA_Abort+0x46c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1e      	ldr	r2, [pc, #120]	@ (8003098 <HAL_DMA_Abort+0x470>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1d      	ldr	r2, [pc, #116]	@ (800309c <HAL_DMA_Abort+0x474>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_DMA_Abort+0x422>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1b      	ldr	r2, [pc, #108]	@ (80030a0 <HAL_DMA_Abort+0x478>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1a      	ldr	r2, [pc, #104]	@ (80030a4 <HAL_DMA_Abort+0x47c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_DMA_Abort+0x422>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a18      	ldr	r2, [pc, #96]	@ (80030a8 <HAL_DMA_Abort+0x480>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d101      	bne.n	800304e <HAL_DMA_Abort+0x426>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_DMA_Abort+0x428>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d02b      	beq.n	80030ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003058:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	223f      	movs	r2, #63	@ 0x3f
 8003064:	409a      	lsls	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	e02a      	b.n	80030c2 <HAL_DMA_Abort+0x49a>
 800306c:	40020010 	.word	0x40020010
 8003070:	40020028 	.word	0x40020028
 8003074:	40020040 	.word	0x40020040
 8003078:	40020058 	.word	0x40020058
 800307c:	40020070 	.word	0x40020070
 8003080:	40020088 	.word	0x40020088
 8003084:	400200a0 	.word	0x400200a0
 8003088:	400200b8 	.word	0x400200b8
 800308c:	40020410 	.word	0x40020410
 8003090:	40020428 	.word	0x40020428
 8003094:	40020440 	.word	0x40020440
 8003098:	40020458 	.word	0x40020458
 800309c:	40020470 	.word	0x40020470
 80030a0:	40020488 	.word	0x40020488
 80030a4:	400204a0 	.word	0x400204a0
 80030a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	2201      	movs	r2, #1
 80030bc:	409a      	lsls	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003204 <HAL_DMA_Abort+0x5dc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d072      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003208 <HAL_DMA_Abort+0x5e0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d06d      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a4c      	ldr	r2, [pc, #304]	@ (800320c <HAL_DMA_Abort+0x5e4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d068      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003210 <HAL_DMA_Abort+0x5e8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d063      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a49      	ldr	r2, [pc, #292]	@ (8003214 <HAL_DMA_Abort+0x5ec>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d05e      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a47      	ldr	r2, [pc, #284]	@ (8003218 <HAL_DMA_Abort+0x5f0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d059      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a46      	ldr	r2, [pc, #280]	@ (800321c <HAL_DMA_Abort+0x5f4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d054      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a44      	ldr	r2, [pc, #272]	@ (8003220 <HAL_DMA_Abort+0x5f8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d04f      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a43      	ldr	r2, [pc, #268]	@ (8003224 <HAL_DMA_Abort+0x5fc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a41      	ldr	r2, [pc, #260]	@ (8003228 <HAL_DMA_Abort+0x600>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a40      	ldr	r2, [pc, #256]	@ (800322c <HAL_DMA_Abort+0x604>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a3e      	ldr	r2, [pc, #248]	@ (8003230 <HAL_DMA_Abort+0x608>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a3d      	ldr	r2, [pc, #244]	@ (8003234 <HAL_DMA_Abort+0x60c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a3b      	ldr	r2, [pc, #236]	@ (8003238 <HAL_DMA_Abort+0x610>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3a      	ldr	r2, [pc, #232]	@ (800323c <HAL_DMA_Abort+0x614>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a38      	ldr	r2, [pc, #224]	@ (8003240 <HAL_DMA_Abort+0x618>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a37      	ldr	r2, [pc, #220]	@ (8003244 <HAL_DMA_Abort+0x61c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a35      	ldr	r2, [pc, #212]	@ (8003248 <HAL_DMA_Abort+0x620>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a34      	ldr	r2, [pc, #208]	@ (800324c <HAL_DMA_Abort+0x624>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a32      	ldr	r2, [pc, #200]	@ (8003250 <HAL_DMA_Abort+0x628>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a31      	ldr	r2, [pc, #196]	@ (8003254 <HAL_DMA_Abort+0x62c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2f      	ldr	r2, [pc, #188]	@ (8003258 <HAL_DMA_Abort+0x630>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2e      	ldr	r2, [pc, #184]	@ (800325c <HAL_DMA_Abort+0x634>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_Abort+0x58a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003260 <HAL_DMA_Abort+0x638>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_DMA_Abort+0x58e>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_DMA_Abort+0x590>
 80031b6:	2300      	movs	r3, #0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d015      	beq.n	80031e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00c      	beq.n	80031e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40020010 	.word	0x40020010
 8003208:	40020028 	.word	0x40020028
 800320c:	40020040 	.word	0x40020040
 8003210:	40020058 	.word	0x40020058
 8003214:	40020070 	.word	0x40020070
 8003218:	40020088 	.word	0x40020088
 800321c:	400200a0 	.word	0x400200a0
 8003220:	400200b8 	.word	0x400200b8
 8003224:	40020410 	.word	0x40020410
 8003228:	40020428 	.word	0x40020428
 800322c:	40020440 	.word	0x40020440
 8003230:	40020458 	.word	0x40020458
 8003234:	40020470 	.word	0x40020470
 8003238:	40020488 	.word	0x40020488
 800323c:	400204a0 	.word	0x400204a0
 8003240:	400204b8 	.word	0x400204b8
 8003244:	58025408 	.word	0x58025408
 8003248:	5802541c 	.word	0x5802541c
 800324c:	58025430 	.word	0x58025430
 8003250:	58025444 	.word	0x58025444
 8003254:	58025458 	.word	0x58025458
 8003258:	5802546c 	.word	0x5802546c
 800325c:	58025480 	.word	0x58025480
 8003260:	58025494 	.word	0x58025494

08003264 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e237      	b.n	80036e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d004      	beq.n	800328c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2280      	movs	r2, #128	@ 0x80
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e22c      	b.n	80036e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a5c      	ldr	r2, [pc, #368]	@ (8003404 <HAL_DMA_Abort_IT+0x1a0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d04a      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a5b      	ldr	r2, [pc, #364]	@ (8003408 <HAL_DMA_Abort_IT+0x1a4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d045      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a59      	ldr	r2, [pc, #356]	@ (800340c <HAL_DMA_Abort_IT+0x1a8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d040      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a58      	ldr	r2, [pc, #352]	@ (8003410 <HAL_DMA_Abort_IT+0x1ac>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d03b      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a56      	ldr	r2, [pc, #344]	@ (8003414 <HAL_DMA_Abort_IT+0x1b0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d036      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a55      	ldr	r2, [pc, #340]	@ (8003418 <HAL_DMA_Abort_IT+0x1b4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d031      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a53      	ldr	r2, [pc, #332]	@ (800341c <HAL_DMA_Abort_IT+0x1b8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02c      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a52      	ldr	r2, [pc, #328]	@ (8003420 <HAL_DMA_Abort_IT+0x1bc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d027      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a50      	ldr	r2, [pc, #320]	@ (8003424 <HAL_DMA_Abort_IT+0x1c0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d022      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a4f      	ldr	r2, [pc, #316]	@ (8003428 <HAL_DMA_Abort_IT+0x1c4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d01d      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a4d      	ldr	r2, [pc, #308]	@ (800342c <HAL_DMA_Abort_IT+0x1c8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003430 <HAL_DMA_Abort_IT+0x1cc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a4a      	ldr	r2, [pc, #296]	@ (8003434 <HAL_DMA_Abort_IT+0x1d0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a49      	ldr	r2, [pc, #292]	@ (8003438 <HAL_DMA_Abort_IT+0x1d4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a47      	ldr	r2, [pc, #284]	@ (800343c <HAL_DMA_Abort_IT+0x1d8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_DMA_Abort_IT+0xc8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a46      	ldr	r2, [pc, #280]	@ (8003440 <HAL_DMA_Abort_IT+0x1dc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <HAL_DMA_Abort_IT+0xcc>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <HAL_DMA_Abort_IT+0xce>
 8003330:	2300      	movs	r3, #0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8086 	beq.w	8003444 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2204      	movs	r2, #4
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2f      	ldr	r2, [pc, #188]	@ (8003404 <HAL_DMA_Abort_IT+0x1a0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d04a      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2e      	ldr	r2, [pc, #184]	@ (8003408 <HAL_DMA_Abort_IT+0x1a4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d045      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2c      	ldr	r2, [pc, #176]	@ (800340c <HAL_DMA_Abort_IT+0x1a8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d040      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2b      	ldr	r2, [pc, #172]	@ (8003410 <HAL_DMA_Abort_IT+0x1ac>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d03b      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a29      	ldr	r2, [pc, #164]	@ (8003414 <HAL_DMA_Abort_IT+0x1b0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d036      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a28      	ldr	r2, [pc, #160]	@ (8003418 <HAL_DMA_Abort_IT+0x1b4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d031      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a26      	ldr	r2, [pc, #152]	@ (800341c <HAL_DMA_Abort_IT+0x1b8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d02c      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a25      	ldr	r2, [pc, #148]	@ (8003420 <HAL_DMA_Abort_IT+0x1bc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d027      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a23      	ldr	r2, [pc, #140]	@ (8003424 <HAL_DMA_Abort_IT+0x1c0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d022      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a22      	ldr	r2, [pc, #136]	@ (8003428 <HAL_DMA_Abort_IT+0x1c4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d01d      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a20      	ldr	r2, [pc, #128]	@ (800342c <HAL_DMA_Abort_IT+0x1c8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d018      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003430 <HAL_DMA_Abort_IT+0x1cc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003434 <HAL_DMA_Abort_IT+0x1d0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00e      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003438 <HAL_DMA_Abort_IT+0x1d4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1a      	ldr	r2, [pc, #104]	@ (800343c <HAL_DMA_Abort_IT+0x1d8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x17c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a19      	ldr	r2, [pc, #100]	@ (8003440 <HAL_DMA_Abort_IT+0x1dc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d108      	bne.n	80033f2 <HAL_DMA_Abort_IT+0x18e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e178      	b.n	80036e4 <HAL_DMA_Abort_IT+0x480>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e16f      	b.n	80036e4 <HAL_DMA_Abort_IT+0x480>
 8003404:	40020010 	.word	0x40020010
 8003408:	40020028 	.word	0x40020028
 800340c:	40020040 	.word	0x40020040
 8003410:	40020058 	.word	0x40020058
 8003414:	40020070 	.word	0x40020070
 8003418:	40020088 	.word	0x40020088
 800341c:	400200a0 	.word	0x400200a0
 8003420:	400200b8 	.word	0x400200b8
 8003424:	40020410 	.word	0x40020410
 8003428:	40020428 	.word	0x40020428
 800342c:	40020440 	.word	0x40020440
 8003430:	40020458 	.word	0x40020458
 8003434:	40020470 	.word	0x40020470
 8003438:	40020488 	.word	0x40020488
 800343c:	400204a0 	.word	0x400204a0
 8003440:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 020e 	bic.w	r2, r2, #14
 8003452:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a6c      	ldr	r2, [pc, #432]	@ (800360c <HAL_DMA_Abort_IT+0x3a8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d04a      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6b      	ldr	r2, [pc, #428]	@ (8003610 <HAL_DMA_Abort_IT+0x3ac>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d045      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a69      	ldr	r2, [pc, #420]	@ (8003614 <HAL_DMA_Abort_IT+0x3b0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d040      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a68      	ldr	r2, [pc, #416]	@ (8003618 <HAL_DMA_Abort_IT+0x3b4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d03b      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a66      	ldr	r2, [pc, #408]	@ (800361c <HAL_DMA_Abort_IT+0x3b8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d036      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a65      	ldr	r2, [pc, #404]	@ (8003620 <HAL_DMA_Abort_IT+0x3bc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d031      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a63      	ldr	r2, [pc, #396]	@ (8003624 <HAL_DMA_Abort_IT+0x3c0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02c      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a62      	ldr	r2, [pc, #392]	@ (8003628 <HAL_DMA_Abort_IT+0x3c4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d027      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a60      	ldr	r2, [pc, #384]	@ (800362c <HAL_DMA_Abort_IT+0x3c8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d022      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003630 <HAL_DMA_Abort_IT+0x3cc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d01d      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003634 <HAL_DMA_Abort_IT+0x3d0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d018      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003638 <HAL_DMA_Abort_IT+0x3d4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5a      	ldr	r2, [pc, #360]	@ (800363c <HAL_DMA_Abort_IT+0x3d8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a59      	ldr	r2, [pc, #356]	@ (8003640 <HAL_DMA_Abort_IT+0x3dc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a57      	ldr	r2, [pc, #348]	@ (8003644 <HAL_DMA_Abort_IT+0x3e0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_DMA_Abort_IT+0x290>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a56      	ldr	r2, [pc, #344]	@ (8003648 <HAL_DMA_Abort_IT+0x3e4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d108      	bne.n	8003506 <HAL_DMA_Abort_IT+0x2a2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e007      	b.n	8003516 <HAL_DMA_Abort_IT+0x2b2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a3c      	ldr	r2, [pc, #240]	@ (800360c <HAL_DMA_Abort_IT+0x3a8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d072      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a3a      	ldr	r2, [pc, #232]	@ (8003610 <HAL_DMA_Abort_IT+0x3ac>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d06d      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a39      	ldr	r2, [pc, #228]	@ (8003614 <HAL_DMA_Abort_IT+0x3b0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d068      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a37      	ldr	r2, [pc, #220]	@ (8003618 <HAL_DMA_Abort_IT+0x3b4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d063      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a36      	ldr	r2, [pc, #216]	@ (800361c <HAL_DMA_Abort_IT+0x3b8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d05e      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a34      	ldr	r2, [pc, #208]	@ (8003620 <HAL_DMA_Abort_IT+0x3bc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d059      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a33      	ldr	r2, [pc, #204]	@ (8003624 <HAL_DMA_Abort_IT+0x3c0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d054      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a31      	ldr	r2, [pc, #196]	@ (8003628 <HAL_DMA_Abort_IT+0x3c4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d04f      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a30      	ldr	r2, [pc, #192]	@ (800362c <HAL_DMA_Abort_IT+0x3c8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d04a      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2e      	ldr	r2, [pc, #184]	@ (8003630 <HAL_DMA_Abort_IT+0x3cc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d045      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2d      	ldr	r2, [pc, #180]	@ (8003634 <HAL_DMA_Abort_IT+0x3d0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d040      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2b      	ldr	r2, [pc, #172]	@ (8003638 <HAL_DMA_Abort_IT+0x3d4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d03b      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2a      	ldr	r2, [pc, #168]	@ (800363c <HAL_DMA_Abort_IT+0x3d8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d036      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a28      	ldr	r2, [pc, #160]	@ (8003640 <HAL_DMA_Abort_IT+0x3dc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d031      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a27      	ldr	r2, [pc, #156]	@ (8003644 <HAL_DMA_Abort_IT+0x3e0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d02c      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a25      	ldr	r2, [pc, #148]	@ (8003648 <HAL_DMA_Abort_IT+0x3e4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d027      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a24      	ldr	r2, [pc, #144]	@ (800364c <HAL_DMA_Abort_IT+0x3e8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d022      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a22      	ldr	r2, [pc, #136]	@ (8003650 <HAL_DMA_Abort_IT+0x3ec>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01d      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a21      	ldr	r2, [pc, #132]	@ (8003654 <HAL_DMA_Abort_IT+0x3f0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d018      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003658 <HAL_DMA_Abort_IT+0x3f4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d013      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1e      	ldr	r2, [pc, #120]	@ (800365c <HAL_DMA_Abort_IT+0x3f8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00e      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003660 <HAL_DMA_Abort_IT+0x3fc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d009      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003664 <HAL_DMA_Abort_IT+0x400>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d004      	beq.n	8003606 <HAL_DMA_Abort_IT+0x3a2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a19      	ldr	r2, [pc, #100]	@ (8003668 <HAL_DMA_Abort_IT+0x404>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d132      	bne.n	800366c <HAL_DMA_Abort_IT+0x408>
 8003606:	2301      	movs	r3, #1
 8003608:	e031      	b.n	800366e <HAL_DMA_Abort_IT+0x40a>
 800360a:	bf00      	nop
 800360c:	40020010 	.word	0x40020010
 8003610:	40020028 	.word	0x40020028
 8003614:	40020040 	.word	0x40020040
 8003618:	40020058 	.word	0x40020058
 800361c:	40020070 	.word	0x40020070
 8003620:	40020088 	.word	0x40020088
 8003624:	400200a0 	.word	0x400200a0
 8003628:	400200b8 	.word	0x400200b8
 800362c:	40020410 	.word	0x40020410
 8003630:	40020428 	.word	0x40020428
 8003634:	40020440 	.word	0x40020440
 8003638:	40020458 	.word	0x40020458
 800363c:	40020470 	.word	0x40020470
 8003640:	40020488 	.word	0x40020488
 8003644:	400204a0 	.word	0x400204a0
 8003648:	400204b8 	.word	0x400204b8
 800364c:	58025408 	.word	0x58025408
 8003650:	5802541c 	.word	0x5802541c
 8003654:	58025430 	.word	0x58025430
 8003658:	58025444 	.word	0x58025444
 800365c:	58025458 	.word	0x58025458
 8003660:	5802546c 	.word	0x5802546c
 8003664:	58025480 	.word	0x58025480
 8003668:	58025494 	.word	0x58025494
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d028      	beq.n	80036c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003680:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003686:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	2201      	movs	r2, #1
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80036a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop

080036f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	@ 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036fc:	4b67      	ldr	r3, [pc, #412]	@ (800389c <HAL_DMA_IRQHandler+0x1ac>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a67      	ldr	r2, [pc, #412]	@ (80038a0 <HAL_DMA_IRQHandler+0x1b0>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0a9b      	lsrs	r3, r3, #10
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003714:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5f      	ldr	r2, [pc, #380]	@ (80038a4 <HAL_DMA_IRQHandler+0x1b4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d04a      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a5d      	ldr	r2, [pc, #372]	@ (80038a8 <HAL_DMA_IRQHandler+0x1b8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d045      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5c      	ldr	r2, [pc, #368]	@ (80038ac <HAL_DMA_IRQHandler+0x1bc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d040      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a5a      	ldr	r2, [pc, #360]	@ (80038b0 <HAL_DMA_IRQHandler+0x1c0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d03b      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a59      	ldr	r2, [pc, #356]	@ (80038b4 <HAL_DMA_IRQHandler+0x1c4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d036      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a57      	ldr	r2, [pc, #348]	@ (80038b8 <HAL_DMA_IRQHandler+0x1c8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d031      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a56      	ldr	r2, [pc, #344]	@ (80038bc <HAL_DMA_IRQHandler+0x1cc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d02c      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a54      	ldr	r2, [pc, #336]	@ (80038c0 <HAL_DMA_IRQHandler+0x1d0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d027      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a53      	ldr	r2, [pc, #332]	@ (80038c4 <HAL_DMA_IRQHandler+0x1d4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d022      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a51      	ldr	r2, [pc, #324]	@ (80038c8 <HAL_DMA_IRQHandler+0x1d8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01d      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a50      	ldr	r2, [pc, #320]	@ (80038cc <HAL_DMA_IRQHandler+0x1dc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d018      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a4e      	ldr	r2, [pc, #312]	@ (80038d0 <HAL_DMA_IRQHandler+0x1e0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a4d      	ldr	r2, [pc, #308]	@ (80038d4 <HAL_DMA_IRQHandler+0x1e4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	@ (80038d8 <HAL_DMA_IRQHandler+0x1e8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a4a      	ldr	r2, [pc, #296]	@ (80038dc <HAL_DMA_IRQHandler+0x1ec>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a48      	ldr	r2, [pc, #288]	@ (80038e0 <HAL_DMA_IRQHandler+0x1f0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_DMA_IRQHandler+0xd6>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_DMA_IRQHandler+0xd8>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 842b 	beq.w	8004024 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	2208      	movs	r2, #8
 80037d8:	409a      	lsls	r2, r3
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80a2 	beq.w	8003928 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2e      	ldr	r2, [pc, #184]	@ (80038a4 <HAL_DMA_IRQHandler+0x1b4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d04a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2d      	ldr	r2, [pc, #180]	@ (80038a8 <HAL_DMA_IRQHandler+0x1b8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d045      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2b      	ldr	r2, [pc, #172]	@ (80038ac <HAL_DMA_IRQHandler+0x1bc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2a      	ldr	r2, [pc, #168]	@ (80038b0 <HAL_DMA_IRQHandler+0x1c0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03b      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a28      	ldr	r2, [pc, #160]	@ (80038b4 <HAL_DMA_IRQHandler+0x1c4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d036      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a27      	ldr	r2, [pc, #156]	@ (80038b8 <HAL_DMA_IRQHandler+0x1c8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d031      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a25      	ldr	r2, [pc, #148]	@ (80038bc <HAL_DMA_IRQHandler+0x1cc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02c      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a24      	ldr	r2, [pc, #144]	@ (80038c0 <HAL_DMA_IRQHandler+0x1d0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d027      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a22      	ldr	r2, [pc, #136]	@ (80038c4 <HAL_DMA_IRQHandler+0x1d4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a21      	ldr	r2, [pc, #132]	@ (80038c8 <HAL_DMA_IRQHandler+0x1d8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1f      	ldr	r2, [pc, #124]	@ (80038cc <HAL_DMA_IRQHandler+0x1dc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1e      	ldr	r2, [pc, #120]	@ (80038d0 <HAL_DMA_IRQHandler+0x1e0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1c      	ldr	r2, [pc, #112]	@ (80038d4 <HAL_DMA_IRQHandler+0x1e4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1b      	ldr	r2, [pc, #108]	@ (80038d8 <HAL_DMA_IRQHandler+0x1e8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a19      	ldr	r2, [pc, #100]	@ (80038dc <HAL_DMA_IRQHandler+0x1ec>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a18      	ldr	r2, [pc, #96]	@ (80038e0 <HAL_DMA_IRQHandler+0x1f0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d12f      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x1f4>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2301      	movne	r3, #1
 8003894:	2300      	moveq	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	e02e      	b.n	80038f8 <HAL_DMA_IRQHandler+0x208>
 800389a:	bf00      	nop
 800389c:	24000000 	.word	0x24000000
 80038a0:	1b4e81b5 	.word	0x1b4e81b5
 80038a4:	40020010 	.word	0x40020010
 80038a8:	40020028 	.word	0x40020028
 80038ac:	40020040 	.word	0x40020040
 80038b0:	40020058 	.word	0x40020058
 80038b4:	40020070 	.word	0x40020070
 80038b8:	40020088 	.word	0x40020088
 80038bc:	400200a0 	.word	0x400200a0
 80038c0:	400200b8 	.word	0x400200b8
 80038c4:	40020410 	.word	0x40020410
 80038c8:	40020428 	.word	0x40020428
 80038cc:	40020440 	.word	0x40020440
 80038d0:	40020458 	.word	0x40020458
 80038d4:	40020470 	.word	0x40020470
 80038d8:	40020488 	.word	0x40020488
 80038dc:	400204a0 	.word	0x400204a0
 80038e0:	400204b8 	.word	0x400204b8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf14      	ite	ne
 80038f2:	2301      	movne	r3, #1
 80038f4:	2300      	moveq	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0204 	bic.w	r2, r2, #4
 800390a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2208      	movs	r2, #8
 8003916:	409a      	lsls	r2, r3
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d06e      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a69      	ldr	r2, [pc, #420]	@ (8003ae8 <HAL_DMA_IRQHandler+0x3f8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d04a      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a67      	ldr	r2, [pc, #412]	@ (8003aec <HAL_DMA_IRQHandler+0x3fc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d045      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a66      	ldr	r2, [pc, #408]	@ (8003af0 <HAL_DMA_IRQHandler+0x400>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d040      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a64      	ldr	r2, [pc, #400]	@ (8003af4 <HAL_DMA_IRQHandler+0x404>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d03b      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a63      	ldr	r2, [pc, #396]	@ (8003af8 <HAL_DMA_IRQHandler+0x408>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d036      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a61      	ldr	r2, [pc, #388]	@ (8003afc <HAL_DMA_IRQHandler+0x40c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d031      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a60      	ldr	r2, [pc, #384]	@ (8003b00 <HAL_DMA_IRQHandler+0x410>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d02c      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a5e      	ldr	r2, [pc, #376]	@ (8003b04 <HAL_DMA_IRQHandler+0x414>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d027      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5d      	ldr	r2, [pc, #372]	@ (8003b08 <HAL_DMA_IRQHandler+0x418>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5b      	ldr	r2, [pc, #364]	@ (8003b0c <HAL_DMA_IRQHandler+0x41c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01d      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003b10 <HAL_DMA_IRQHandler+0x420>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a58      	ldr	r2, [pc, #352]	@ (8003b14 <HAL_DMA_IRQHandler+0x424>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a57      	ldr	r2, [pc, #348]	@ (8003b18 <HAL_DMA_IRQHandler+0x428>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a55      	ldr	r2, [pc, #340]	@ (8003b1c <HAL_DMA_IRQHandler+0x42c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a54      	ldr	r2, [pc, #336]	@ (8003b20 <HAL_DMA_IRQHandler+0x430>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a52      	ldr	r2, [pc, #328]	@ (8003b24 <HAL_DMA_IRQHandler+0x434>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10a      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x304>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e003      	b.n	80039fc <HAL_DMA_IRQHandler+0x30c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	2201      	movs	r2, #1
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a14:	f043 0202 	orr.w	r2, r3, #2
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2204      	movs	r2, #4
 8003a26:	409a      	lsls	r2, r3
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 808f 	beq.w	8003b50 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae8 <HAL_DMA_IRQHandler+0x3f8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d04a      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2a      	ldr	r2, [pc, #168]	@ (8003aec <HAL_DMA_IRQHandler+0x3fc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d045      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a29      	ldr	r2, [pc, #164]	@ (8003af0 <HAL_DMA_IRQHandler+0x400>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d040      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a27      	ldr	r2, [pc, #156]	@ (8003af4 <HAL_DMA_IRQHandler+0x404>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d03b      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a26      	ldr	r2, [pc, #152]	@ (8003af8 <HAL_DMA_IRQHandler+0x408>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d036      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a24      	ldr	r2, [pc, #144]	@ (8003afc <HAL_DMA_IRQHandler+0x40c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d031      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a23      	ldr	r2, [pc, #140]	@ (8003b00 <HAL_DMA_IRQHandler+0x410>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d02c      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a21      	ldr	r2, [pc, #132]	@ (8003b04 <HAL_DMA_IRQHandler+0x414>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d027      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a20      	ldr	r2, [pc, #128]	@ (8003b08 <HAL_DMA_IRQHandler+0x418>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d022      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1e      	ldr	r2, [pc, #120]	@ (8003b0c <HAL_DMA_IRQHandler+0x41c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01d      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b10 <HAL_DMA_IRQHandler+0x420>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d018      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b14 <HAL_DMA_IRQHandler+0x424>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1a      	ldr	r2, [pc, #104]	@ (8003b18 <HAL_DMA_IRQHandler+0x428>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a18      	ldr	r2, [pc, #96]	@ (8003b1c <HAL_DMA_IRQHandler+0x42c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a17      	ldr	r2, [pc, #92]	@ (8003b20 <HAL_DMA_IRQHandler+0x430>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a15      	ldr	r2, [pc, #84]	@ (8003b24 <HAL_DMA_IRQHandler+0x434>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d12a      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x438>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e023      	b.n	8003b30 <HAL_DMA_IRQHandler+0x440>
 8003ae8:	40020010 	.word	0x40020010
 8003aec:	40020028 	.word	0x40020028
 8003af0:	40020040 	.word	0x40020040
 8003af4:	40020058 	.word	0x40020058
 8003af8:	40020070 	.word	0x40020070
 8003afc:	40020088 	.word	0x40020088
 8003b00:	400200a0 	.word	0x400200a0
 8003b04:	400200b8 	.word	0x400200b8
 8003b08:	40020410 	.word	0x40020410
 8003b0c:	40020428 	.word	0x40020428
 8003b10:	40020440 	.word	0x40020440
 8003b14:	40020458 	.word	0x40020458
 8003b18:	40020470 	.word	0x40020470
 8003b1c:	40020488 	.word	0x40020488
 8003b20:	400204a0 	.word	0x400204a0
 8003b24:	400204b8 	.word	0x400204b8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b48:	f043 0204 	orr.w	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2210      	movs	r2, #16
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a6 	beq.w	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a85      	ldr	r2, [pc, #532]	@ (8003d80 <HAL_DMA_IRQHandler+0x690>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d04a      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a83      	ldr	r2, [pc, #524]	@ (8003d84 <HAL_DMA_IRQHandler+0x694>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d045      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a82      	ldr	r2, [pc, #520]	@ (8003d88 <HAL_DMA_IRQHandler+0x698>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d040      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a80      	ldr	r2, [pc, #512]	@ (8003d8c <HAL_DMA_IRQHandler+0x69c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d03b      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a7f      	ldr	r2, [pc, #508]	@ (8003d90 <HAL_DMA_IRQHandler+0x6a0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d036      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a7d      	ldr	r2, [pc, #500]	@ (8003d94 <HAL_DMA_IRQHandler+0x6a4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d031      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a7c      	ldr	r2, [pc, #496]	@ (8003d98 <HAL_DMA_IRQHandler+0x6a8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d02c      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a7a      	ldr	r2, [pc, #488]	@ (8003d9c <HAL_DMA_IRQHandler+0x6ac>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d027      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a79      	ldr	r2, [pc, #484]	@ (8003da0 <HAL_DMA_IRQHandler+0x6b0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a77      	ldr	r2, [pc, #476]	@ (8003da4 <HAL_DMA_IRQHandler+0x6b4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01d      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a76      	ldr	r2, [pc, #472]	@ (8003da8 <HAL_DMA_IRQHandler+0x6b8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a74      	ldr	r2, [pc, #464]	@ (8003dac <HAL_DMA_IRQHandler+0x6bc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a73      	ldr	r2, [pc, #460]	@ (8003db0 <HAL_DMA_IRQHandler+0x6c0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a71      	ldr	r2, [pc, #452]	@ (8003db4 <HAL_DMA_IRQHandler+0x6c4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a70      	ldr	r2, [pc, #448]	@ (8003db8 <HAL_DMA_IRQHandler+0x6c8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a6e      	ldr	r2, [pc, #440]	@ (8003dbc <HAL_DMA_IRQHandler+0x6cc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10a      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x52c>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e009      	b.n	8003c30 <HAL_DMA_IRQHandler+0x540>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d03e      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d018      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d108      	bne.n	8003c72 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d024      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
 8003c70:	e01f      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01b      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
 8003c82:	e016      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0208 	bic.w	r2, r2, #8
 8003ca0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2220      	movs	r2, #32
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8110 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8003d80 <HAL_DMA_IRQHandler+0x690>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d04a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003d84 <HAL_DMA_IRQHandler+0x694>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d045      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a29      	ldr	r2, [pc, #164]	@ (8003d88 <HAL_DMA_IRQHandler+0x698>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d040      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a28      	ldr	r2, [pc, #160]	@ (8003d8c <HAL_DMA_IRQHandler+0x69c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d03b      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a26      	ldr	r2, [pc, #152]	@ (8003d90 <HAL_DMA_IRQHandler+0x6a0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d036      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a25      	ldr	r2, [pc, #148]	@ (8003d94 <HAL_DMA_IRQHandler+0x6a4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d031      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a23      	ldr	r2, [pc, #140]	@ (8003d98 <HAL_DMA_IRQHandler+0x6a8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02c      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a22      	ldr	r2, [pc, #136]	@ (8003d9c <HAL_DMA_IRQHandler+0x6ac>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d027      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a20      	ldr	r2, [pc, #128]	@ (8003da0 <HAL_DMA_IRQHandler+0x6b0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d022      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1f      	ldr	r2, [pc, #124]	@ (8003da4 <HAL_DMA_IRQHandler+0x6b4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d01d      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1d      	ldr	r2, [pc, #116]	@ (8003da8 <HAL_DMA_IRQHandler+0x6b8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d018      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dac <HAL_DMA_IRQHandler+0x6bc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1a      	ldr	r2, [pc, #104]	@ (8003db0 <HAL_DMA_IRQHandler+0x6c0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00e      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a19      	ldr	r2, [pc, #100]	@ (8003db4 <HAL_DMA_IRQHandler+0x6c4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a17      	ldr	r2, [pc, #92]	@ (8003db8 <HAL_DMA_IRQHandler+0x6c8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a16      	ldr	r2, [pc, #88]	@ (8003dbc <HAL_DMA_IRQHandler+0x6cc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d12b      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0x6d0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf14      	ite	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	2300      	moveq	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	e02a      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x6e4>
 8003d7e:	bf00      	nop
 8003d80:	40020010 	.word	0x40020010
 8003d84:	40020028 	.word	0x40020028
 8003d88:	40020040 	.word	0x40020040
 8003d8c:	40020058 	.word	0x40020058
 8003d90:	40020070 	.word	0x40020070
 8003d94:	40020088 	.word	0x40020088
 8003d98:	400200a0 	.word	0x400200a0
 8003d9c:	400200b8 	.word	0x400200b8
 8003da0:	40020410 	.word	0x40020410
 8003da4:	40020428 	.word	0x40020428
 8003da8:	40020440 	.word	0x40020440
 8003dac:	40020458 	.word	0x40020458
 8003db0:	40020470 	.word	0x40020470
 8003db4:	40020488 	.word	0x40020488
 8003db8:	400204a0 	.word	0x400204a0
 8003dbc:	400204b8 	.word	0x400204b8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8087 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	2220      	movs	r2, #32
 8003de4:	409a      	lsls	r2, r3
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d139      	bne.n	8003e6a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0216 	bic.w	r2, r2, #22
 8003e04:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e14:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x736>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0208 	bic.w	r2, r2, #8
 8003e34:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	223f      	movs	r2, #63	@ 0x3f
 8003e40:	409a      	lsls	r2, r3
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 834a 	beq.w	80044f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
          }
          return;
 8003e68:	e344      	b.n	80044f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d018      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02c      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
 8003e96:	e027      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d023      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
 8003ea8:	e01e      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10f      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0210 	bic.w	r2, r2, #16
 8003ec6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8306 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8088 	beq.w	8004010 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2204      	movs	r2, #4
 8003f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7a      	ldr	r2, [pc, #488]	@ (80040f8 <HAL_DMA_IRQHandler+0xa08>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d04a      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a79      	ldr	r2, [pc, #484]	@ (80040fc <HAL_DMA_IRQHandler+0xa0c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d045      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a77      	ldr	r2, [pc, #476]	@ (8004100 <HAL_DMA_IRQHandler+0xa10>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d040      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a76      	ldr	r2, [pc, #472]	@ (8004104 <HAL_DMA_IRQHandler+0xa14>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d03b      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a74      	ldr	r2, [pc, #464]	@ (8004108 <HAL_DMA_IRQHandler+0xa18>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d036      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a73      	ldr	r2, [pc, #460]	@ (800410c <HAL_DMA_IRQHandler+0xa1c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d031      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a71      	ldr	r2, [pc, #452]	@ (8004110 <HAL_DMA_IRQHandler+0xa20>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d02c      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a70      	ldr	r2, [pc, #448]	@ (8004114 <HAL_DMA_IRQHandler+0xa24>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d027      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a6e      	ldr	r2, [pc, #440]	@ (8004118 <HAL_DMA_IRQHandler+0xa28>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d022      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6d      	ldr	r2, [pc, #436]	@ (800411c <HAL_DMA_IRQHandler+0xa2c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d01d      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6b      	ldr	r2, [pc, #428]	@ (8004120 <HAL_DMA_IRQHandler+0xa30>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d018      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6a      	ldr	r2, [pc, #424]	@ (8004124 <HAL_DMA_IRQHandler+0xa34>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d013      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a68      	ldr	r2, [pc, #416]	@ (8004128 <HAL_DMA_IRQHandler+0xa38>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00e      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a67      	ldr	r2, [pc, #412]	@ (800412c <HAL_DMA_IRQHandler+0xa3c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d009      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a65      	ldr	r2, [pc, #404]	@ (8004130 <HAL_DMA_IRQHandler+0xa40>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d004      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a64      	ldr	r2, [pc, #400]	@ (8004134 <HAL_DMA_IRQHandler+0xa44>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d108      	bne.n	8003fba <HAL_DMA_IRQHandler+0x8ca>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e007      	b.n	8003fca <HAL_DMA_IRQHandler+0x8da>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d307      	bcc.n	8003fe6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f2      	bne.n	8003fca <HAL_DMA_IRQHandler+0x8da>
 8003fe4:	e000      	b.n	8003fe8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003fe6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003ffe:	e003      	b.n	8004008 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8272 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
 8004022:	e26c      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a43      	ldr	r2, [pc, #268]	@ (8004138 <HAL_DMA_IRQHandler+0xa48>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d022      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a42      	ldr	r2, [pc, #264]	@ (800413c <HAL_DMA_IRQHandler+0xa4c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d01d      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a40      	ldr	r2, [pc, #256]	@ (8004140 <HAL_DMA_IRQHandler+0xa50>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a3f      	ldr	r2, [pc, #252]	@ (8004144 <HAL_DMA_IRQHandler+0xa54>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3d      	ldr	r2, [pc, #244]	@ (8004148 <HAL_DMA_IRQHandler+0xa58>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a3c      	ldr	r2, [pc, #240]	@ (800414c <HAL_DMA_IRQHandler+0xa5c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a3a      	ldr	r2, [pc, #232]	@ (8004150 <HAL_DMA_IRQHandler+0xa60>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a39      	ldr	r2, [pc, #228]	@ (8004154 <HAL_DMA_IRQHandler+0xa64>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_DMA_IRQHandler+0x988>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_DMA_IRQHandler+0x98a>
 8004078:	2300      	movs	r3, #0
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 823f 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	2204      	movs	r2, #4
 8004092:	409a      	lsls	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80cd 	beq.w	8004238 <HAL_DMA_IRQHandler+0xb48>
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80c7 	beq.w	8004238 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2204      	movs	r2, #4
 80040b4:	409a      	lsls	r2, r3
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d049      	beq.n	8004158 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8210 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040e0:	e20a      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8206 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f4:	e200      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe08>
 80040f6:	bf00      	nop
 80040f8:	40020010 	.word	0x40020010
 80040fc:	40020028 	.word	0x40020028
 8004100:	40020040 	.word	0x40020040
 8004104:	40020058 	.word	0x40020058
 8004108:	40020070 	.word	0x40020070
 800410c:	40020088 	.word	0x40020088
 8004110:	400200a0 	.word	0x400200a0
 8004114:	400200b8 	.word	0x400200b8
 8004118:	40020410 	.word	0x40020410
 800411c:	40020428 	.word	0x40020428
 8004120:	40020440 	.word	0x40020440
 8004124:	40020458 	.word	0x40020458
 8004128:	40020470 	.word	0x40020470
 800412c:	40020488 	.word	0x40020488
 8004130:	400204a0 	.word	0x400204a0
 8004134:	400204b8 	.word	0x400204b8
 8004138:	58025408 	.word	0x58025408
 800413c:	5802541c 	.word	0x5802541c
 8004140:	58025430 	.word	0x58025430
 8004144:	58025444 	.word	0x58025444
 8004148:	58025458 	.word	0x58025458
 800414c:	5802546c 	.word	0x5802546c
 8004150:	58025480 	.word	0x58025480
 8004154:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d160      	bne.n	8004224 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a7f      	ldr	r2, [pc, #508]	@ (8004364 <HAL_DMA_IRQHandler+0xc74>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d04a      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a7d      	ldr	r2, [pc, #500]	@ (8004368 <HAL_DMA_IRQHandler+0xc78>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d045      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7c      	ldr	r2, [pc, #496]	@ (800436c <HAL_DMA_IRQHandler+0xc7c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d040      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a7a      	ldr	r2, [pc, #488]	@ (8004370 <HAL_DMA_IRQHandler+0xc80>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d03b      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a79      	ldr	r2, [pc, #484]	@ (8004374 <HAL_DMA_IRQHandler+0xc84>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d036      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a77      	ldr	r2, [pc, #476]	@ (8004378 <HAL_DMA_IRQHandler+0xc88>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d031      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a76      	ldr	r2, [pc, #472]	@ (800437c <HAL_DMA_IRQHandler+0xc8c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d02c      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a74      	ldr	r2, [pc, #464]	@ (8004380 <HAL_DMA_IRQHandler+0xc90>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d027      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a73      	ldr	r2, [pc, #460]	@ (8004384 <HAL_DMA_IRQHandler+0xc94>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d022      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a71      	ldr	r2, [pc, #452]	@ (8004388 <HAL_DMA_IRQHandler+0xc98>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01d      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a70      	ldr	r2, [pc, #448]	@ (800438c <HAL_DMA_IRQHandler+0xc9c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d018      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004390 <HAL_DMA_IRQHandler+0xca0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a6d      	ldr	r2, [pc, #436]	@ (8004394 <HAL_DMA_IRQHandler+0xca4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00e      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004398 <HAL_DMA_IRQHandler+0xca8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6a      	ldr	r2, [pc, #424]	@ (800439c <HAL_DMA_IRQHandler+0xcac>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d004      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a68      	ldr	r2, [pc, #416]	@ (80043a0 <HAL_DMA_IRQHandler+0xcb0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d108      	bne.n	8004214 <HAL_DMA_IRQHandler+0xb24>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0208 	bic.w	r2, r2, #8
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e007      	b.n	8004224 <HAL_DMA_IRQHandler+0xb34>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0204 	bic.w	r2, r2, #4
 8004222:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8165 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004236:	e15f      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2202      	movs	r2, #2
 8004242:	409a      	lsls	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80c5 	beq.w	80043d8 <HAL_DMA_IRQHandler+0xce8>
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80bf 	beq.w	80043d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	2202      	movs	r2, #2
 8004264:	409a      	lsls	r2, r3
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d018      	beq.n	80042a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 813a 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004290:	e134      	b.n	80044fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8130 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a4:	e12a      	b.n	80044fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f040 8089 	bne.w	80043c4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004364 <HAL_DMA_IRQHandler+0xc74>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d04a      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a29      	ldr	r2, [pc, #164]	@ (8004368 <HAL_DMA_IRQHandler+0xc78>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d045      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a28      	ldr	r2, [pc, #160]	@ (800436c <HAL_DMA_IRQHandler+0xc7c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d040      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a26      	ldr	r2, [pc, #152]	@ (8004370 <HAL_DMA_IRQHandler+0xc80>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d03b      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a25      	ldr	r2, [pc, #148]	@ (8004374 <HAL_DMA_IRQHandler+0xc84>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d036      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a23      	ldr	r2, [pc, #140]	@ (8004378 <HAL_DMA_IRQHandler+0xc88>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d031      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a22      	ldr	r2, [pc, #136]	@ (800437c <HAL_DMA_IRQHandler+0xc8c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d02c      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a20      	ldr	r2, [pc, #128]	@ (8004380 <HAL_DMA_IRQHandler+0xc90>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d027      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1f      	ldr	r2, [pc, #124]	@ (8004384 <HAL_DMA_IRQHandler+0xc94>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d022      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1d      	ldr	r2, [pc, #116]	@ (8004388 <HAL_DMA_IRQHandler+0xc98>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d01d      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1c      	ldr	r2, [pc, #112]	@ (800438c <HAL_DMA_IRQHandler+0xc9c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d018      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1a      	ldr	r2, [pc, #104]	@ (8004390 <HAL_DMA_IRQHandler+0xca0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a19      	ldr	r2, [pc, #100]	@ (8004394 <HAL_DMA_IRQHandler+0xca4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00e      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a17      	ldr	r2, [pc, #92]	@ (8004398 <HAL_DMA_IRQHandler+0xca8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d009      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a16      	ldr	r2, [pc, #88]	@ (800439c <HAL_DMA_IRQHandler+0xcac>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d004      	beq.n	8004352 <HAL_DMA_IRQHandler+0xc62>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a14      	ldr	r2, [pc, #80]	@ (80043a0 <HAL_DMA_IRQHandler+0xcb0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d128      	bne.n	80043a4 <HAL_DMA_IRQHandler+0xcb4>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0214 	bic.w	r2, r2, #20
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e027      	b.n	80043b4 <HAL_DMA_IRQHandler+0xcc4>
 8004364:	40020010 	.word	0x40020010
 8004368:	40020028 	.word	0x40020028
 800436c:	40020040 	.word	0x40020040
 8004370:	40020058 	.word	0x40020058
 8004374:	40020070 	.word	0x40020070
 8004378:	40020088 	.word	0x40020088
 800437c:	400200a0 	.word	0x400200a0
 8004380:	400200b8 	.word	0x400200b8
 8004384:	40020410 	.word	0x40020410
 8004388:	40020428 	.word	0x40020428
 800438c:	40020440 	.word	0x40020440
 8004390:	40020458 	.word	0x40020458
 8004394:	40020470 	.word	0x40020470
 8004398:	40020488 	.word	0x40020488
 800439c:	400204a0 	.word	0x400204a0
 80043a0:	400204b8 	.word	0x400204b8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 020a 	bic.w	r2, r2, #10
 80043b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8097 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d6:	e091      	b.n	80044fc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	2208      	movs	r2, #8
 80043e2:	409a      	lsls	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8088 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8082 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a41      	ldr	r2, [pc, #260]	@ (8004504 <HAL_DMA_IRQHandler+0xe14>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d04a      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a3f      	ldr	r2, [pc, #252]	@ (8004508 <HAL_DMA_IRQHandler+0xe18>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d045      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a3e      	ldr	r2, [pc, #248]	@ (800450c <HAL_DMA_IRQHandler+0xe1c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d040      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a3c      	ldr	r2, [pc, #240]	@ (8004510 <HAL_DMA_IRQHandler+0xe20>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d03b      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a3b      	ldr	r2, [pc, #236]	@ (8004514 <HAL_DMA_IRQHandler+0xe24>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d036      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a39      	ldr	r2, [pc, #228]	@ (8004518 <HAL_DMA_IRQHandler+0xe28>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d031      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a38      	ldr	r2, [pc, #224]	@ (800451c <HAL_DMA_IRQHandler+0xe2c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d02c      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a36      	ldr	r2, [pc, #216]	@ (8004520 <HAL_DMA_IRQHandler+0xe30>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d027      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a35      	ldr	r2, [pc, #212]	@ (8004524 <HAL_DMA_IRQHandler+0xe34>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d022      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a33      	ldr	r2, [pc, #204]	@ (8004528 <HAL_DMA_IRQHandler+0xe38>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01d      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a32      	ldr	r2, [pc, #200]	@ (800452c <HAL_DMA_IRQHandler+0xe3c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a30      	ldr	r2, [pc, #192]	@ (8004530 <HAL_DMA_IRQHandler+0xe40>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2f      	ldr	r2, [pc, #188]	@ (8004534 <HAL_DMA_IRQHandler+0xe44>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2d      	ldr	r2, [pc, #180]	@ (8004538 <HAL_DMA_IRQHandler+0xe48>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2c      	ldr	r2, [pc, #176]	@ (800453c <HAL_DMA_IRQHandler+0xe4c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a2a      	ldr	r2, [pc, #168]	@ (8004540 <HAL_DMA_IRQHandler+0xe50>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d108      	bne.n	80044ac <HAL_DMA_IRQHandler+0xdbc>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 021c 	bic.w	r2, r2, #28
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e007      	b.n	80044bc <HAL_DMA_IRQHandler+0xdcc>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 020e 	bic.w	r2, r2, #14
 80044ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2201      	movs	r2, #1
 80044c6:	409a      	lsls	r2, r3
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
 80044f2:	e004      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80044f4:	bf00      	nop
 80044f6:	e002      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80044fe:	3728      	adds	r7, #40	@ 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40020010 	.word	0x40020010
 8004508:	40020028 	.word	0x40020028
 800450c:	40020040 	.word	0x40020040
 8004510:	40020058 	.word	0x40020058
 8004514:	40020070 	.word	0x40020070
 8004518:	40020088 	.word	0x40020088
 800451c:	400200a0 	.word	0x400200a0
 8004520:	400200b8 	.word	0x400200b8
 8004524:	40020410 	.word	0x40020410
 8004528:	40020428 	.word	0x40020428
 800452c:	40020440 	.word	0x40020440
 8004530:	40020458 	.word	0x40020458
 8004534:	40020470 	.word	0x40020470
 8004538:	40020488 	.word	0x40020488
 800453c:	400204a0 	.word	0x400204a0
 8004540:	400204b8 	.word	0x400204b8

08004544 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004574:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a7f      	ldr	r2, [pc, #508]	@ (8004778 <DMA_SetConfig+0x21c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d072      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a7d      	ldr	r2, [pc, #500]	@ (800477c <DMA_SetConfig+0x220>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d06d      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a7c      	ldr	r2, [pc, #496]	@ (8004780 <DMA_SetConfig+0x224>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d068      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a7a      	ldr	r2, [pc, #488]	@ (8004784 <DMA_SetConfig+0x228>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d063      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a79      	ldr	r2, [pc, #484]	@ (8004788 <DMA_SetConfig+0x22c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d05e      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a77      	ldr	r2, [pc, #476]	@ (800478c <DMA_SetConfig+0x230>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d059      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a76      	ldr	r2, [pc, #472]	@ (8004790 <DMA_SetConfig+0x234>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d054      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a74      	ldr	r2, [pc, #464]	@ (8004794 <DMA_SetConfig+0x238>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d04f      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a73      	ldr	r2, [pc, #460]	@ (8004798 <DMA_SetConfig+0x23c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d04a      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a71      	ldr	r2, [pc, #452]	@ (800479c <DMA_SetConfig+0x240>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d045      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a70      	ldr	r2, [pc, #448]	@ (80047a0 <DMA_SetConfig+0x244>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d040      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a6e      	ldr	r2, [pc, #440]	@ (80047a4 <DMA_SetConfig+0x248>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d03b      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6d      	ldr	r2, [pc, #436]	@ (80047a8 <DMA_SetConfig+0x24c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d036      	beq.n	8004666 <DMA_SetConfig+0x10a>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a6b      	ldr	r2, [pc, #428]	@ (80047ac <DMA_SetConfig+0x250>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d031      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a6a      	ldr	r2, [pc, #424]	@ (80047b0 <DMA_SetConfig+0x254>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d02c      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a68      	ldr	r2, [pc, #416]	@ (80047b4 <DMA_SetConfig+0x258>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d027      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a67      	ldr	r2, [pc, #412]	@ (80047b8 <DMA_SetConfig+0x25c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d022      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a65      	ldr	r2, [pc, #404]	@ (80047bc <DMA_SetConfig+0x260>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01d      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a64      	ldr	r2, [pc, #400]	@ (80047c0 <DMA_SetConfig+0x264>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d018      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a62      	ldr	r2, [pc, #392]	@ (80047c4 <DMA_SetConfig+0x268>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a61      	ldr	r2, [pc, #388]	@ (80047c8 <DMA_SetConfig+0x26c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a5f      	ldr	r2, [pc, #380]	@ (80047cc <DMA_SetConfig+0x270>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <DMA_SetConfig+0x10a>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a5e      	ldr	r2, [pc, #376]	@ (80047d0 <DMA_SetConfig+0x274>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <DMA_SetConfig+0x10a>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a5c      	ldr	r2, [pc, #368]	@ (80047d4 <DMA_SetConfig+0x278>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d101      	bne.n	800466a <DMA_SetConfig+0x10e>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <DMA_SetConfig+0x110>
 800466a:	2300      	movs	r3, #0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00d      	beq.n	800468c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004678:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d004      	beq.n	800468c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800468a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a39      	ldr	r2, [pc, #228]	@ (8004778 <DMA_SetConfig+0x21c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d04a      	beq.n	800472c <DMA_SetConfig+0x1d0>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a38      	ldr	r2, [pc, #224]	@ (800477c <DMA_SetConfig+0x220>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d045      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a36      	ldr	r2, [pc, #216]	@ (8004780 <DMA_SetConfig+0x224>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d040      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a35      	ldr	r2, [pc, #212]	@ (8004784 <DMA_SetConfig+0x228>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d03b      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a33      	ldr	r2, [pc, #204]	@ (8004788 <DMA_SetConfig+0x22c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d036      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a32      	ldr	r2, [pc, #200]	@ (800478c <DMA_SetConfig+0x230>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d031      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a30      	ldr	r2, [pc, #192]	@ (8004790 <DMA_SetConfig+0x234>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02c      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004794 <DMA_SetConfig+0x238>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d027      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004798 <DMA_SetConfig+0x23c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d022      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2c      	ldr	r2, [pc, #176]	@ (800479c <DMA_SetConfig+0x240>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d01d      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2a      	ldr	r2, [pc, #168]	@ (80047a0 <DMA_SetConfig+0x244>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d018      	beq.n	800472c <DMA_SetConfig+0x1d0>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a29      	ldr	r2, [pc, #164]	@ (80047a4 <DMA_SetConfig+0x248>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <DMA_SetConfig+0x1d0>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a27      	ldr	r2, [pc, #156]	@ (80047a8 <DMA_SetConfig+0x24c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00e      	beq.n	800472c <DMA_SetConfig+0x1d0>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a26      	ldr	r2, [pc, #152]	@ (80047ac <DMA_SetConfig+0x250>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d009      	beq.n	800472c <DMA_SetConfig+0x1d0>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a24      	ldr	r2, [pc, #144]	@ (80047b0 <DMA_SetConfig+0x254>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <DMA_SetConfig+0x1d0>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a23      	ldr	r2, [pc, #140]	@ (80047b4 <DMA_SetConfig+0x258>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d101      	bne.n	8004730 <DMA_SetConfig+0x1d4>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <DMA_SetConfig+0x1d6>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d059      	beq.n	80047ea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	223f      	movs	r2, #63	@ 0x3f
 8004740:	409a      	lsls	r2, r3
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004754:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b40      	cmp	r3, #64	@ 0x40
 8004764:	d138      	bne.n	80047d8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004776:	e086      	b.n	8004886 <DMA_SetConfig+0x32a>
 8004778:	40020010 	.word	0x40020010
 800477c:	40020028 	.word	0x40020028
 8004780:	40020040 	.word	0x40020040
 8004784:	40020058 	.word	0x40020058
 8004788:	40020070 	.word	0x40020070
 800478c:	40020088 	.word	0x40020088
 8004790:	400200a0 	.word	0x400200a0
 8004794:	400200b8 	.word	0x400200b8
 8004798:	40020410 	.word	0x40020410
 800479c:	40020428 	.word	0x40020428
 80047a0:	40020440 	.word	0x40020440
 80047a4:	40020458 	.word	0x40020458
 80047a8:	40020470 	.word	0x40020470
 80047ac:	40020488 	.word	0x40020488
 80047b0:	400204a0 	.word	0x400204a0
 80047b4:	400204b8 	.word	0x400204b8
 80047b8:	58025408 	.word	0x58025408
 80047bc:	5802541c 	.word	0x5802541c
 80047c0:	58025430 	.word	0x58025430
 80047c4:	58025444 	.word	0x58025444
 80047c8:	58025458 	.word	0x58025458
 80047cc:	5802546c 	.word	0x5802546c
 80047d0:	58025480 	.word	0x58025480
 80047d4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	60da      	str	r2, [r3, #12]
}
 80047e8:	e04d      	b.n	8004886 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a29      	ldr	r2, [pc, #164]	@ (8004894 <DMA_SetConfig+0x338>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d022      	beq.n	800483a <DMA_SetConfig+0x2de>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a27      	ldr	r2, [pc, #156]	@ (8004898 <DMA_SetConfig+0x33c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01d      	beq.n	800483a <DMA_SetConfig+0x2de>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a26      	ldr	r2, [pc, #152]	@ (800489c <DMA_SetConfig+0x340>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <DMA_SetConfig+0x2de>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a24      	ldr	r2, [pc, #144]	@ (80048a0 <DMA_SetConfig+0x344>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <DMA_SetConfig+0x2de>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a23      	ldr	r2, [pc, #140]	@ (80048a4 <DMA_SetConfig+0x348>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <DMA_SetConfig+0x2de>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a21      	ldr	r2, [pc, #132]	@ (80048a8 <DMA_SetConfig+0x34c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <DMA_SetConfig+0x2de>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a20      	ldr	r2, [pc, #128]	@ (80048ac <DMA_SetConfig+0x350>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <DMA_SetConfig+0x2de>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1e      	ldr	r2, [pc, #120]	@ (80048b0 <DMA_SetConfig+0x354>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <DMA_SetConfig+0x2e2>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <DMA_SetConfig+0x2e4>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2201      	movs	r2, #1
 800484e:	409a      	lsls	r2, r3
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b40      	cmp	r3, #64	@ 0x40
 8004862:	d108      	bne.n	8004876 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	60da      	str	r2, [r3, #12]
}
 8004874:	e007      	b.n	8004886 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	60da      	str	r2, [r3, #12]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	58025408 	.word	0x58025408
 8004898:	5802541c 	.word	0x5802541c
 800489c:	58025430 	.word	0x58025430
 80048a0:	58025444 	.word	0x58025444
 80048a4:	58025458 	.word	0x58025458
 80048a8:	5802546c 	.word	0x5802546c
 80048ac:	58025480 	.word	0x58025480
 80048b0:	58025494 	.word	0x58025494

080048b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a42      	ldr	r2, [pc, #264]	@ (80049cc <DMA_CalcBaseAndBitshift+0x118>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d04a      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a41      	ldr	r2, [pc, #260]	@ (80049d0 <DMA_CalcBaseAndBitshift+0x11c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d045      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a3f      	ldr	r2, [pc, #252]	@ (80049d4 <DMA_CalcBaseAndBitshift+0x120>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d040      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a3e      	ldr	r2, [pc, #248]	@ (80049d8 <DMA_CalcBaseAndBitshift+0x124>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d03b      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3c      	ldr	r2, [pc, #240]	@ (80049dc <DMA_CalcBaseAndBitshift+0x128>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d036      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a3b      	ldr	r2, [pc, #236]	@ (80049e0 <DMA_CalcBaseAndBitshift+0x12c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d031      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a39      	ldr	r2, [pc, #228]	@ (80049e4 <DMA_CalcBaseAndBitshift+0x130>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d02c      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a38      	ldr	r2, [pc, #224]	@ (80049e8 <DMA_CalcBaseAndBitshift+0x134>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d027      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a36      	ldr	r2, [pc, #216]	@ (80049ec <DMA_CalcBaseAndBitshift+0x138>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d022      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a35      	ldr	r2, [pc, #212]	@ (80049f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d01d      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a33      	ldr	r2, [pc, #204]	@ (80049f4 <DMA_CalcBaseAndBitshift+0x140>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d018      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a32      	ldr	r2, [pc, #200]	@ (80049f8 <DMA_CalcBaseAndBitshift+0x144>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d013      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a30      	ldr	r2, [pc, #192]	@ (80049fc <DMA_CalcBaseAndBitshift+0x148>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00e      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2f      	ldr	r2, [pc, #188]	@ (8004a00 <DMA_CalcBaseAndBitshift+0x14c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d009      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a04 <DMA_CalcBaseAndBitshift+0x150>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <DMA_CalcBaseAndBitshift+0xa8>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2c      	ldr	r2, [pc, #176]	@ (8004a08 <DMA_CalcBaseAndBitshift+0x154>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d101      	bne.n	8004960 <DMA_CalcBaseAndBitshift+0xac>
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <DMA_CalcBaseAndBitshift+0xae>
 8004960:	2300      	movs	r3, #0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d024      	beq.n	80049b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	3b10      	subs	r3, #16
 800496e:	4a27      	ldr	r2, [pc, #156]	@ (8004a0c <DMA_CalcBaseAndBitshift+0x158>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	4a24      	ldr	r2, [pc, #144]	@ (8004a10 <DMA_CalcBaseAndBitshift+0x15c>)
 8004980:	5cd3      	ldrb	r3, [r2, r3]
 8004982:	461a      	mov	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b03      	cmp	r3, #3
 800498c:	d908      	bls.n	80049a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	4b1f      	ldr	r3, [pc, #124]	@ (8004a14 <DMA_CalcBaseAndBitshift+0x160>)
 8004996:	4013      	ands	r3, r2
 8004998:	1d1a      	adds	r2, r3, #4
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	659a      	str	r2, [r3, #88]	@ 0x58
 800499e:	e00d      	b.n	80049bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a14 <DMA_CalcBaseAndBitshift+0x160>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ae:	e005      	b.n	80049bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40020010 	.word	0x40020010
 80049d0:	40020028 	.word	0x40020028
 80049d4:	40020040 	.word	0x40020040
 80049d8:	40020058 	.word	0x40020058
 80049dc:	40020070 	.word	0x40020070
 80049e0:	40020088 	.word	0x40020088
 80049e4:	400200a0 	.word	0x400200a0
 80049e8:	400200b8 	.word	0x400200b8
 80049ec:	40020410 	.word	0x40020410
 80049f0:	40020428 	.word	0x40020428
 80049f4:	40020440 	.word	0x40020440
 80049f8:	40020458 	.word	0x40020458
 80049fc:	40020470 	.word	0x40020470
 8004a00:	40020488 	.word	0x40020488
 8004a04:	400204a0 	.word	0x400204a0
 8004a08:	400204b8 	.word	0x400204b8
 8004a0c:	aaaaaaab 	.word	0xaaaaaaab
 8004a10:	08012528 	.word	0x08012528
 8004a14:	fffffc00 	.word	0xfffffc00

08004a18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d120      	bne.n	8004a6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d858      	bhi.n	8004ae6 <DMA_CheckFifoParam+0xce>
 8004a34:	a201      	add	r2, pc, #4	@ (adr r2, 8004a3c <DMA_CheckFifoParam+0x24>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a4d 	.word	0x08004a4d
 8004a40:	08004a5f 	.word	0x08004a5f
 8004a44:	08004a4d 	.word	0x08004a4d
 8004a48:	08004ae7 	.word	0x08004ae7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d048      	beq.n	8004aea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a5c:	e045      	b.n	8004aea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a66:	d142      	bne.n	8004aee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a6c:	e03f      	b.n	8004aee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a76:	d123      	bne.n	8004ac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d838      	bhi.n	8004af2 <DMA_CheckFifoParam+0xda>
 8004a80:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <DMA_CheckFifoParam+0x70>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004a9f 	.word	0x08004a9f
 8004a90:	08004a99 	.word	0x08004a99
 8004a94:	08004ab1 	.word	0x08004ab1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
        break;
 8004a9c:	e030      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d025      	beq.n	8004af6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004aae:	e022      	b.n	8004af6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ab8:	d11f      	bne.n	8004afa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004abe:	e01c      	b.n	8004afa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d902      	bls.n	8004ace <DMA_CheckFifoParam+0xb6>
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d003      	beq.n	8004ad4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004acc:	e018      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ad2:	e015      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00e      	beq.n	8004afe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ae4:	e00b      	b.n	8004afe <DMA_CheckFifoParam+0xe6>
        break;
 8004ae6:	bf00      	nop
 8004ae8:	e00a      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        break;
 8004aea:	bf00      	nop
 8004aec:	e008      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        break;
 8004aee:	bf00      	nop
 8004af0:	e006      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        break;
 8004af2:	bf00      	nop
 8004af4:	e004      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        break;
 8004af6:	bf00      	nop
 8004af8:	e002      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
        break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <DMA_CheckFifoParam+0xe8>
    break;
 8004afe:	bf00      	nop
    }
  }

  return status;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop

08004b10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a38      	ldr	r2, [pc, #224]	@ (8004c04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d022      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a36      	ldr	r2, [pc, #216]	@ (8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d01d      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a35      	ldr	r2, [pc, #212]	@ (8004c0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d018      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a33      	ldr	r2, [pc, #204]	@ (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a32      	ldr	r2, [pc, #200]	@ (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00e      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a30      	ldr	r2, [pc, #192]	@ (8004c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d009      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8004c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2d      	ldr	r2, [pc, #180]	@ (8004c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01a      	beq.n	8004bae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	3b08      	subs	r3, #8
 8004b80:	4a28      	ldr	r2, [pc, #160]	@ (8004c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4b26      	ldr	r3, [pc, #152]	@ (8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	461a      	mov	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a24      	ldr	r2, [pc, #144]	@ (8004c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b9c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004bac:	e024      	b.n	8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	3b10      	subs	r3, #16
 8004bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d806      	bhi.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4a1b      	ldr	r2, [pc, #108]	@ (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d902      	bls.n	8004bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4b18      	ldr	r3, [pc, #96]	@ (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	461a      	mov	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a16      	ldr	r2, [pc, #88]	@ (8004c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004be8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	409a      	lsls	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	58025408 	.word	0x58025408
 8004c08:	5802541c 	.word	0x5802541c
 8004c0c:	58025430 	.word	0x58025430
 8004c10:	58025444 	.word	0x58025444
 8004c14:	58025458 	.word	0x58025458
 8004c18:	5802546c 	.word	0x5802546c
 8004c1c:	58025480 	.word	0x58025480
 8004c20:	58025494 	.word	0x58025494
 8004c24:	cccccccd 	.word	0xcccccccd
 8004c28:	16009600 	.word	0x16009600
 8004c2c:	58025880 	.word	0x58025880
 8004c30:	aaaaaaab 	.word	0xaaaaaaab
 8004c34:	400204b8 	.word	0x400204b8
 8004c38:	4002040f 	.word	0x4002040f
 8004c3c:	10008200 	.word	0x10008200
 8004c40:	40020880 	.word	0x40020880

08004c44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d04a      	beq.n	8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d847      	bhi.n	8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a25      	ldr	r2, [pc, #148]	@ (8004cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d022      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a24      	ldr	r2, [pc, #144]	@ (8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d01d      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a22      	ldr	r2, [pc, #136]	@ (8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a21      	ldr	r2, [pc, #132]	@ (8004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1e      	ldr	r2, [pc, #120]	@ (8004d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1b      	ldr	r2, [pc, #108]	@ (8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4b17      	ldr	r3, [pc, #92]	@ (8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a15      	ldr	r2, [pc, #84]	@ (8004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ccc:	671a      	str	r2, [r3, #112]	@ 0x70
 8004cce:	e009      	b.n	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a11      	ldr	r2, [pc, #68]	@ (8004d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ce2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	2201      	movs	r2, #1
 8004cea:	409a      	lsls	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	58025408 	.word	0x58025408
 8004d00:	5802541c 	.word	0x5802541c
 8004d04:	58025430 	.word	0x58025430
 8004d08:	58025444 	.word	0x58025444
 8004d0c:	58025458 	.word	0x58025458
 8004d10:	5802546c 	.word	0x5802546c
 8004d14:	58025480 	.word	0x58025480
 8004d18:	58025494 	.word	0x58025494
 8004d1c:	1600963f 	.word	0x1600963f
 8004d20:	58025940 	.word	0x58025940
 8004d24:	1000823f 	.word	0x1000823f
 8004d28:	40020940 	.word	0x40020940

08004d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b089      	sub	sp, #36	@ 0x24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d3a:	4b89      	ldr	r3, [pc, #548]	@ (8004f60 <HAL_GPIO_Init+0x234>)
 8004d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d3e:	e194      	b.n	800506a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	2101      	movs	r1, #1
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 8186 	beq.w	8005064 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d005      	beq.n	8004d70 <HAL_GPIO_Init+0x44>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d130      	bne.n	8004dd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004da6:	2201      	movs	r2, #1
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	f003 0201 	and.w	r2, r3, #1
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d017      	beq.n	8004e0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	2203      	movs	r2, #3
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d123      	bne.n	8004e62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	08da      	lsrs	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3208      	adds	r2, #8
 8004e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	220f      	movs	r2, #15
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	08da      	lsrs	r2, r3, #3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3208      	adds	r2, #8
 8004e5c:	69b9      	ldr	r1, [r7, #24]
 8004e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	43db      	mvns	r3, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4013      	ands	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f003 0203 	and.w	r2, r3, #3
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 80e0 	beq.w	8005064 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8004f64 <HAL_GPIO_Init+0x238>)
 8004ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8004f64 <HAL_GPIO_Init+0x238>)
 8004eac:	f043 0302 	orr.w	r3, r3, #2
 8004eb0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f64 <HAL_GPIO_Init+0x238>)
 8004eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ec2:	4a29      	ldr	r2, [pc, #164]	@ (8004f68 <HAL_GPIO_Init+0x23c>)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	089b      	lsrs	r3, r3, #2
 8004ec8:	3302      	adds	r3, #2
 8004eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	220f      	movs	r2, #15
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a20      	ldr	r2, [pc, #128]	@ (8004f6c <HAL_GPIO_Init+0x240>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d052      	beq.n	8004f94 <HAL_GPIO_Init+0x268>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f70 <HAL_GPIO_Init+0x244>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d031      	beq.n	8004f5a <HAL_GPIO_Init+0x22e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8004f74 <HAL_GPIO_Init+0x248>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d02b      	beq.n	8004f56 <HAL_GPIO_Init+0x22a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a1d      	ldr	r2, [pc, #116]	@ (8004f78 <HAL_GPIO_Init+0x24c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d025      	beq.n	8004f52 <HAL_GPIO_Init+0x226>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a1c      	ldr	r2, [pc, #112]	@ (8004f7c <HAL_GPIO_Init+0x250>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01f      	beq.n	8004f4e <HAL_GPIO_Init+0x222>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a1b      	ldr	r2, [pc, #108]	@ (8004f80 <HAL_GPIO_Init+0x254>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d019      	beq.n	8004f4a <HAL_GPIO_Init+0x21e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a1a      	ldr	r2, [pc, #104]	@ (8004f84 <HAL_GPIO_Init+0x258>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_GPIO_Init+0x21a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a19      	ldr	r2, [pc, #100]	@ (8004f88 <HAL_GPIO_Init+0x25c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00d      	beq.n	8004f42 <HAL_GPIO_Init+0x216>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a18      	ldr	r2, [pc, #96]	@ (8004f8c <HAL_GPIO_Init+0x260>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d007      	beq.n	8004f3e <HAL_GPIO_Init+0x212>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a17      	ldr	r2, [pc, #92]	@ (8004f90 <HAL_GPIO_Init+0x264>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d101      	bne.n	8004f3a <HAL_GPIO_Init+0x20e>
 8004f36:	2309      	movs	r3, #9
 8004f38:	e02d      	b.n	8004f96 <HAL_GPIO_Init+0x26a>
 8004f3a:	230a      	movs	r3, #10
 8004f3c:	e02b      	b.n	8004f96 <HAL_GPIO_Init+0x26a>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	e029      	b.n	8004f96 <HAL_GPIO_Init+0x26a>
 8004f42:	2307      	movs	r3, #7
 8004f44:	e027      	b.n	8004f96 <HAL_GPIO_Init+0x26a>
 8004f46:	2306      	movs	r3, #6
 8004f48:	e025      	b.n	8004f96 <HAL_GPIO_Init+0x26a>
 8004f4a:	2305      	movs	r3, #5
 8004f4c:	e023      	b.n	8004f96 <HAL_GPIO_Init+0x26a>
 8004f4e:	2304      	movs	r3, #4
 8004f50:	e021      	b.n	8004f96 <HAL_GPIO_Init+0x26a>
 8004f52:	2303      	movs	r3, #3
 8004f54:	e01f      	b.n	8004f96 <HAL_GPIO_Init+0x26a>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e01d      	b.n	8004f96 <HAL_GPIO_Init+0x26a>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e01b      	b.n	8004f96 <HAL_GPIO_Init+0x26a>
 8004f5e:	bf00      	nop
 8004f60:	58000080 	.word	0x58000080
 8004f64:	58024400 	.word	0x58024400
 8004f68:	58000400 	.word	0x58000400
 8004f6c:	58020000 	.word	0x58020000
 8004f70:	58020400 	.word	0x58020400
 8004f74:	58020800 	.word	0x58020800
 8004f78:	58020c00 	.word	0x58020c00
 8004f7c:	58021000 	.word	0x58021000
 8004f80:	58021400 	.word	0x58021400
 8004f84:	58021800 	.word	0x58021800
 8004f88:	58021c00 	.word	0x58021c00
 8004f8c:	58022000 	.word	0x58022000
 8004f90:	58022400 	.word	0x58022400
 8004f94:	2300      	movs	r3, #0
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	f002 0203 	and.w	r2, r2, #3
 8004f9c:	0092      	lsls	r2, r2, #2
 8004f9e:	4093      	lsls	r3, r2
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fa6:	4938      	ldr	r1, [pc, #224]	@ (8005088 <HAL_GPIO_Init+0x35c>)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	089b      	lsrs	r3, r3, #2
 8004fac:	3302      	adds	r3, #2
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004fda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005008:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	43db      	mvns	r3, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4013      	ands	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	3301      	adds	r3, #1
 8005068:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	f47f ae63 	bne.w	8004d40 <HAL_GPIO_Init+0x14>
  }
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	3724      	adds	r7, #36	@ 0x24
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	58000400 	.word	0x58000400

0800508c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	887b      	ldrh	r3, [r7, #2]
 800509e:	4013      	ands	r3, r2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
 80050a8:	e001      	b.n	80050ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e08b      	b.n	80051e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fb fc82 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2224      	movs	r2, #36	@ 0x24
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800510c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800511c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d107      	bne.n	8005136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005132:	609a      	str	r2, [r3, #8]
 8005134:	e006      	b.n	8005144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d108      	bne.n	800515e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800515a:	605a      	str	r2, [r3, #4]
 800515c:	e007      	b.n	800516e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800516c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b1d      	ldr	r3, [pc, #116]	@ (80051f0 <HAL_I2C_Init+0x134>)
 800517a:	430b      	orrs	r3, r1
 800517c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800518c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69d9      	ldr	r1, [r3, #28]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	02008000 	.word	0x02008000

080051f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	461a      	mov	r2, r3
 8005200:	460b      	mov	r3, r1
 8005202:	817b      	strh	r3, [r7, #10]
 8005204:	4613      	mov	r3, r2
 8005206:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b20      	cmp	r3, #32
 8005212:	f040 80fd 	bne.w	8005410 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_I2C_Master_Transmit+0x30>
 8005220:	2302      	movs	r3, #2
 8005222:	e0f6      	b.n	8005412 <HAL_I2C_Master_Transmit+0x21e>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800522c:	f7fc fdea 	bl	8001e04 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	2319      	movs	r3, #25
 8005238:	2201      	movs	r2, #1
 800523a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f914 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e0e1      	b.n	8005412 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2221      	movs	r2, #33	@ 0x21
 8005252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2210      	movs	r2, #16
 800525a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	893a      	ldrh	r2, [r7, #8]
 800526e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527a:	b29b      	uxth	r3, r3
 800527c:	2bff      	cmp	r3, #255	@ 0xff
 800527e:	d906      	bls.n	800528e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	22ff      	movs	r2, #255	@ 0xff
 8005284:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005286:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	e007      	b.n	800529e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005298:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800529c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d024      	beq.n	80052f0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	781a      	ldrb	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	3301      	adds	r3, #1
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	8979      	ldrh	r1, [r7, #10]
 80052e2:	4b4e      	ldr	r3, [pc, #312]	@ (800541c <HAL_I2C_Master_Transmit+0x228>)
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fa83 	bl	80057f4 <I2C_TransferConfig>
 80052ee:	e066      	b.n	80053be <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	8979      	ldrh	r1, [r7, #10]
 80052f8:	4b48      	ldr	r3, [pc, #288]	@ (800541c <HAL_I2C_Master_Transmit+0x228>)
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fa78 	bl	80057f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005304:	e05b      	b.n	80053be <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	6a39      	ldr	r1, [r7, #32]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f907 	bl	800551e <I2C_WaitOnTXISFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e07b      	b.n	8005412 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	781a      	ldrb	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d034      	beq.n	80053be <HAL_I2C_Master_Transmit+0x1ca>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	d130      	bne.n	80053be <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	2200      	movs	r2, #0
 8005364:	2180      	movs	r1, #128	@ 0x80
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f880 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e04d      	b.n	8005412 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	2bff      	cmp	r3, #255	@ 0xff
 800537e:	d90e      	bls.n	800539e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	22ff      	movs	r2, #255	@ 0xff
 8005384:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538a:	b2da      	uxtb	r2, r3
 800538c:	8979      	ldrh	r1, [r7, #10]
 800538e:	2300      	movs	r3, #0
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fa2c 	bl	80057f4 <I2C_TransferConfig>
 800539c:	e00f      	b.n	80053be <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	8979      	ldrh	r1, [r7, #10]
 80053b0:	2300      	movs	r3, #0
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fa1b 	bl	80057f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d19e      	bne.n	8005306 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	6a39      	ldr	r1, [r7, #32]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f8ed 	bl	80055ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e01a      	b.n	8005412 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2220      	movs	r2, #32
 80053e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005420 <HAL_I2C_Master_Transmit+0x22c>)
 80053f0:	400b      	ands	r3, r1
 80053f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	80002000 	.word	0x80002000
 8005420:	fe00e800 	.word	0xfe00e800

08005424 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d103      	bne.n	8005442 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2200      	movs	r2, #0
 8005440:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b01      	cmp	r3, #1
 800544e:	d007      	beq.n	8005460 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	619a      	str	r2, [r3, #24]
  }
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800547c:	e03b      	b.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f8d6 	bl	8005634 <I2C_IsErrorOccurred>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e041      	b.n	8005516 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d02d      	beq.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549a:	f7fc fcb3 	bl	8001e04 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d122      	bne.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4013      	ands	r3, r2
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	429a      	cmp	r2, r3
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d113      	bne.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d2:	f043 0220 	orr.w	r2, r3, #32
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e00f      	b.n	8005516 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4013      	ands	r3, r2
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	bf0c      	ite	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	2300      	movne	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	429a      	cmp	r2, r3
 8005512:	d0b4      	beq.n	800547e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800552a:	e033      	b.n	8005594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f87f 	bl	8005634 <I2C_IsErrorOccurred>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e031      	b.n	80055a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d025      	beq.n	8005594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005548:	f7fc fc5c 	bl	8001e04 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	429a      	cmp	r2, r3
 8005556:	d302      	bcc.n	800555e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d11a      	bne.n	8005594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b02      	cmp	r3, #2
 800556a:	d013      	beq.n	8005594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005570:	f043 0220 	orr.w	r2, r3, #32
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e007      	b.n	80055a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d1c4      	bne.n	800552c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b8:	e02f      	b.n	800561a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f838 	bl	8005634 <I2C_IsErrorOccurred>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e02d      	b.n	800562a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ce:	f7fc fc19 	bl	8001e04 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d302      	bcc.n	80055e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d11a      	bne.n	800561a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d013      	beq.n	800561a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f6:	f043 0220 	orr.w	r2, r3, #32
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e007      	b.n	800562a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b20      	cmp	r3, #32
 8005626:	d1c8      	bne.n	80055ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	@ 0x28
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f003 0310 	and.w	r3, r3, #16
 800565c:	2b00      	cmp	r3, #0
 800565e:	d068      	beq.n	8005732 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2210      	movs	r2, #16
 8005666:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005668:	e049      	b.n	80056fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d045      	beq.n	80056fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005672:	f7fc fbc7 	bl	8001e04 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	429a      	cmp	r2, r3
 8005680:	d302      	bcc.n	8005688 <I2C_IsErrorOccurred+0x54>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d13a      	bne.n	80056fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005692:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800569a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056aa:	d121      	bne.n	80056f0 <I2C_IsErrorOccurred+0xbc>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056b2:	d01d      	beq.n	80056f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80056b4:	7cfb      	ldrb	r3, [r7, #19]
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d01a      	beq.n	80056f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80056ca:	f7fc fb9b 	bl	8001e04 <HAL_GetTick>
 80056ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056d0:	e00e      	b.n	80056f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80056d2:	f7fc fb97 	bl	8001e04 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b19      	cmp	r3, #25
 80056de:	d907      	bls.n	80056f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	f043 0320 	orr.w	r3, r3, #32
 80056e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80056ee:	e006      	b.n	80056fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d1e9      	bne.n	80056d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b20      	cmp	r3, #32
 800570a:	d003      	beq.n	8005714 <I2C_IsErrorOccurred+0xe0>
 800570c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0aa      	beq.n	800566a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005718:	2b00      	cmp	r3, #0
 800571a:	d103      	bne.n	8005724 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2220      	movs	r2, #32
 8005722:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	f043 0304 	orr.w	r3, r3, #4
 800572a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005754:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	f043 0308 	orr.w	r3, r3, #8
 800576c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005776:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00b      	beq.n	80057a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	f043 0302 	orr.w	r3, r3, #2
 800578e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005798:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80057a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01c      	beq.n	80057e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff fe3b 	bl	8005424 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6859      	ldr	r1, [r3, #4]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <I2C_IsErrorOccurred+0x1bc>)
 80057ba:	400b      	ands	r3, r1
 80057bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	431a      	orrs	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80057e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3728      	adds	r7, #40	@ 0x28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	fe00e800 	.word	0xfe00e800

080057f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	607b      	str	r3, [r7, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	817b      	strh	r3, [r7, #10]
 8005802:	4613      	mov	r3, r2
 8005804:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005806:	897b      	ldrh	r3, [r7, #10]
 8005808:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800580c:	7a7b      	ldrb	r3, [r7, #9]
 800580e:	041b      	lsls	r3, r3, #16
 8005810:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005814:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	4313      	orrs	r3, r2
 800581e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005822:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	0d5b      	lsrs	r3, r3, #21
 800582e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005832:	4b08      	ldr	r3, [pc, #32]	@ (8005854 <I2C_TransferConfig+0x60>)
 8005834:	430b      	orrs	r3, r1
 8005836:	43db      	mvns	r3, r3
 8005838:	ea02 0103 	and.w	r1, r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	03ff63ff 	.word	0x03ff63ff

08005858 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b20      	cmp	r3, #32
 800586c:	d138      	bne.n	80058e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005878:	2302      	movs	r3, #2
 800587a:	e032      	b.n	80058e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	@ 0x24
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0201 	bic.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6819      	ldr	r1, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	e000      	b.n	80058e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058e0:	2302      	movs	r3, #2
  }
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b20      	cmp	r3, #32
 8005902:	d139      	bne.n	8005978 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800590e:	2302      	movs	r3, #2
 8005910:	e033      	b.n	800597a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2224      	movs	r2, #36	@ 0x24
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0201 	bic.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005940:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	e000      	b.n	800597a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005978:	2302      	movs	r3, #2
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
	...

08005988 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005990:	4b19      	ldr	r3, [pc, #100]	@ (80059f8 <HAL_PWREx_ConfigSupply+0x70>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d00a      	beq.n	80059b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800599c:	4b16      	ldr	r3, [pc, #88]	@ (80059f8 <HAL_PWREx_ConfigSupply+0x70>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d001      	beq.n	80059ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e01f      	b.n	80059ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	e01d      	b.n	80059ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80059b2:	4b11      	ldr	r3, [pc, #68]	@ (80059f8 <HAL_PWREx_ConfigSupply+0x70>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f023 0207 	bic.w	r2, r3, #7
 80059ba:	490f      	ldr	r1, [pc, #60]	@ (80059f8 <HAL_PWREx_ConfigSupply+0x70>)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80059c2:	f7fc fa1f 	bl	8001e04 <HAL_GetTick>
 80059c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059c8:	e009      	b.n	80059de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80059ca:	f7fc fa1b 	bl	8001e04 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059d8:	d901      	bls.n	80059de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e007      	b.n	80059ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059de:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <HAL_PWREx_ConfigSupply+0x70>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ea:	d1ee      	bne.n	80059ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	58024800 	.word	0x58024800

080059fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08c      	sub	sp, #48	@ 0x30
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d102      	bne.n	8005a10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f000 bc48 	b.w	80062a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8088 	beq.w	8005b2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a1e:	4b99      	ldr	r3, [pc, #612]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a28:	4b96      	ldr	r3, [pc, #600]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a30:	2b10      	cmp	r3, #16
 8005a32:	d007      	beq.n	8005a44 <HAL_RCC_OscConfig+0x48>
 8005a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a36:	2b18      	cmp	r3, #24
 8005a38:	d111      	bne.n	8005a5e <HAL_RCC_OscConfig+0x62>
 8005a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d10c      	bne.n	8005a5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a44:	4b8f      	ldr	r3, [pc, #572]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d06d      	beq.n	8005b2c <HAL_RCC_OscConfig+0x130>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d169      	bne.n	8005b2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f000 bc21 	b.w	80062a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a66:	d106      	bne.n	8005a76 <HAL_RCC_OscConfig+0x7a>
 8005a68:	4b86      	ldr	r3, [pc, #536]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a85      	ldr	r2, [pc, #532]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e02e      	b.n	8005ad4 <HAL_RCC_OscConfig+0xd8>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10c      	bne.n	8005a98 <HAL_RCC_OscConfig+0x9c>
 8005a7e:	4b81      	ldr	r3, [pc, #516]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a80      	ldr	r2, [pc, #512]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	4b7e      	ldr	r3, [pc, #504]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a7d      	ldr	r2, [pc, #500]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005a90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	e01d      	b.n	8005ad4 <HAL_RCC_OscConfig+0xd8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCC_OscConfig+0xc0>
 8005aa2:	4b78      	ldr	r3, [pc, #480]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a77      	ldr	r2, [pc, #476]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	4b75      	ldr	r3, [pc, #468]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a74      	ldr	r2, [pc, #464]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	e00b      	b.n	8005ad4 <HAL_RCC_OscConfig+0xd8>
 8005abc:	4b71      	ldr	r3, [pc, #452]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a70      	ldr	r2, [pc, #448]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	4b6e      	ldr	r3, [pc, #440]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a6d      	ldr	r2, [pc, #436]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d013      	beq.n	8005b04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fc f992 	bl	8001e04 <HAL_GetTick>
 8005ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7fc f98e 	bl	8001e04 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	@ 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e3d4      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005af6:	4b63      	ldr	r3, [pc, #396]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f0      	beq.n	8005ae4 <HAL_RCC_OscConfig+0xe8>
 8005b02:	e014      	b.n	8005b2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fc f97e 	bl	8001e04 <HAL_GetTick>
 8005b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b0c:	f7fc f97a 	bl	8001e04 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b64      	cmp	r3, #100	@ 0x64
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e3c0      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b1e:	4b59      	ldr	r3, [pc, #356]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x110>
 8005b2a:	e000      	b.n	8005b2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 80ca 	beq.w	8005cd0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b3c:	4b51      	ldr	r3, [pc, #324]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b46:	4b4f      	ldr	r3, [pc, #316]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d007      	beq.n	8005b62 <HAL_RCC_OscConfig+0x166>
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	2b18      	cmp	r3, #24
 8005b56:	d156      	bne.n	8005c06 <HAL_RCC_OscConfig+0x20a>
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d151      	bne.n	8005c06 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b62:	4b48      	ldr	r3, [pc, #288]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <HAL_RCC_OscConfig+0x17e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e392      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b7a:	4b42      	ldr	r3, [pc, #264]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 0219 	bic.w	r2, r3, #25
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	493f      	ldr	r1, [pc, #252]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7fc f93a 	bl	8001e04 <HAL_GetTick>
 8005b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b94:	f7fc f936 	bl	8001e04 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e37c      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ba6:	4b37      	ldr	r3, [pc, #220]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f0      	beq.n	8005b94 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb2:	f7fc f957 	bl	8001e64 <HAL_GetREVID>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d817      	bhi.n	8005bf0 <HAL_RCC_OscConfig+0x1f4>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b40      	cmp	r3, #64	@ 0x40
 8005bc6:	d108      	bne.n	8005bda <HAL_RCC_OscConfig+0x1de>
 8005bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bd8:	e07a      	b.n	8005cd0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bda:	4b2a      	ldr	r3, [pc, #168]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	031b      	lsls	r3, r3, #12
 8005be8:	4926      	ldr	r1, [pc, #152]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bee:	e06f      	b.n	8005cd0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf0:	4b24      	ldr	r3, [pc, #144]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	061b      	lsls	r3, r3, #24
 8005bfe:	4921      	ldr	r1, [pc, #132]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c04:	e064      	b.n	8005cd0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d047      	beq.n	8005c9e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f023 0219 	bic.w	r2, r3, #25
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	491a      	ldr	r1, [pc, #104]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fc f8f0 	bl	8001e04 <HAL_GetTick>
 8005c24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c28:	f7fc f8ec 	bl	8001e04 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e332      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c3a:	4b12      	ldr	r3, [pc, #72]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c46:	f7fc f90d 	bl	8001e64 <HAL_GetREVID>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d819      	bhi.n	8005c88 <HAL_RCC_OscConfig+0x28c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2b40      	cmp	r3, #64	@ 0x40
 8005c5a:	d108      	bne.n	8005c6e <HAL_RCC_OscConfig+0x272>
 8005c5c:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005c64:	4a07      	ldr	r2, [pc, #28]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c6a:	6053      	str	r3, [r2, #4]
 8005c6c:	e030      	b.n	8005cd0 <HAL_RCC_OscConfig+0x2d4>
 8005c6e:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	031b      	lsls	r3, r3, #12
 8005c7c:	4901      	ldr	r1, [pc, #4]	@ (8005c84 <HAL_RCC_OscConfig+0x288>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	604b      	str	r3, [r1, #4]
 8005c82:	e025      	b.n	8005cd0 <HAL_RCC_OscConfig+0x2d4>
 8005c84:	58024400 	.word	0x58024400
 8005c88:	4b9a      	ldr	r3, [pc, #616]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	061b      	lsls	r3, r3, #24
 8005c96:	4997      	ldr	r1, [pc, #604]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	604b      	str	r3, [r1, #4]
 8005c9c:	e018      	b.n	8005cd0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c9e:	4b95      	ldr	r3, [pc, #596]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a94      	ldr	r2, [pc, #592]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005caa:	f7fc f8ab 	bl	8001e04 <HAL_GetTick>
 8005cae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb2:	f7fc f8a7 	bl	8001e04 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e2ed      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cc4:	4b8b      	ldr	r3, [pc, #556]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1f0      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80a9 	beq.w	8005e30 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cde:	4b85      	ldr	r3, [pc, #532]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ce6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ce8:	4b82      	ldr	r3, [pc, #520]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d007      	beq.n	8005d04 <HAL_RCC_OscConfig+0x308>
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b18      	cmp	r3, #24
 8005cf8:	d13a      	bne.n	8005d70 <HAL_RCC_OscConfig+0x374>
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d135      	bne.n	8005d70 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d04:	4b7b      	ldr	r3, [pc, #492]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <HAL_RCC_OscConfig+0x320>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	2b80      	cmp	r3, #128	@ 0x80
 8005d16:	d001      	beq.n	8005d1c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e2c1      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d1c:	f7fc f8a2 	bl	8001e64 <HAL_GetREVID>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d817      	bhi.n	8005d5a <HAL_RCC_OscConfig+0x35e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d108      	bne.n	8005d44 <HAL_RCC_OscConfig+0x348>
 8005d32:	4b70      	ldr	r3, [pc, #448]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005d3a:	4a6e      	ldr	r2, [pc, #440]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005d3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d40:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d42:	e075      	b.n	8005e30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d44:	4b6b      	ldr	r3, [pc, #428]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	069b      	lsls	r3, r3, #26
 8005d52:	4968      	ldr	r1, [pc, #416]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d58:	e06a      	b.n	8005e30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d5a:	4b66      	ldr	r3, [pc, #408]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	061b      	lsls	r3, r3, #24
 8005d68:	4962      	ldr	r1, [pc, #392]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d6e:	e05f      	b.n	8005e30 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d042      	beq.n	8005dfe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d78:	4b5e      	ldr	r3, [pc, #376]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d84:	f7fc f83e 	bl	8001e04 <HAL_GetTick>
 8005d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d8c:	f7fc f83a 	bl	8001e04 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e280      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d9e:	4b55      	ldr	r3, [pc, #340]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0f0      	beq.n	8005d8c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005daa:	f7fc f85b 	bl	8001e64 <HAL_GetREVID>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d817      	bhi.n	8005de8 <HAL_RCC_OscConfig+0x3ec>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d108      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x3d6>
 8005dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005dca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dce:	6053      	str	r3, [r2, #4]
 8005dd0:	e02e      	b.n	8005e30 <HAL_RCC_OscConfig+0x434>
 8005dd2:	4b48      	ldr	r3, [pc, #288]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	069b      	lsls	r3, r3, #26
 8005de0:	4944      	ldr	r1, [pc, #272]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	604b      	str	r3, [r1, #4]
 8005de6:	e023      	b.n	8005e30 <HAL_RCC_OscConfig+0x434>
 8005de8:	4b42      	ldr	r3, [pc, #264]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	061b      	lsls	r3, r3, #24
 8005df6:	493f      	ldr	r1, [pc, #252]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60cb      	str	r3, [r1, #12]
 8005dfc:	e018      	b.n	8005e30 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a3c      	ldr	r2, [pc, #240]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005e04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0a:	f7fb fffb 	bl	8001e04 <HAL_GetTick>
 8005e0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e12:	f7fb fff7 	bl	8001e04 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e23d      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e24:	4b33      	ldr	r3, [pc, #204]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1f0      	bne.n	8005e12 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d036      	beq.n	8005eaa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d019      	beq.n	8005e78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e44:	4b2b      	ldr	r3, [pc, #172]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e48:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e50:	f7fb ffd8 	bl	8001e04 <HAL_GetTick>
 8005e54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e58:	f7fb ffd4 	bl	8001e04 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e21a      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e6a:	4b22      	ldr	r3, [pc, #136]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0x45c>
 8005e76:	e018      	b.n	8005eaa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e78:	4b1e      	ldr	r3, [pc, #120]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005e7e:	f023 0301 	bic.w	r3, r3, #1
 8005e82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e84:	f7fb ffbe 	bl	8001e04 <HAL_GetTick>
 8005e88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e8c:	f7fb ffba 	bl	8001e04 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e200      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e9e:	4b15      	ldr	r3, [pc, #84]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d039      	beq.n	8005f2a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01c      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005ec4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ec8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005eca:	f7fb ff9b 	bl	8001e04 <HAL_GetTick>
 8005ece:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ed2:	f7fb ff97 	bl	8001e04 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e1dd      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ee4:	4b03      	ldr	r3, [pc, #12]	@ (8005ef4 <HAL_RCC_OscConfig+0x4f8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x4d6>
 8005ef0:	e01b      	b.n	8005f2a <HAL_RCC_OscConfig+0x52e>
 8005ef2:	bf00      	nop
 8005ef4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ef8:	4b9b      	ldr	r3, [pc, #620]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a9a      	ldr	r2, [pc, #616]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005efe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f04:	f7fb ff7e 	bl	8001e04 <HAL_GetTick>
 8005f08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f0c:	f7fb ff7a 	bl	8001e04 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e1c0      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f1e:	4b92      	ldr	r3, [pc, #584]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f0      	bne.n	8005f0c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8081 	beq.w	800603a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f38:	4b8c      	ldr	r3, [pc, #560]	@ (800616c <HAL_RCC_OscConfig+0x770>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a8b      	ldr	r2, [pc, #556]	@ (800616c <HAL_RCC_OscConfig+0x770>)
 8005f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f44:	f7fb ff5e 	bl	8001e04 <HAL_GetTick>
 8005f48:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f4c:	f7fb ff5a 	bl	8001e04 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b64      	cmp	r3, #100	@ 0x64
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e1a0      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f5e:	4b83      	ldr	r3, [pc, #524]	@ (800616c <HAL_RCC_OscConfig+0x770>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0f0      	beq.n	8005f4c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d106      	bne.n	8005f80 <HAL_RCC_OscConfig+0x584>
 8005f72:	4b7d      	ldr	r3, [pc, #500]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f76:	4a7c      	ldr	r2, [pc, #496]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005f78:	f043 0301 	orr.w	r3, r3, #1
 8005f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f7e:	e02d      	b.n	8005fdc <HAL_RCC_OscConfig+0x5e0>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10c      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x5a6>
 8005f88:	4b77      	ldr	r3, [pc, #476]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8c:	4a76      	ldr	r2, [pc, #472]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f94:	4b74      	ldr	r3, [pc, #464]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f98:	4a73      	ldr	r2, [pc, #460]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005f9a:	f023 0304 	bic.w	r3, r3, #4
 8005f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa0:	e01c      	b.n	8005fdc <HAL_RCC_OscConfig+0x5e0>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x5c8>
 8005faa:	4b6f      	ldr	r3, [pc, #444]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fae:	4a6e      	ldr	r2, [pc, #440]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005fb0:	f043 0304 	orr.w	r3, r3, #4
 8005fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fb6:	4b6c      	ldr	r3, [pc, #432]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fba:	4a6b      	ldr	r2, [pc, #428]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005fbc:	f043 0301 	orr.w	r3, r3, #1
 8005fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fc2:	e00b      	b.n	8005fdc <HAL_RCC_OscConfig+0x5e0>
 8005fc4:	4b68      	ldr	r3, [pc, #416]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc8:	4a67      	ldr	r2, [pc, #412]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005fca:	f023 0301 	bic.w	r3, r3, #1
 8005fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd0:	4b65      	ldr	r3, [pc, #404]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd4:	4a64      	ldr	r2, [pc, #400]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8005fd6:	f023 0304 	bic.w	r3, r3, #4
 8005fda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d015      	beq.n	8006010 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe4:	f7fb ff0e 	bl	8001e04 <HAL_GetTick>
 8005fe8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fea:	e00a      	b.n	8006002 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fec:	f7fb ff0a 	bl	8001e04 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e14e      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006002:	4b59      	ldr	r3, [pc, #356]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0ee      	beq.n	8005fec <HAL_RCC_OscConfig+0x5f0>
 800600e:	e014      	b.n	800603a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006010:	f7fb fef8 	bl	8001e04 <HAL_GetTick>
 8006014:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006016:	e00a      	b.n	800602e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006018:	f7fb fef4 	bl	8001e04 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006026:	4293      	cmp	r3, r2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e138      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800602e:	4b4e      	ldr	r3, [pc, #312]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1ee      	bne.n	8006018 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 812d 	beq.w	800629e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006044:	4b48      	ldr	r3, [pc, #288]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800604c:	2b18      	cmp	r3, #24
 800604e:	f000 80bd 	beq.w	80061cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	2b02      	cmp	r3, #2
 8006058:	f040 809e 	bne.w	8006198 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605c:	4b42      	ldr	r3, [pc, #264]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a41      	ldr	r2, [pc, #260]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006068:	f7fb fecc 	bl	8001e04 <HAL_GetTick>
 800606c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006070:	f7fb fec8 	bl	8001e04 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e10e      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006082:	4b39      	ldr	r3, [pc, #228]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800608e:	4b36      	ldr	r3, [pc, #216]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006090:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006092:	4b37      	ldr	r3, [pc, #220]	@ (8006170 <HAL_RCC_OscConfig+0x774>)
 8006094:	4013      	ands	r3, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800609e:	0112      	lsls	r2, r2, #4
 80060a0:	430a      	orrs	r2, r1
 80060a2:	4931      	ldr	r1, [pc, #196]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ac:	3b01      	subs	r3, #1
 80060ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b6:	3b01      	subs	r3, #1
 80060b8:	025b      	lsls	r3, r3, #9
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c2:	3b01      	subs	r3, #1
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d0:	3b01      	subs	r3, #1
 80060d2:	061b      	lsls	r3, r3, #24
 80060d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80060d8:	4923      	ldr	r1, [pc, #140]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80060de:	4b22      	ldr	r3, [pc, #136]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 80060e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e2:	4a21      	ldr	r2, [pc, #132]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 80060ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ee:	4b21      	ldr	r3, [pc, #132]	@ (8006174 <HAL_RCC_OscConfig+0x778>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80060f6:	00d2      	lsls	r2, r2, #3
 80060f8:	491b      	ldr	r1, [pc, #108]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80060fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006102:	f023 020c 	bic.w	r2, r3, #12
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	4917      	ldr	r1, [pc, #92]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 800610c:	4313      	orrs	r3, r2
 800610e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006110:	4b15      	ldr	r3, [pc, #84]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	f023 0202 	bic.w	r2, r3, #2
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611c:	4912      	ldr	r1, [pc, #72]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 800611e:	4313      	orrs	r3, r2
 8006120:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006122:	4b11      	ldr	r3, [pc, #68]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006126:	4a10      	ldr	r2, [pc, #64]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800612c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800612e:	4b0e      	ldr	r3, [pc, #56]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006132:	4a0d      	ldr	r2, [pc, #52]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006138:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800613a:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	4a0a      	ldr	r2, [pc, #40]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006144:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006146:	4b08      	ldr	r3, [pc, #32]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614a:	4a07      	ldr	r2, [pc, #28]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 800614c:	f043 0301 	orr.w	r3, r3, #1
 8006150:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006152:	4b05      	ldr	r3, [pc, #20]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a04      	ldr	r2, [pc, #16]	@ (8006168 <HAL_RCC_OscConfig+0x76c>)
 8006158:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800615c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615e:	f7fb fe51 	bl	8001e04 <HAL_GetTick>
 8006162:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006164:	e011      	b.n	800618a <HAL_RCC_OscConfig+0x78e>
 8006166:	bf00      	nop
 8006168:	58024400 	.word	0x58024400
 800616c:	58024800 	.word	0x58024800
 8006170:	fffffc0c 	.word	0xfffffc0c
 8006174:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006178:	f7fb fe44 	bl	8001e04 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e08a      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800618a:	4b47      	ldr	r3, [pc, #284]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0x77c>
 8006196:	e082      	b.n	800629e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006198:	4b43      	ldr	r3, [pc, #268]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a42      	ldr	r2, [pc, #264]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 800619e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fb fe2e 	bl	8001e04 <HAL_GetTick>
 80061a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ac:	f7fb fe2a 	bl	8001e04 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e070      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061be:	4b3a      	ldr	r3, [pc, #232]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x7b0>
 80061ca:	e068      	b.n	800629e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061cc:	4b36      	ldr	r3, [pc, #216]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 80061ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061d2:	4b35      	ldr	r3, [pc, #212]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 80061d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d031      	beq.n	8006244 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f003 0203 	and.w	r2, r3, #3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d12a      	bne.n	8006244 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	091b      	lsrs	r3, r3, #4
 80061f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d122      	bne.n	8006244 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006208:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800620a:	429a      	cmp	r2, r3
 800620c:	d11a      	bne.n	8006244 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	0a5b      	lsrs	r3, r3, #9
 8006212:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800621a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800621c:	429a      	cmp	r2, r3
 800621e:	d111      	bne.n	8006244 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	0c1b      	lsrs	r3, r3, #16
 8006224:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800622e:	429a      	cmp	r2, r3
 8006230:	d108      	bne.n	8006244 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	0e1b      	lsrs	r3, r3, #24
 8006236:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006240:	429a      	cmp	r2, r3
 8006242:	d001      	beq.n	8006248 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e02b      	b.n	80062a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006248:	4b17      	ldr	r3, [pc, #92]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 800624a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800624c:	08db      	lsrs	r3, r3, #3
 800624e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006252:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	429a      	cmp	r2, r3
 800625c:	d01f      	beq.n	800629e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800625e:	4b12      	ldr	r3, [pc, #72]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	4a11      	ldr	r2, [pc, #68]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 8006264:	f023 0301 	bic.w	r3, r3, #1
 8006268:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800626a:	f7fb fdcb 	bl	8001e04 <HAL_GetTick>
 800626e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006270:	bf00      	nop
 8006272:	f7fb fdc7 	bl	8001e04 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	4293      	cmp	r3, r2
 800627c:	d0f9      	beq.n	8006272 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800627e:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 8006280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006282:	4b0a      	ldr	r3, [pc, #40]	@ (80062ac <HAL_RCC_OscConfig+0x8b0>)
 8006284:	4013      	ands	r3, r2
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800628a:	00d2      	lsls	r2, r2, #3
 800628c:	4906      	ldr	r1, [pc, #24]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 800628e:	4313      	orrs	r3, r2
 8006290:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006292:	4b05      	ldr	r3, [pc, #20]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 8006294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006296:	4a04      	ldr	r2, [pc, #16]	@ (80062a8 <HAL_RCC_OscConfig+0x8ac>)
 8006298:	f043 0301 	orr.w	r3, r3, #1
 800629c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3730      	adds	r7, #48	@ 0x30
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	58024400 	.word	0x58024400
 80062ac:	ffff0007 	.word	0xffff0007

080062b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e19c      	b.n	80065fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062c4:	4b8a      	ldr	r3, [pc, #552]	@ (80064f0 <HAL_RCC_ClockConfig+0x240>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d910      	bls.n	80062f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d2:	4b87      	ldr	r3, [pc, #540]	@ (80064f0 <HAL_RCC_ClockConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f023 020f 	bic.w	r2, r3, #15
 80062da:	4985      	ldr	r1, [pc, #532]	@ (80064f0 <HAL_RCC_ClockConfig+0x240>)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	4313      	orrs	r3, r2
 80062e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e2:	4b83      	ldr	r3, [pc, #524]	@ (80064f0 <HAL_RCC_ClockConfig+0x240>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d001      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e184      	b.n	80065fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d010      	beq.n	8006322 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	4b7b      	ldr	r3, [pc, #492]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800630c:	429a      	cmp	r2, r3
 800630e:	d908      	bls.n	8006322 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006310:	4b78      	ldr	r3, [pc, #480]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	4975      	ldr	r1, [pc, #468]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 800631e:	4313      	orrs	r3, r2
 8006320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d010      	beq.n	8006350 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695a      	ldr	r2, [r3, #20]
 8006332:	4b70      	ldr	r3, [pc, #448]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800633a:	429a      	cmp	r2, r3
 800633c:	d908      	bls.n	8006350 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800633e:	4b6d      	ldr	r3, [pc, #436]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	496a      	ldr	r1, [pc, #424]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 800634c:	4313      	orrs	r3, r2
 800634e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	d010      	beq.n	800637e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	4b64      	ldr	r3, [pc, #400]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006368:	429a      	cmp	r2, r3
 800636a:	d908      	bls.n	800637e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800636c:	4b61      	ldr	r3, [pc, #388]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	495e      	ldr	r1, [pc, #376]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 800637a:	4313      	orrs	r3, r2
 800637c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d010      	beq.n	80063ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69da      	ldr	r2, [r3, #28]
 800638e:	4b59      	ldr	r3, [pc, #356]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006396:	429a      	cmp	r2, r3
 8006398:	d908      	bls.n	80063ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800639a:	4b56      	ldr	r3, [pc, #344]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	4953      	ldr	r1, [pc, #332]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d010      	beq.n	80063da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	4b4d      	ldr	r3, [pc, #308]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d908      	bls.n	80063da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063c8:	4b4a      	ldr	r3, [pc, #296]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	f023 020f 	bic.w	r2, r3, #15
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4947      	ldr	r1, [pc, #284]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d055      	beq.n	8006492 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063e6:	4b43      	ldr	r3, [pc, #268]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	4940      	ldr	r1, [pc, #256]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d107      	bne.n	8006410 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006400:	4b3c      	ldr	r3, [pc, #240]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d121      	bne.n	8006450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e0f6      	b.n	80065fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d107      	bne.n	8006428 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006418:	4b36      	ldr	r3, [pc, #216]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d115      	bne.n	8006450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0ea      	b.n	80065fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d107      	bne.n	8006440 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006430:	4b30      	ldr	r3, [pc, #192]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d109      	bne.n	8006450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e0de      	b.n	80065fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006440:	4b2c      	ldr	r3, [pc, #176]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e0d6      	b.n	80065fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006450:	4b28      	ldr	r3, [pc, #160]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f023 0207 	bic.w	r2, r3, #7
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4925      	ldr	r1, [pc, #148]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 800645e:	4313      	orrs	r3, r2
 8006460:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006462:	f7fb fccf 	bl	8001e04 <HAL_GetTick>
 8006466:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006468:	e00a      	b.n	8006480 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800646a:	f7fb fccb 	bl	8001e04 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006478:	4293      	cmp	r3, r2
 800647a:	d901      	bls.n	8006480 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e0be      	b.n	80065fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006480:	4b1c      	ldr	r3, [pc, #112]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	429a      	cmp	r2, r3
 8006490:	d1eb      	bne.n	800646a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d010      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	4b14      	ldr	r3, [pc, #80]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d208      	bcs.n	80064c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ae:	4b11      	ldr	r3, [pc, #68]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f023 020f 	bic.w	r2, r3, #15
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	490e      	ldr	r1, [pc, #56]	@ (80064f4 <HAL_RCC_ClockConfig+0x244>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064c0:	4b0b      	ldr	r3, [pc, #44]	@ (80064f0 <HAL_RCC_ClockConfig+0x240>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 030f 	and.w	r3, r3, #15
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d214      	bcs.n	80064f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ce:	4b08      	ldr	r3, [pc, #32]	@ (80064f0 <HAL_RCC_ClockConfig+0x240>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f023 020f 	bic.w	r2, r3, #15
 80064d6:	4906      	ldr	r1, [pc, #24]	@ (80064f0 <HAL_RCC_ClockConfig+0x240>)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	4313      	orrs	r3, r2
 80064dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064de:	4b04      	ldr	r3, [pc, #16]	@ (80064f0 <HAL_RCC_ClockConfig+0x240>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d005      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e086      	b.n	80065fe <HAL_RCC_ClockConfig+0x34e>
 80064f0:	52002000 	.word	0x52002000
 80064f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d010      	beq.n	8006526 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	4b3f      	ldr	r3, [pc, #252]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006510:	429a      	cmp	r2, r3
 8006512:	d208      	bcs.n	8006526 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006514:	4b3c      	ldr	r3, [pc, #240]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	4939      	ldr	r1, [pc, #228]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 8006522:	4313      	orrs	r3, r2
 8006524:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d010      	beq.n	8006554 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695a      	ldr	r2, [r3, #20]
 8006536:	4b34      	ldr	r3, [pc, #208]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800653e:	429a      	cmp	r2, r3
 8006540:	d208      	bcs.n	8006554 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006542:	4b31      	ldr	r3, [pc, #196]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	492e      	ldr	r1, [pc, #184]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 8006550:	4313      	orrs	r3, r2
 8006552:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b00      	cmp	r3, #0
 800655e:	d010      	beq.n	8006582 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699a      	ldr	r2, [r3, #24]
 8006564:	4b28      	ldr	r3, [pc, #160]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800656c:	429a      	cmp	r2, r3
 800656e:	d208      	bcs.n	8006582 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006570:	4b25      	ldr	r3, [pc, #148]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	4922      	ldr	r1, [pc, #136]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 800657e:	4313      	orrs	r3, r2
 8006580:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d010      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	69da      	ldr	r2, [r3, #28]
 8006592:	4b1d      	ldr	r3, [pc, #116]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800659a:	429a      	cmp	r2, r3
 800659c:	d208      	bcs.n	80065b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800659e:	4b1a      	ldr	r3, [pc, #104]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	4917      	ldr	r1, [pc, #92]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065b0:	f000 f834 	bl	800661c <HAL_RCC_GetSysClockFreq>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b14      	ldr	r3, [pc, #80]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	4912      	ldr	r1, [pc, #72]	@ (800660c <HAL_RCC_ClockConfig+0x35c>)
 80065c2:	5ccb      	ldrb	r3, [r1, r3]
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006608 <HAL_RCC_ClockConfig+0x358>)
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	4a0d      	ldr	r2, [pc, #52]	@ (800660c <HAL_RCC_ClockConfig+0x35c>)
 80065d8:	5cd3      	ldrb	r3, [r2, r3]
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
 80065e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006610 <HAL_RCC_ClockConfig+0x360>)
 80065e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006614 <HAL_RCC_ClockConfig+0x364>)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80065ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <HAL_RCC_ClockConfig+0x368>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fb fbbc 	bl	8001d70 <HAL_InitTick>
 80065f8:	4603      	mov	r3, r0
 80065fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	58024400 	.word	0x58024400
 800660c:	08012518 	.word	0x08012518
 8006610:	24000004 	.word	0x24000004
 8006614:	24000000 	.word	0x24000000
 8006618:	2400007c 	.word	0x2400007c

0800661c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800661c:	b480      	push	{r7}
 800661e:	b089      	sub	sp, #36	@ 0x24
 8006620:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006622:	4bb3      	ldr	r3, [pc, #716]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800662a:	2b18      	cmp	r3, #24
 800662c:	f200 8155 	bhi.w	80068da <HAL_RCC_GetSysClockFreq+0x2be>
 8006630:	a201      	add	r2, pc, #4	@ (adr r2, 8006638 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	0800669d 	.word	0x0800669d
 800663c:	080068db 	.word	0x080068db
 8006640:	080068db 	.word	0x080068db
 8006644:	080068db 	.word	0x080068db
 8006648:	080068db 	.word	0x080068db
 800664c:	080068db 	.word	0x080068db
 8006650:	080068db 	.word	0x080068db
 8006654:	080068db 	.word	0x080068db
 8006658:	080066c3 	.word	0x080066c3
 800665c:	080068db 	.word	0x080068db
 8006660:	080068db 	.word	0x080068db
 8006664:	080068db 	.word	0x080068db
 8006668:	080068db 	.word	0x080068db
 800666c:	080068db 	.word	0x080068db
 8006670:	080068db 	.word	0x080068db
 8006674:	080068db 	.word	0x080068db
 8006678:	080066c9 	.word	0x080066c9
 800667c:	080068db 	.word	0x080068db
 8006680:	080068db 	.word	0x080068db
 8006684:	080068db 	.word	0x080068db
 8006688:	080068db 	.word	0x080068db
 800668c:	080068db 	.word	0x080068db
 8006690:	080068db 	.word	0x080068db
 8006694:	080068db 	.word	0x080068db
 8006698:	080066cf 	.word	0x080066cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800669c:	4b94      	ldr	r3, [pc, #592]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d009      	beq.n	80066bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066a8:	4b91      	ldr	r3, [pc, #580]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	08db      	lsrs	r3, r3, #3
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	4a90      	ldr	r2, [pc, #576]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066b4:	fa22 f303 	lsr.w	r3, r2, r3
 80066b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80066ba:	e111      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066bc:	4b8d      	ldr	r3, [pc, #564]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066be:	61bb      	str	r3, [r7, #24]
      break;
 80066c0:	e10e      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80066c2:	4b8d      	ldr	r3, [pc, #564]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066c4:	61bb      	str	r3, [r7, #24]
      break;
 80066c6:	e10b      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80066c8:	4b8c      	ldr	r3, [pc, #560]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80066ca:	61bb      	str	r3, [r7, #24]
      break;
 80066cc:	e108      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066ce:	4b88      	ldr	r3, [pc, #544]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80066d8:	4b85      	ldr	r3, [pc, #532]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066dc:	091b      	lsrs	r3, r3, #4
 80066de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80066e4:	4b82      	ldr	r3, [pc, #520]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066ee:	4b80      	ldr	r3, [pc, #512]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f2:	08db      	lsrs	r3, r3, #3
 80066f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
 80066fe:	ee07 3a90 	vmov	s15, r3
 8006702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006706:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80e1 	beq.w	80068d4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b02      	cmp	r3, #2
 8006716:	f000 8083 	beq.w	8006820 <HAL_RCC_GetSysClockFreq+0x204>
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b02      	cmp	r3, #2
 800671e:	f200 80a1 	bhi.w	8006864 <HAL_RCC_GetSysClockFreq+0x248>
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_RCC_GetSysClockFreq+0x114>
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d056      	beq.n	80067dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800672e:	e099      	b.n	8006864 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006730:	4b6f      	ldr	r3, [pc, #444]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d02d      	beq.n	8006798 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800673c:	4b6c      	ldr	r3, [pc, #432]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	08db      	lsrs	r3, r3, #3
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	4a6b      	ldr	r2, [pc, #428]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006748:	fa22 f303 	lsr.w	r3, r2, r3
 800674c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006766:	4b62      	ldr	r3, [pc, #392]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006776:	ed97 6a02 	vldr	s12, [r7, #8]
 800677a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006900 <HAL_RCC_GetSysClockFreq+0x2e4>
 800677e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800678a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006792:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006796:	e087      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006904 <HAL_RCC_GetSysClockFreq+0x2e8>
 80067a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067aa:	4b51      	ldr	r3, [pc, #324]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80067be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006900 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067da:	e065      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ee:	4b40      	ldr	r3, [pc, #256]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006802:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006900 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800681e:	e043      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800690c <HAL_RCC_GetSysClockFreq+0x2f0>
 800682e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006832:	4b2f      	ldr	r3, [pc, #188]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006842:	ed97 6a02 	vldr	s12, [r7, #8]
 8006846:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006900 <HAL_RCC_GetSysClockFreq+0x2e4>
 800684a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006862:	e021      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006908 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006876:	4b1e      	ldr	r3, [pc, #120]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006886:	ed97 6a02 	vldr	s12, [r7, #8]
 800688a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006900 <HAL_RCC_GetSysClockFreq+0x2e4>
 800688e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800689a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80068a8:	4b11      	ldr	r3, [pc, #68]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ac:	0a5b      	lsrs	r3, r3, #9
 80068ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068b2:	3301      	adds	r3, #1
 80068b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80068c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068cc:	ee17 3a90 	vmov	r3, s15
 80068d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80068d2:	e005      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	61bb      	str	r3, [r7, #24]
      break;
 80068d8:	e002      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80068da:	4b07      	ldr	r3, [pc, #28]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068dc:	61bb      	str	r3, [r7, #24]
      break;
 80068de:	bf00      	nop
  }

  return sysclockfreq;
 80068e0:	69bb      	ldr	r3, [r7, #24]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3724      	adds	r7, #36	@ 0x24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	58024400 	.word	0x58024400
 80068f4:	03d09000 	.word	0x03d09000
 80068f8:	003d0900 	.word	0x003d0900
 80068fc:	017d7840 	.word	0x017d7840
 8006900:	46000000 	.word	0x46000000
 8006904:	4c742400 	.word	0x4c742400
 8006908:	4a742400 	.word	0x4a742400
 800690c:	4bbebc20 	.word	0x4bbebc20

08006910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006916:	f7ff fe81 	bl	800661c <HAL_RCC_GetSysClockFreq>
 800691a:	4602      	mov	r2, r0
 800691c:	4b10      	ldr	r3, [pc, #64]	@ (8006960 <HAL_RCC_GetHCLKFreq+0x50>)
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	0a1b      	lsrs	r3, r3, #8
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	490f      	ldr	r1, [pc, #60]	@ (8006964 <HAL_RCC_GetHCLKFreq+0x54>)
 8006928:	5ccb      	ldrb	r3, [r1, r3]
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	fa22 f303 	lsr.w	r3, r2, r3
 8006932:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006934:	4b0a      	ldr	r3, [pc, #40]	@ (8006960 <HAL_RCC_GetHCLKFreq+0x50>)
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	4a09      	ldr	r2, [pc, #36]	@ (8006964 <HAL_RCC_GetHCLKFreq+0x54>)
 800693e:	5cd3      	ldrb	r3, [r2, r3]
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	fa22 f303 	lsr.w	r3, r2, r3
 800694a:	4a07      	ldr	r2, [pc, #28]	@ (8006968 <HAL_RCC_GetHCLKFreq+0x58>)
 800694c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800694e:	4a07      	ldr	r2, [pc, #28]	@ (800696c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006954:	4b04      	ldr	r3, [pc, #16]	@ (8006968 <HAL_RCC_GetHCLKFreq+0x58>)
 8006956:	681b      	ldr	r3, [r3, #0]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	58024400 	.word	0x58024400
 8006964:	08012518 	.word	0x08012518
 8006968:	24000004 	.word	0x24000004
 800696c:	24000000 	.word	0x24000000

08006970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006974:	f7ff ffcc 	bl	8006910 <HAL_RCC_GetHCLKFreq>
 8006978:	4602      	mov	r2, r0
 800697a:	4b06      	ldr	r3, [pc, #24]	@ (8006994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	091b      	lsrs	r3, r3, #4
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	4904      	ldr	r1, [pc, #16]	@ (8006998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006986:	5ccb      	ldrb	r3, [r1, r3]
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006990:	4618      	mov	r0, r3
 8006992:	bd80      	pop	{r7, pc}
 8006994:	58024400 	.word	0x58024400
 8006998:	08012518 	.word	0x08012518

0800699c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80069a0:	f7ff ffb6 	bl	8006910 <HAL_RCC_GetHCLKFreq>
 80069a4:	4602      	mov	r2, r0
 80069a6:	4b06      	ldr	r3, [pc, #24]	@ (80069c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	0a1b      	lsrs	r3, r3, #8
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	4904      	ldr	r1, [pc, #16]	@ (80069c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80069b2:	5ccb      	ldrb	r3, [r1, r3]
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80069bc:	4618      	mov	r0, r3
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	58024400 	.word	0x58024400
 80069c4:	08012518 	.word	0x08012518

080069c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069cc:	b0ca      	sub	sp, #296	@ 0x128
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069da:	2300      	movs	r3, #0
 80069dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80069ec:	2500      	movs	r5, #0
 80069ee:	ea54 0305 	orrs.w	r3, r4, r5
 80069f2:	d049      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80069f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069fe:	d02f      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a04:	d828      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a0a:	d01a      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a10:	d822      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a1a:	d007      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a1c:	e01c      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a1e:	4bb8      	ldr	r3, [pc, #736]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	4ab7      	ldr	r2, [pc, #732]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a2a:	e01a      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a30:	3308      	adds	r3, #8
 8006a32:	2102      	movs	r1, #2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f002 fb61 	bl	80090fc <RCCEx_PLL2_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a40:	e00f      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a46:	3328      	adds	r3, #40	@ 0x28
 8006a48:	2102      	movs	r1, #2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f002 fc08 	bl	8009260 <RCCEx_PLL3_Config>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a56:	e004      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a5e:	e000      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a6a:	4ba5      	ldr	r3, [pc, #660]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a78:	4aa1      	ldr	r2, [pc, #644]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a7e:	e003      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006a94:	f04f 0900 	mov.w	r9, #0
 8006a98:	ea58 0309 	orrs.w	r3, r8, r9
 8006a9c:	d047      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d82a      	bhi.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006ac5 	.word	0x08006ac5
 8006ab4:	08006ad3 	.word	0x08006ad3
 8006ab8:	08006ae9 	.word	0x08006ae9
 8006abc:	08006b07 	.word	0x08006b07
 8006ac0:	08006b07 	.word	0x08006b07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac4:	4b8e      	ldr	r3, [pc, #568]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac8:	4a8d      	ldr	r2, [pc, #564]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ad0:	e01a      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	f002 fb0e 	bl	80090fc <RCCEx_PLL2_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ae6:	e00f      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aec:	3328      	adds	r3, #40	@ 0x28
 8006aee:	2100      	movs	r1, #0
 8006af0:	4618      	mov	r0, r3
 8006af2:	f002 fbb5 	bl	8009260 <RCCEx_PLL3_Config>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006afc:	e004      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b04:	e000      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10a      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b10:	4b7b      	ldr	r3, [pc, #492]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b14:	f023 0107 	bic.w	r1, r3, #7
 8006b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1e:	4a78      	ldr	r2, [pc, #480]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b20:	430b      	orrs	r3, r1
 8006b22:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b24:	e003      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006b3a:	f04f 0b00 	mov.w	fp, #0
 8006b3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006b42:	d04c      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b4e:	d030      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b54:	d829      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b56:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b58:	d02d      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b5c:	d825      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b5e:	2b80      	cmp	r3, #128	@ 0x80
 8006b60:	d018      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006b62:	2b80      	cmp	r3, #128	@ 0x80
 8006b64:	d821      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006b6a:	2b40      	cmp	r3, #64	@ 0x40
 8006b6c:	d007      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006b6e:	e01c      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b70:	4b63      	ldr	r3, [pc, #396]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	4a62      	ldr	r2, [pc, #392]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b7c:	e01c      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b82:	3308      	adds	r3, #8
 8006b84:	2100      	movs	r1, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f002 fab8 	bl	80090fc <RCCEx_PLL2_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b92:	e011      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b98:	3328      	adds	r3, #40	@ 0x28
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f002 fb5f 	bl	8009260 <RCCEx_PLL3_Config>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ba8:	e006      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bb0:	e002      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006bb2:	bf00      	nop
 8006bb4:	e000      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bce:	4a4c      	ldr	r2, [pc, #304]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006bd4:	e003      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006bea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006bf4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	d053      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c0a:	d035      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006c0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c10:	d82e      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c12:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c16:	d031      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006c18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c1c:	d828      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c22:	d01a      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006c24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c28:	d822      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006c2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c32:	d007      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006c34:	e01c      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c36:	4b32      	ldr	r3, [pc, #200]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	4a31      	ldr	r2, [pc, #196]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c42:	e01c      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c48:	3308      	adds	r3, #8
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f002 fa55 	bl	80090fc <RCCEx_PLL2_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c58:	e011      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5e:	3328      	adds	r3, #40	@ 0x28
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f002 fafc 	bl	8009260 <RCCEx_PLL3_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c6e:	e006      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c76:	e002      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c78:	bf00      	nop
 8006c7a:	e000      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c86:	4b1e      	ldr	r3, [pc, #120]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c8a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c96:	4a1a      	ldr	r2, [pc, #104]	@ (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c9c:	e003      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006cb2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006cbc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	d056      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006cce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cd2:	d038      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006cd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cd8:	d831      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006cde:	d034      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006ce0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ce4:	d82b      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ce6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cea:	d01d      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006cec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cf0:	d825      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006cf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cfa:	d00a      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006cfc:	e01f      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cfe:	bf00      	nop
 8006d00:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d04:	4ba2      	ldr	r3, [pc, #648]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d08:	4aa1      	ldr	r2, [pc, #644]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d10:	e01c      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d16:	3308      	adds	r3, #8
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f002 f9ee 	bl	80090fc <RCCEx_PLL2_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d26:	e011      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2c:	3328      	adds	r3, #40	@ 0x28
 8006d2e:	2100      	movs	r1, #0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f002 fa95 	bl	8009260 <RCCEx_PLL3_Config>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d3c:	e006      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d44:	e002      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d46:	bf00      	nop
 8006d48:	e000      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10b      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d54:	4b8e      	ldr	r3, [pc, #568]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d64:	4a8a      	ldr	r2, [pc, #552]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d66:	430b      	orrs	r3, r1
 8006d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d6a:	e003      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d84:	2300      	movs	r3, #0
 8006d86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006d8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4313      	orrs	r3, r2
 8006d92:	d03a      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d9a:	2b30      	cmp	r3, #48	@ 0x30
 8006d9c:	d01f      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006d9e:	2b30      	cmp	r3, #48	@ 0x30
 8006da0:	d819      	bhi.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d00c      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d815      	bhi.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d019      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006dae:	2b10      	cmp	r3, #16
 8006db0:	d111      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006db2:	4b77      	ldr	r3, [pc, #476]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	4a76      	ldr	r2, [pc, #472]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006dbe:	e011      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	2102      	movs	r1, #2
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f002 f997 	bl	80090fc <RCCEx_PLL2_Config>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006dd4:	e006      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ddc:	e002      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006dde:	bf00      	nop
 8006de0:	e000      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006dec:	4b68      	ldr	r3, [pc, #416]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dfa:	4a65      	ldr	r2, [pc, #404]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e00:	e003      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e20:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4313      	orrs	r3, r2
 8006e28:	d051      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e34:	d035      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006e36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e3a:	d82e      	bhi.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e40:	d031      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006e42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e46:	d828      	bhi.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e4c:	d01a      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e52:	d822      	bhi.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e5c:	d007      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006e5e:	e01c      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e60:	4b4b      	ldr	r3, [pc, #300]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	4a4a      	ldr	r2, [pc, #296]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e6c:	e01c      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e72:	3308      	adds	r3, #8
 8006e74:	2100      	movs	r1, #0
 8006e76:	4618      	mov	r0, r3
 8006e78:	f002 f940 	bl	80090fc <RCCEx_PLL2_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e82:	e011      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e88:	3328      	adds	r3, #40	@ 0x28
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f002 f9e7 	bl	8009260 <RCCEx_PLL3_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e98:	e006      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ea0:	e002      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006ea2:	bf00      	nop
 8006ea4:	e000      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006eb0:	4b37      	ldr	r3, [pc, #220]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eb4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ebe:	4a34      	ldr	r2, [pc, #208]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ec4:	e003      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006eda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ee4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006ee8:	460b      	mov	r3, r1
 8006eea:	4313      	orrs	r3, r2
 8006eec:	d056      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ef8:	d033      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006efa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006efe:	d82c      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f04:	d02f      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006f06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f0a:	d826      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f10:	d02b      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006f12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f16:	d820      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f1c:	d012      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006f1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f22:	d81a      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d022      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f2c:	d115      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f32:	3308      	adds	r3, #8
 8006f34:	2101      	movs	r1, #1
 8006f36:	4618      	mov	r0, r3
 8006f38:	f002 f8e0 	bl	80090fc <RCCEx_PLL2_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f42:	e015      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f48:	3328      	adds	r3, #40	@ 0x28
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f002 f987 	bl	8009260 <RCCEx_PLL3_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f58:	e00a      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f60:	e006      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f62:	bf00      	nop
 8006f64:	e004      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f66:	bf00      	nop
 8006f68:	e002      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f6a:	bf00      	nop
 8006f6c:	e000      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10d      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f78:	4b05      	ldr	r3, [pc, #20]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f86:	4a02      	ldr	r2, [pc, #8]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f8c:	e006      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006f8e:	bf00      	nop
 8006f90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fac:	2300      	movs	r3, #0
 8006fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fb2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	d055      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fc8:	d033      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fce:	d82c      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd4:	d02f      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fda:	d826      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fdc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fe0:	d02b      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006fe2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fe6:	d820      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006fe8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fec:	d012      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ff2:	d81a      	bhi.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d022      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006ff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ffc:	d115      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007002:	3308      	adds	r3, #8
 8007004:	2101      	movs	r1, #1
 8007006:	4618      	mov	r0, r3
 8007008:	f002 f878 	bl	80090fc <RCCEx_PLL2_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007012:	e015      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007018:	3328      	adds	r3, #40	@ 0x28
 800701a:	2101      	movs	r1, #1
 800701c:	4618      	mov	r0, r3
 800701e:	f002 f91f 	bl	8009260 <RCCEx_PLL3_Config>
 8007022:	4603      	mov	r3, r0
 8007024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007028:	e00a      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007030:	e006      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007032:	bf00      	nop
 8007034:	e004      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007036:	bf00      	nop
 8007038:	e002      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800703a:	bf00      	nop
 800703c:	e000      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800703e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10b      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007048:	4ba3      	ldr	r3, [pc, #652]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800704a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007058:	4a9f      	ldr	r2, [pc, #636]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800705a:	430b      	orrs	r3, r1
 800705c:	6593      	str	r3, [r2, #88]	@ 0x58
 800705e:	e003      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007064:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007078:	2300      	movs	r3, #0
 800707a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800707e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007082:	460b      	mov	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	d037      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800708e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007092:	d00e      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007094:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007098:	d816      	bhi.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d018      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800709e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070a2:	d111      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a4:	4b8c      	ldr	r3, [pc, #560]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	4a8b      	ldr	r2, [pc, #556]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070b0:	e00f      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b6:	3308      	adds	r3, #8
 80070b8:	2101      	movs	r1, #1
 80070ba:	4618      	mov	r0, r3
 80070bc:	f002 f81e 	bl	80090fc <RCCEx_PLL2_Config>
 80070c0:	4603      	mov	r3, r0
 80070c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070c6:	e004      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070ce:	e000      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80070d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10a      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070da:	4b7f      	ldr	r3, [pc, #508]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e8:	4a7b      	ldr	r2, [pc, #492]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ea:	430b      	orrs	r3, r1
 80070ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80070ee:	e003      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007108:	2300      	movs	r3, #0
 800710a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800710e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007112:	460b      	mov	r3, r1
 8007114:	4313      	orrs	r3, r2
 8007116:	d039      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800711e:	2b03      	cmp	r3, #3
 8007120:	d81c      	bhi.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007122:	a201      	add	r2, pc, #4	@ (adr r2, 8007128 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007128:	08007165 	.word	0x08007165
 800712c:	08007139 	.word	0x08007139
 8007130:	08007147 	.word	0x08007147
 8007134:	08007165 	.word	0x08007165
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007138:	4b67      	ldr	r3, [pc, #412]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800713a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713c:	4a66      	ldr	r2, [pc, #408]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800713e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007142:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007144:	e00f      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714a:	3308      	adds	r3, #8
 800714c:	2102      	movs	r1, #2
 800714e:	4618      	mov	r0, r3
 8007150:	f001 ffd4 	bl	80090fc <RCCEx_PLL2_Config>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800715a:	e004      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007162:	e000      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800716e:	4b5a      	ldr	r3, [pc, #360]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007172:	f023 0103 	bic.w	r1, r3, #3
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800717c:	4a56      	ldr	r2, [pc, #344]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800717e:	430b      	orrs	r3, r1
 8007180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007182:	e003      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007198:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800719c:	2300      	movs	r3, #0
 800719e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80071a6:	460b      	mov	r3, r1
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f000 809f 	beq.w	80072ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071ae:	4b4b      	ldr	r3, [pc, #300]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a4a      	ldr	r2, [pc, #296]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80071b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071ba:	f7fa fe23 	bl	8001e04 <HAL_GetTick>
 80071be:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071c2:	e00b      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c4:	f7fa fe1e 	bl	8001e04 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b64      	cmp	r3, #100	@ 0x64
 80071d2:	d903      	bls.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071da:	e005      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071dc:	4b3f      	ldr	r3, [pc, #252]	@ (80072dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0ed      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80071e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d179      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071f0:	4b39      	ldr	r3, [pc, #228]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071fc:	4053      	eors	r3, r2
 80071fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007202:	2b00      	cmp	r3, #0
 8007204:	d015      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007206:	4b34      	ldr	r3, [pc, #208]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800720e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007212:	4b31      	ldr	r3, [pc, #196]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007216:	4a30      	ldr	r2, [pc, #192]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800721c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800721e:	4b2e      	ldr	r3, [pc, #184]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007222:	4a2d      	ldr	r2, [pc, #180]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007228:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800722a:	4a2b      	ldr	r2, [pc, #172]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800722c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007230:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007236:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800723a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800723e:	d118      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fa fde0 	bl	8001e04 <HAL_GetTick>
 8007244:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007248:	e00d      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800724a:	f7fa fddb 	bl	8001e04 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007254:	1ad2      	subs	r2, r2, r3
 8007256:	f241 3388 	movw	r3, #5000	@ 0x1388
 800725a:	429a      	cmp	r2, r3
 800725c:	d903      	bls.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007264:	e005      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007266:	4b1c      	ldr	r3, [pc, #112]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0eb      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007276:	2b00      	cmp	r3, #0
 8007278:	d129      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800727a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007286:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800728a:	d10e      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800728c:	4b12      	ldr	r3, [pc, #72]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007298:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800729c:	091a      	lsrs	r2, r3, #4
 800729e:	4b10      	ldr	r3, [pc, #64]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	4a0d      	ldr	r2, [pc, #52]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072a4:	430b      	orrs	r3, r1
 80072a6:	6113      	str	r3, [r2, #16]
 80072a8:	e005      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80072aa:	4b0b      	ldr	r3, [pc, #44]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	4a0a      	ldr	r2, [pc, #40]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80072b4:	6113      	str	r3, [r2, #16]
 80072b6:	4b08      	ldr	r3, [pc, #32]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072c6:	4a04      	ldr	r2, [pc, #16]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072c8:	430b      	orrs	r3, r1
 80072ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80072cc:	e00e      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80072d6:	e009      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80072d8:	58024400 	.word	0x58024400
 80072dc:	58024800 	.word	0x58024800
 80072e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	f002 0301 	and.w	r3, r2, #1
 80072f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072fc:	2300      	movs	r3, #0
 80072fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007302:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007306:	460b      	mov	r3, r1
 8007308:	4313      	orrs	r3, r2
 800730a:	f000 8089 	beq.w	8007420 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800730e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007314:	2b28      	cmp	r3, #40	@ 0x28
 8007316:	d86b      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007318:	a201      	add	r2, pc, #4	@ (adr r2, 8007320 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	080073f9 	.word	0x080073f9
 8007324:	080073f1 	.word	0x080073f1
 8007328:	080073f1 	.word	0x080073f1
 800732c:	080073f1 	.word	0x080073f1
 8007330:	080073f1 	.word	0x080073f1
 8007334:	080073f1 	.word	0x080073f1
 8007338:	080073f1 	.word	0x080073f1
 800733c:	080073f1 	.word	0x080073f1
 8007340:	080073c5 	.word	0x080073c5
 8007344:	080073f1 	.word	0x080073f1
 8007348:	080073f1 	.word	0x080073f1
 800734c:	080073f1 	.word	0x080073f1
 8007350:	080073f1 	.word	0x080073f1
 8007354:	080073f1 	.word	0x080073f1
 8007358:	080073f1 	.word	0x080073f1
 800735c:	080073f1 	.word	0x080073f1
 8007360:	080073db 	.word	0x080073db
 8007364:	080073f1 	.word	0x080073f1
 8007368:	080073f1 	.word	0x080073f1
 800736c:	080073f1 	.word	0x080073f1
 8007370:	080073f1 	.word	0x080073f1
 8007374:	080073f1 	.word	0x080073f1
 8007378:	080073f1 	.word	0x080073f1
 800737c:	080073f1 	.word	0x080073f1
 8007380:	080073f9 	.word	0x080073f9
 8007384:	080073f1 	.word	0x080073f1
 8007388:	080073f1 	.word	0x080073f1
 800738c:	080073f1 	.word	0x080073f1
 8007390:	080073f1 	.word	0x080073f1
 8007394:	080073f1 	.word	0x080073f1
 8007398:	080073f1 	.word	0x080073f1
 800739c:	080073f1 	.word	0x080073f1
 80073a0:	080073f9 	.word	0x080073f9
 80073a4:	080073f1 	.word	0x080073f1
 80073a8:	080073f1 	.word	0x080073f1
 80073ac:	080073f1 	.word	0x080073f1
 80073b0:	080073f1 	.word	0x080073f1
 80073b4:	080073f1 	.word	0x080073f1
 80073b8:	080073f1 	.word	0x080073f1
 80073bc:	080073f1 	.word	0x080073f1
 80073c0:	080073f9 	.word	0x080073f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c8:	3308      	adds	r3, #8
 80073ca:	2101      	movs	r1, #1
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 fe95 	bl	80090fc <RCCEx_PLL2_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073d8:	e00f      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073de:	3328      	adds	r3, #40	@ 0x28
 80073e0:	2101      	movs	r1, #1
 80073e2:	4618      	mov	r0, r3
 80073e4:	f001 ff3c 	bl	8009260 <RCCEx_PLL3_Config>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073ee:	e004      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073f6:	e000      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80073f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007402:	4bbf      	ldr	r3, [pc, #764]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007406:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007410:	4abb      	ldr	r2, [pc, #748]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007412:	430b      	orrs	r3, r1
 8007414:	6553      	str	r3, [r2, #84]	@ 0x54
 8007416:	e003      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800741c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f002 0302 	and.w	r3, r2, #2
 800742c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007430:	2300      	movs	r3, #0
 8007432:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007436:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800743a:	460b      	mov	r3, r1
 800743c:	4313      	orrs	r3, r2
 800743e:	d041      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007446:	2b05      	cmp	r3, #5
 8007448:	d824      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800744a:	a201      	add	r2, pc, #4	@ (adr r2, 8007450 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	0800749d 	.word	0x0800749d
 8007454:	08007469 	.word	0x08007469
 8007458:	0800747f 	.word	0x0800747f
 800745c:	0800749d 	.word	0x0800749d
 8007460:	0800749d 	.word	0x0800749d
 8007464:	0800749d 	.word	0x0800749d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746c:	3308      	adds	r3, #8
 800746e:	2101      	movs	r1, #1
 8007470:	4618      	mov	r0, r3
 8007472:	f001 fe43 	bl	80090fc <RCCEx_PLL2_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800747c:	e00f      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800747e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007482:	3328      	adds	r3, #40	@ 0x28
 8007484:	2101      	movs	r1, #1
 8007486:	4618      	mov	r0, r3
 8007488:	f001 feea 	bl	8009260 <RCCEx_PLL3_Config>
 800748c:	4603      	mov	r3, r0
 800748e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007492:	e004      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800749a:	e000      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800749c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800749e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80074a6:	4b96      	ldr	r3, [pc, #600]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074aa:	f023 0107 	bic.w	r1, r3, #7
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074b4:	4a92      	ldr	r2, [pc, #584]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074b6:	430b      	orrs	r3, r1
 80074b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80074ba:	e003      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	f002 0304 	and.w	r3, r2, #4
 80074d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074d4:	2300      	movs	r3, #0
 80074d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80074de:	460b      	mov	r3, r1
 80074e0:	4313      	orrs	r3, r2
 80074e2:	d044      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074ec:	2b05      	cmp	r3, #5
 80074ee:	d825      	bhi.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80074f0:	a201      	add	r2, pc, #4	@ (adr r2, 80074f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80074f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f6:	bf00      	nop
 80074f8:	08007545 	.word	0x08007545
 80074fc:	08007511 	.word	0x08007511
 8007500:	08007527 	.word	0x08007527
 8007504:	08007545 	.word	0x08007545
 8007508:	08007545 	.word	0x08007545
 800750c:	08007545 	.word	0x08007545
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007514:	3308      	adds	r3, #8
 8007516:	2101      	movs	r1, #1
 8007518:	4618      	mov	r0, r3
 800751a:	f001 fdef 	bl	80090fc <RCCEx_PLL2_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007524:	e00f      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752a:	3328      	adds	r3, #40	@ 0x28
 800752c:	2101      	movs	r1, #1
 800752e:	4618      	mov	r0, r3
 8007530:	f001 fe96 	bl	8009260 <RCCEx_PLL3_Config>
 8007534:	4603      	mov	r3, r0
 8007536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800753a:	e004      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007542:	e000      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10b      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800754e:	4b6c      	ldr	r3, [pc, #432]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007552:	f023 0107 	bic.w	r1, r3, #7
 8007556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800755e:	4a68      	ldr	r2, [pc, #416]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007560:	430b      	orrs	r3, r1
 8007562:	6593      	str	r3, [r2, #88]	@ 0x58
 8007564:	e003      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800756a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800756e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	f002 0320 	and.w	r3, r2, #32
 800757a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800757e:	2300      	movs	r3, #0
 8007580:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007584:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007588:	460b      	mov	r3, r1
 800758a:	4313      	orrs	r3, r2
 800758c:	d055      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007596:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800759a:	d033      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800759c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075a0:	d82c      	bhi.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a6:	d02f      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80075a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ac:	d826      	bhi.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075b2:	d02b      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80075b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075b8:	d820      	bhi.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075be:	d012      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80075c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075c4:	d81a      	bhi.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d022      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80075ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075ce:	d115      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d4:	3308      	adds	r3, #8
 80075d6:	2100      	movs	r1, #0
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 fd8f 	bl	80090fc <RCCEx_PLL2_Config>
 80075de:	4603      	mov	r3, r0
 80075e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075e4:	e015      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ea:	3328      	adds	r3, #40	@ 0x28
 80075ec:	2102      	movs	r1, #2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f001 fe36 	bl	8009260 <RCCEx_PLL3_Config>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075fa:	e00a      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007602:	e006      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007604:	bf00      	nop
 8007606:	e004      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007608:	bf00      	nop
 800760a:	e002      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800760c:	bf00      	nop
 800760e:	e000      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10b      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800761a:	4b39      	ldr	r3, [pc, #228]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800761c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800761e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762a:	4a35      	ldr	r2, [pc, #212]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800762c:	430b      	orrs	r3, r1
 800762e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007630:	e003      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800763a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800764a:	2300      	movs	r3, #0
 800764c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007650:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007654:	460b      	mov	r3, r1
 8007656:	4313      	orrs	r3, r2
 8007658:	d058      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007662:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007666:	d033      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007668:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800766c:	d82c      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800766e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007672:	d02f      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007678:	d826      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800767a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800767e:	d02b      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007680:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007684:	d820      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800768a:	d012      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800768c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007690:	d81a      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d022      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800769a:	d115      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800769c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a0:	3308      	adds	r3, #8
 80076a2:	2100      	movs	r1, #0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 fd29 	bl	80090fc <RCCEx_PLL2_Config>
 80076aa:	4603      	mov	r3, r0
 80076ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076b0:	e015      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b6:	3328      	adds	r3, #40	@ 0x28
 80076b8:	2102      	movs	r1, #2
 80076ba:	4618      	mov	r0, r3
 80076bc:	f001 fdd0 	bl	8009260 <RCCEx_PLL3_Config>
 80076c0:	4603      	mov	r3, r0
 80076c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076c6:	e00a      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076ce:	e006      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076d0:	bf00      	nop
 80076d2:	e004      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076d4:	bf00      	nop
 80076d6:	e002      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076d8:	bf00      	nop
 80076da:	e000      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80076dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10e      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076e6:	4b06      	ldr	r3, [pc, #24]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076f6:	4a02      	ldr	r2, [pc, #8]	@ (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076f8:	430b      	orrs	r3, r1
 80076fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80076fc:	e006      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80076fe:	bf00      	nop
 8007700:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007708:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800771c:	2300      	movs	r3, #0
 800771e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007722:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007726:	460b      	mov	r3, r1
 8007728:	4313      	orrs	r3, r2
 800772a:	d055      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800772c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007730:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007734:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007738:	d033      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800773a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800773e:	d82c      	bhi.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007744:	d02f      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800774a:	d826      	bhi.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800774c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007750:	d02b      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007752:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007756:	d820      	bhi.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007758:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800775c:	d012      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800775e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007762:	d81a      	bhi.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007764:	2b00      	cmp	r3, #0
 8007766:	d022      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800776c:	d115      	bne.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007772:	3308      	adds	r3, #8
 8007774:	2100      	movs	r1, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f001 fcc0 	bl	80090fc <RCCEx_PLL2_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007782:	e015      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007788:	3328      	adds	r3, #40	@ 0x28
 800778a:	2102      	movs	r1, #2
 800778c:	4618      	mov	r0, r3
 800778e:	f001 fd67 	bl	8009260 <RCCEx_PLL3_Config>
 8007792:	4603      	mov	r3, r0
 8007794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007798:	e00a      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077a0:	e006      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077a2:	bf00      	nop
 80077a4:	e004      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077a6:	bf00      	nop
 80077a8:	e002      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077aa:	bf00      	nop
 80077ac:	e000      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80077ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10b      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80077b8:	4ba1      	ldr	r3, [pc, #644]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077c8:	4a9d      	ldr	r2, [pc, #628]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ca:	430b      	orrs	r3, r1
 80077cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80077ce:	e003      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f002 0308 	and.w	r3, r2, #8
 80077e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077e8:	2300      	movs	r3, #0
 80077ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80077f2:	460b      	mov	r3, r1
 80077f4:	4313      	orrs	r3, r2
 80077f6:	d01e      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80077f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007804:	d10c      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780a:	3328      	adds	r3, #40	@ 0x28
 800780c:	2102      	movs	r1, #2
 800780e:	4618      	mov	r0, r3
 8007810:	f001 fd26 	bl	8009260 <RCCEx_PLL3_Config>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007820:	4b87      	ldr	r3, [pc, #540]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007824:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007830:	4a83      	ldr	r2, [pc, #524]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007832:	430b      	orrs	r3, r1
 8007834:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f002 0310 	and.w	r3, r2, #16
 8007842:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007846:	2300      	movs	r3, #0
 8007848:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800784c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007850:	460b      	mov	r3, r1
 8007852:	4313      	orrs	r3, r2
 8007854:	d01e      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800785e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007862:	d10c      	bne.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007868:	3328      	adds	r3, #40	@ 0x28
 800786a:	2102      	movs	r1, #2
 800786c:	4618      	mov	r0, r3
 800786e:	f001 fcf7 	bl	8009260 <RCCEx_PLL3_Config>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800787e:	4b70      	ldr	r3, [pc, #448]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007882:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800788e:	4a6c      	ldr	r2, [pc, #432]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007890:	430b      	orrs	r3, r1
 8007892:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80078a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078a4:	2300      	movs	r3, #0
 80078a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80078ae:	460b      	mov	r3, r1
 80078b0:	4313      	orrs	r3, r2
 80078b2:	d03e      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078c0:	d022      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80078c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078c6:	d81b      	bhi.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80078cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d0:	d00b      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80078d2:	e015      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d8:	3308      	adds	r3, #8
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 fc0d 	bl	80090fc <RCCEx_PLL2_Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078e8:	e00f      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ee:	3328      	adds	r3, #40	@ 0x28
 80078f0:	2102      	movs	r1, #2
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 fcb4 	bl	8009260 <RCCEx_PLL3_Config>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078fe:	e004      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007906:	e000      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800790a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10b      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007912:	4b4b      	ldr	r3, [pc, #300]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007916:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800791a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007922:	4a47      	ldr	r2, [pc, #284]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007924:	430b      	orrs	r3, r1
 8007926:	6593      	str	r3, [r2, #88]	@ 0x58
 8007928:	e003      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800792a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800792e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800793e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007940:	2300      	movs	r3, #0
 8007942:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007944:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007948:	460b      	mov	r3, r1
 800794a:	4313      	orrs	r3, r2
 800794c:	d03b      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800794e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007956:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800795a:	d01f      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800795c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007960:	d818      	bhi.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007966:	d003      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007968:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800796c:	d007      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800796e:	e011      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007970:	4b33      	ldr	r3, [pc, #204]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	4a32      	ldr	r2, [pc, #200]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800797a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800797c:	e00f      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800797e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007982:	3328      	adds	r3, #40	@ 0x28
 8007984:	2101      	movs	r1, #1
 8007986:	4618      	mov	r0, r3
 8007988:	f001 fc6a 	bl	8009260 <RCCEx_PLL3_Config>
 800798c:	4603      	mov	r3, r0
 800798e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007992:	e004      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800799a:	e000      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800799c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800799e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10b      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079a6:	4b26      	ldr	r3, [pc, #152]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80079ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b6:	4a22      	ldr	r2, [pc, #136]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079b8:	430b      	orrs	r3, r1
 80079ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80079bc:	e003      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80079d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80079d4:	2300      	movs	r3, #0
 80079d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80079d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80079dc:	460b      	mov	r3, r1
 80079de:	4313      	orrs	r3, r2
 80079e0:	d034      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f0:	d007      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80079f2:	e011      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f4:	4b12      	ldr	r3, [pc, #72]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f8:	4a11      	ldr	r2, [pc, #68]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a00:	e00e      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a06:	3308      	adds	r3, #8
 8007a08:	2102      	movs	r1, #2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f001 fb76 	bl	80090fc <RCCEx_PLL2_Config>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a16:	e003      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10d      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a28:	4b05      	ldr	r3, [pc, #20]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a36:	4a02      	ldr	r2, [pc, #8]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a3c:	e006      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007a3e:	bf00      	nop
 8007a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007a58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007a62:	460b      	mov	r3, r1
 8007a64:	4313      	orrs	r3, r2
 8007a66:	d00c      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6c:	3328      	adds	r3, #40	@ 0x28
 8007a6e:	2102      	movs	r1, #2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 fbf5 	bl	8009260 <RCCEx_PLL3_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a90:	2300      	movs	r3, #0
 8007a92:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	d038      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aaa:	d018      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ab0:	d811      	bhi.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab6:	d014      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007abc:	d80b      	bhi.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d011      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ac6:	d106      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac8:	4bc3      	ldr	r3, [pc, #780]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007acc:	4ac2      	ldr	r2, [pc, #776]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007adc:	e004      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ade:	bf00      	nop
 8007ae0:	e002      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ae2:	bf00      	nop
 8007ae4:	e000      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10b      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007af0:	4bb9      	ldr	r3, [pc, #740]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b00:	4ab5      	ldr	r2, [pc, #724]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b02:	430b      	orrs	r3, r1
 8007b04:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b06:	e003      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b1e:	2300      	movs	r3, #0
 8007b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007b26:	460b      	mov	r3, r1
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	d009      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b2c:	4baa      	ldr	r3, [pc, #680]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b3a:	4aa7      	ldr	r2, [pc, #668]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007b4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b4e:	2300      	movs	r3, #0
 8007b50:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007b56:	460b      	mov	r3, r1
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	d00a      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b5c:	4b9e      	ldr	r3, [pc, #632]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007b6c:	4a9a      	ldr	r2, [pc, #616]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b80:	2300      	movs	r3, #0
 8007b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b84:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	d009      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b8e:	4b92      	ldr	r3, [pc, #584]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b92:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b9c:	4a8e      	ldr	r2, [pc, #568]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007bae:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bb4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	d00e      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bbe:	4b86      	ldr	r3, [pc, #536]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	4a85      	ldr	r2, [pc, #532]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bc4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007bc8:	6113      	str	r3, [r2, #16]
 8007bca:	4b83      	ldr	r3, [pc, #524]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bcc:	6919      	ldr	r1, [r3, #16]
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007bd6:	4a80      	ldr	r2, [pc, #512]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007be8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bea:	2300      	movs	r3, #0
 8007bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	d009      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bf8:	4b77      	ldr	r3, [pc, #476]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bfc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c06:	4a74      	ldr	r2, [pc, #464]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007c22:	460b      	mov	r3, r1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	d00a      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c28:	4b6b      	ldr	r3, [pc, #428]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c2c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c38:	4a67      	ldr	r2, [pc, #412]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c3a:	430b      	orrs	r3, r1
 8007c3c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	2100      	movs	r1, #0
 8007c48:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007c54:	460b      	mov	r3, r1
 8007c56:	4313      	orrs	r3, r2
 8007c58:	d011      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5e:	3308      	adds	r3, #8
 8007c60:	2100      	movs	r1, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f001 fa4a 	bl	80090fc <RCCEx_PLL2_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	2100      	movs	r1, #0
 8007c88:	6239      	str	r1, [r7, #32]
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c90:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c94:	460b      	mov	r3, r1
 8007c96:	4313      	orrs	r3, r2
 8007c98:	d011      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 fa2a 	bl	80090fc <RCCEx_PLL2_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	61b9      	str	r1, [r7, #24]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	61fb      	str	r3, [r7, #28]
 8007cd0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	d011      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cde:	3308      	adds	r3, #8
 8007ce0:	2102      	movs	r1, #2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 fa0a 	bl	80090fc <RCCEx_PLL2_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	2100      	movs	r1, #0
 8007d08:	6139      	str	r1, [r7, #16]
 8007d0a:	f003 0308 	and.w	r3, r3, #8
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d14:	460b      	mov	r3, r1
 8007d16:	4313      	orrs	r3, r2
 8007d18:	d011      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	3328      	adds	r3, #40	@ 0x28
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 fa9c 	bl	8009260 <RCCEx_PLL3_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	2100      	movs	r1, #0
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d54:	460b      	mov	r3, r1
 8007d56:	4313      	orrs	r3, r2
 8007d58:	d011      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	3328      	adds	r3, #40	@ 0x28
 8007d60:	2101      	movs	r1, #1
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 fa7c 	bl	8009260 <RCCEx_PLL3_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	2100      	movs	r1, #0
 8007d88:	6039      	str	r1, [r7, #0]
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	607b      	str	r3, [r7, #4]
 8007d90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d94:	460b      	mov	r3, r1
 8007d96:	4313      	orrs	r3, r2
 8007d98:	d011      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9e:	3328      	adds	r3, #40	@ 0x28
 8007da0:	2102      	movs	r1, #2
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 fa5c 	bl	8009260 <RCCEx_PLL3_Config>
 8007da8:	4603      	mov	r3, r0
 8007daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007dbe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e000      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dd8:	58024400 	.word	0x58024400

08007ddc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b090      	sub	sp, #64	@ 0x40
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007dee:	430b      	orrs	r3, r1
 8007df0:	f040 8094 	bne.w	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007df4:	4b9e      	ldr	r3, [pc, #632]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007df8:	f003 0307 	and.w	r3, r3, #7
 8007dfc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	f200 8087 	bhi.w	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007e06:	a201      	add	r2, pc, #4	@ (adr r2, 8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e21 	.word	0x08007e21
 8007e10:	08007e49 	.word	0x08007e49
 8007e14:	08007e71 	.word	0x08007e71
 8007e18:	08007f0d 	.word	0x08007f0d
 8007e1c:	08007e99 	.word	0x08007e99
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e20:	4b93      	ldr	r3, [pc, #588]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e2c:	d108      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 f810 	bl	8008e58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e3c:	f000 bd45 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e44:	f000 bd41 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e48:	4b89      	ldr	r3, [pc, #548]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e54:	d108      	bne.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e56:	f107 0318 	add.w	r3, r7, #24
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fd54 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e64:	f000 bd31 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e6c:	f000 bd2d 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e70:	4b7f      	ldr	r3, [pc, #508]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e7c:	d108      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e7e:	f107 030c 	add.w	r3, r7, #12
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fe94 	bl	8008bb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e8c:	f000 bd1d 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e94:	f000 bd19 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e98:	4b75      	ldr	r3, [pc, #468]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ea0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ea2:	4b73      	ldr	r3, [pc, #460]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d10c      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d109      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eb4:	4b6e      	ldr	r3, [pc, #440]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	08db      	lsrs	r3, r3, #3
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	4a6d      	ldr	r2, [pc, #436]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ec6:	e01f      	b.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ec8:	4b69      	ldr	r3, [pc, #420]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ed4:	d106      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007edc:	d102      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ede:	4b66      	ldr	r3, [pc, #408]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ee2:	e011      	b.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ee4:	4b62      	ldr	r3, [pc, #392]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ef0:	d106      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ef8:	d102      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007efa:	4b60      	ldr	r3, [pc, #384]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007efe:	e003      	b.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f04:	f000 bce1 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f08:	f000 bcdf 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f10:	f000 bcdb 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f18:	f000 bcd7 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f20:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007f24:	430b      	orrs	r3, r1
 8007f26:	f040 80ad 	bne.w	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007f2a:	4b51      	ldr	r3, [pc, #324]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007f32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f3a:	d056      	beq.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f42:	f200 8090 	bhi.w	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f4a:	f000 8088 	beq.w	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f50:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f52:	f200 8088 	bhi.w	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f58:	2b80      	cmp	r3, #128	@ 0x80
 8007f5a:	d032      	beq.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5e:	2b80      	cmp	r3, #128	@ 0x80
 8007f60:	f200 8081 	bhi.w	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6c:	2b40      	cmp	r3, #64	@ 0x40
 8007f6e:	d014      	beq.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007f70:	e079      	b.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f72:	4b3f      	ldr	r3, [pc, #252]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f7e:	d108      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 ff67 	bl	8008e58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f8e:	f000 bc9c 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f96:	f000 bc98 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f9a:	4b35      	ldr	r3, [pc, #212]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fa6:	d108      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fa8:	f107 0318 	add.w	r3, r7, #24
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fcab 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb6:	f000 bc88 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fbe:	f000 bc84 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fce:	d108      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fd0:	f107 030c 	add.w	r3, r7, #12
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fdeb 	bl	8008bb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fde:	f000 bc74 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fe6:	f000 bc70 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fea:	4b21      	ldr	r3, [pc, #132]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ff2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	d10c      	bne.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008002:	2b00      	cmp	r3, #0
 8008004:	d109      	bne.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008006:	4b1a      	ldr	r3, [pc, #104]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	08db      	lsrs	r3, r3, #3
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	4a18      	ldr	r2, [pc, #96]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008012:	fa22 f303 	lsr.w	r3, r2, r3
 8008016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008018:	e01f      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800801a:	4b15      	ldr	r3, [pc, #84]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008026:	d106      	bne.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800802a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800802e:	d102      	bne.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008030:	4b11      	ldr	r3, [pc, #68]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008034:	e011      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008036:	4b0e      	ldr	r3, [pc, #56]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800803e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008042:	d106      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800804a:	d102      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800804c:	4b0b      	ldr	r3, [pc, #44]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800804e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008050:	e003      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008056:	f000 bc38 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800805a:	f000 bc36 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800805e:	4b08      	ldr	r3, [pc, #32]	@ (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008062:	f000 bc32 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800806a:	f000 bc2e 	b.w	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800806e:	bf00      	nop
 8008070:	58024400 	.word	0x58024400
 8008074:	03d09000 	.word	0x03d09000
 8008078:	003d0900 	.word	0x003d0900
 800807c:	017d7840 	.word	0x017d7840
 8008080:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008088:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800808c:	430b      	orrs	r3, r1
 800808e:	f040 809c 	bne.w	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008092:	4b9e      	ldr	r3, [pc, #632]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008096:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800809a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800809c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080a2:	d054      	beq.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80080a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080aa:	f200 808b 	bhi.w	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80080b4:	f000 8083 	beq.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80080be:	f200 8081 	bhi.w	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080c8:	d02f      	beq.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080d0:	d878      	bhi.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d004      	beq.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80080d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080de:	d012      	beq.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80080e0:	e070      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080e2:	4b8a      	ldr	r3, [pc, #552]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080ee:	d107      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 feaf 	bl	8008e58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080fe:	e3e4      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008104:	e3e1      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008106:	4b81      	ldr	r3, [pc, #516]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800810e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008112:	d107      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008114:	f107 0318 	add.w	r3, r7, #24
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fbf5 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008122:	e3d2      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008128:	e3cf      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800812a:	4b78      	ldr	r3, [pc, #480]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008136:	d107      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008138:	f107 030c 	add.w	r3, r7, #12
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fd37 	bl	8008bb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008146:	e3c0      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008148:	2300      	movs	r3, #0
 800814a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814c:	e3bd      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800814e:	4b6f      	ldr	r3, [pc, #444]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008152:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008156:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008158:	4b6c      	ldr	r3, [pc, #432]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0304 	and.w	r3, r3, #4
 8008160:	2b04      	cmp	r3, #4
 8008162:	d10c      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800816a:	4b68      	ldr	r3, [pc, #416]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	08db      	lsrs	r3, r3, #3
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	4a66      	ldr	r2, [pc, #408]	@ (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008176:	fa22 f303 	lsr.w	r3, r2, r3
 800817a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800817c:	e01e      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800817e:	4b63      	ldr	r3, [pc, #396]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800818a:	d106      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800818c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008192:	d102      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008194:	4b5f      	ldr	r3, [pc, #380]	@ (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008198:	e010      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800819a:	4b5c      	ldr	r3, [pc, #368]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081a6:	d106      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80081a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081ae:	d102      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081b0:	4b59      	ldr	r3, [pc, #356]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80081b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081b4:	e002      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081ba:	e386      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081bc:	e385      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081be:	4b57      	ldr	r3, [pc, #348]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80081c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c2:	e382      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c8:	e37f      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80081ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ce:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80081d2:	430b      	orrs	r3, r1
 80081d4:	f040 80a7 	bne.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80081d8:	4b4c      	ldr	r3, [pc, #304]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081dc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80081e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081e8:	d055      	beq.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081f0:	f200 8096 	bhi.w	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80081f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081fa:	f000 8084 	beq.w	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008204:	f200 808c 	bhi.w	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800820e:	d030      	beq.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008216:	f200 8083 	bhi.w	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008226:	d012      	beq.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008228:	e07a      	b.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800822a:	4b38      	ldr	r3, [pc, #224]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008232:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008236:	d107      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008238:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800823c:	4618      	mov	r0, r3
 800823e:	f000 fe0b 	bl	8008e58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008246:	e340      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008248:	2300      	movs	r3, #0
 800824a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800824c:	e33d      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800824e:	4b2f      	ldr	r3, [pc, #188]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008256:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800825a:	d107      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800825c:	f107 0318 	add.w	r3, r7, #24
 8008260:	4618      	mov	r0, r3
 8008262:	f000 fb51 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800826a:	e32e      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008270:	e32b      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008272:	4b26      	ldr	r3, [pc, #152]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800827a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800827e:	d107      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008280:	f107 030c 	add.w	r3, r7, #12
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fc93 	bl	8008bb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800828e:	e31c      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008294:	e319      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008296:	4b1d      	ldr	r3, [pc, #116]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800829a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800829e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082a0:	4b1a      	ldr	r3, [pc, #104]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d10c      	bne.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80082ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d109      	bne.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082b2:	4b16      	ldr	r3, [pc, #88]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	08db      	lsrs	r3, r3, #3
 80082b8:	f003 0303 	and.w	r3, r3, #3
 80082bc:	4a14      	ldr	r2, [pc, #80]	@ (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80082be:	fa22 f303 	lsr.w	r3, r2, r3
 80082c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082c4:	e01e      	b.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082c6:	4b11      	ldr	r3, [pc, #68]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082d2:	d106      	bne.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80082d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082da:	d102      	bne.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80082de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082e0:	e010      	b.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082e2:	4b0a      	ldr	r3, [pc, #40]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082ee:	d106      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80082f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082f6:	d102      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082f8:	4b07      	ldr	r3, [pc, #28]	@ (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80082fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082fc:	e002      	b.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008302:	e2e2      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008304:	e2e1      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008306:	4b05      	ldr	r3, [pc, #20]	@ (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800830a:	e2de      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800830c:	58024400 	.word	0x58024400
 8008310:	03d09000 	.word	0x03d09000
 8008314:	003d0900 	.word	0x003d0900
 8008318:	017d7840 	.word	0x017d7840
 800831c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008324:	e2d1      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800832a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800832e:	430b      	orrs	r3, r1
 8008330:	f040 809c 	bne.w	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008334:	4b93      	ldr	r3, [pc, #588]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008338:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800833c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800833e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008340:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008344:	d054      	beq.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800834c:	f200 808b 	bhi.w	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008352:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008356:	f000 8083 	beq.w	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008360:	f200 8081 	bhi.w	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800836a:	d02f      	beq.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800836c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008372:	d878      	bhi.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008376:	2b00      	cmp	r3, #0
 8008378:	d004      	beq.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800837a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008380:	d012      	beq.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008382:	e070      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008384:	4b7f      	ldr	r3, [pc, #508]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800838c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008390:	d107      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fd5e 	bl	8008e58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800839c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083a0:	e293      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083a2:	2300      	movs	r3, #0
 80083a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a6:	e290      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083a8:	4b76      	ldr	r3, [pc, #472]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083b4:	d107      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083b6:	f107 0318 	add.w	r3, r7, #24
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 faa4 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c4:	e281      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ca:	e27e      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083cc:	4b6d      	ldr	r3, [pc, #436]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083d8:	d107      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083da:	f107 030c 	add.w	r3, r7, #12
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fbe6 	bl	8008bb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e8:	e26f      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ee:	e26c      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083f0:	4b64      	ldr	r3, [pc, #400]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083fa:	4b62      	ldr	r3, [pc, #392]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0304 	and.w	r3, r3, #4
 8008402:	2b04      	cmp	r3, #4
 8008404:	d10c      	bne.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008408:	2b00      	cmp	r3, #0
 800840a:	d109      	bne.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800840c:	4b5d      	ldr	r3, [pc, #372]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	08db      	lsrs	r3, r3, #3
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	4a5c      	ldr	r2, [pc, #368]	@ (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008418:	fa22 f303 	lsr.w	r3, r2, r3
 800841c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800841e:	e01e      	b.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008420:	4b58      	ldr	r3, [pc, #352]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800842c:	d106      	bne.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800842e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008430:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008434:	d102      	bne.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008436:	4b55      	ldr	r3, [pc, #340]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008438:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800843a:	e010      	b.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800843c:	4b51      	ldr	r3, [pc, #324]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008444:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008448:	d106      	bne.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800844a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008450:	d102      	bne.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008452:	4b4f      	ldr	r3, [pc, #316]	@ (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008456:	e002      	b.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800845c:	e235      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800845e:	e234      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008460:	4b4c      	ldr	r3, [pc, #304]	@ (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008464:	e231      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800846a:	e22e      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800846c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008470:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008474:	430b      	orrs	r3, r1
 8008476:	f040 808f 	bne.w	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800847a:	4b42      	ldr	r3, [pc, #264]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800847c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800847e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008482:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008486:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800848a:	d06b      	beq.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800848c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008492:	d874      	bhi.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800849a:	d056      	beq.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800849c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084a2:	d86c      	bhi.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084aa:	d03b      	beq.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80084ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084b2:	d864      	bhi.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084ba:	d021      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084c2:	d85c      	bhi.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d004      	beq.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80084ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084d0:	d004      	beq.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80084d2:	e054      	b.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80084d4:	f7fe fa4c 	bl	8006970 <HAL_RCC_GetPCLK1Freq>
 80084d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084da:	e1f6      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084dc:	4b29      	ldr	r3, [pc, #164]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084e8:	d107      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ea:	f107 0318 	add.w	r3, r7, #24
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fa0a 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f8:	e1e7      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084fe:	e1e4      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008500:	4b20      	ldr	r3, [pc, #128]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800850c:	d107      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800850e:	f107 030c 	add.w	r3, r7, #12
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fb4c 	bl	8008bb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800851c:	e1d5      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008522:	e1d2      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008524:	4b17      	ldr	r3, [pc, #92]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b04      	cmp	r3, #4
 800852e:	d109      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008530:	4b14      	ldr	r3, [pc, #80]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	08db      	lsrs	r3, r3, #3
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	4a13      	ldr	r2, [pc, #76]	@ (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800853c:	fa22 f303 	lsr.w	r3, r2, r3
 8008540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008542:	e1c2      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008548:	e1bf      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800854a:	4b0e      	ldr	r3, [pc, #56]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008556:	d102      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008558:	4b0c      	ldr	r3, [pc, #48]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800855a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800855c:	e1b5      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008562:	e1b2      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008564:	4b07      	ldr	r3, [pc, #28]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800856c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008570:	d102      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008572:	4b07      	ldr	r3, [pc, #28]	@ (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008576:	e1a8      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800857c:	e1a5      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008582:	e1a2      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008584:	58024400 	.word	0x58024400
 8008588:	03d09000 	.word	0x03d09000
 800858c:	003d0900 	.word	0x003d0900
 8008590:	017d7840 	.word	0x017d7840
 8008594:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800859c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80085a0:	430b      	orrs	r3, r1
 80085a2:	d173      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80085a4:	4b9c      	ldr	r3, [pc, #624]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80085ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80085ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085b4:	d02f      	beq.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80085b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085bc:	d863      	bhi.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80085be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d004      	beq.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085ca:	d012      	beq.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80085cc:	e05b      	b.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085ce:	4b92      	ldr	r3, [pc, #584]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085da:	d107      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085dc:	f107 0318 	add.w	r3, r7, #24
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 f991 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ea:	e16e      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085ec:	2300      	movs	r3, #0
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f0:	e16b      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085f2:	4b89      	ldr	r3, [pc, #548]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085fe:	d107      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008600:	f107 030c 	add.w	r3, r7, #12
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fad3 	bl	8008bb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800860e:	e15c      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008614:	e159      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008616:	4b80      	ldr	r3, [pc, #512]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800861a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800861e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008620:	4b7d      	ldr	r3, [pc, #500]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b04      	cmp	r3, #4
 800862a:	d10c      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800862c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862e:	2b00      	cmp	r3, #0
 8008630:	d109      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008632:	4b79      	ldr	r3, [pc, #484]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	08db      	lsrs	r3, r3, #3
 8008638:	f003 0303 	and.w	r3, r3, #3
 800863c:	4a77      	ldr	r2, [pc, #476]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800863e:	fa22 f303 	lsr.w	r3, r2, r3
 8008642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008644:	e01e      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008646:	4b74      	ldr	r3, [pc, #464]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800864e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008652:	d106      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800865a:	d102      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800865c:	4b70      	ldr	r3, [pc, #448]	@ (8008820 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800865e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008660:	e010      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008662:	4b6d      	ldr	r3, [pc, #436]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800866e:	d106      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008676:	d102      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008678:	4b6a      	ldr	r3, [pc, #424]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800867a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800867c:	e002      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008682:	e122      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008684:	e121      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868a:	e11e      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800868c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008690:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008694:	430b      	orrs	r3, r1
 8008696:	d133      	bne.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008698:	4b5f      	ldr	r3, [pc, #380]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800869a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800869c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80086a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d004      	beq.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80086a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086ae:	d012      	beq.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80086b0:	e023      	b.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086b2:	4b59      	ldr	r3, [pc, #356]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086be:	d107      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fbc7 	bl	8008e58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ce:	e0fc      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d4:	e0f9      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086d6:	4b50      	ldr	r3, [pc, #320]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086e2:	d107      	bne.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086e4:	f107 0318 	add.w	r3, r7, #24
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 f90d 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086f2:	e0ea      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086f4:	2300      	movs	r3, #0
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f8:	e0e7      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086fe:	e0e4      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008704:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008708:	430b      	orrs	r3, r1
 800870a:	f040 808d 	bne.w	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800870e:	4b42      	ldr	r3, [pc, #264]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008712:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008716:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800871e:	d06b      	beq.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008722:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008726:	d874      	bhi.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800872e:	d056      	beq.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008736:	d86c      	bhi.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800873e:	d03b      	beq.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008742:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008746:	d864      	bhi.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800874e:	d021      	beq.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008756:	d85c      	bhi.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875a:	2b00      	cmp	r3, #0
 800875c:	d004      	beq.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800875e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008760:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008764:	d004      	beq.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008766:	e054      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008768:	f000 f8b8 	bl	80088dc <HAL_RCCEx_GetD3PCLK1Freq>
 800876c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800876e:	e0ac      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008770:	4b29      	ldr	r3, [pc, #164]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800877c:	d107      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800877e:	f107 0318 	add.w	r3, r7, #24
 8008782:	4618      	mov	r0, r3
 8008784:	f000 f8c0 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800878c:	e09d      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008792:	e09a      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008794:	4b20      	ldr	r3, [pc, #128]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800879c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087a0:	d107      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087a2:	f107 030c 	add.w	r3, r7, #12
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fa02 	bl	8008bb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087b0:	e08b      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087b6:	e088      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087b8:	4b17      	ldr	r3, [pc, #92]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d109      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087c4:	4b14      	ldr	r3, [pc, #80]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	08db      	lsrs	r3, r3, #3
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	4a13      	ldr	r2, [pc, #76]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80087d0:	fa22 f303 	lsr.w	r3, r2, r3
 80087d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d6:	e078      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087dc:	e075      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087de:	4b0e      	ldr	r3, [pc, #56]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ea:	d102      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80087ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008820 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f0:	e06b      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f6:	e068      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087f8:	4b07      	ldr	r3, [pc, #28]	@ (8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008800:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008804:	d102      	bne.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008806:	4b07      	ldr	r3, [pc, #28]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800880a:	e05e      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008810:	e05b      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008816:	e058      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008818:	58024400 	.word	0x58024400
 800881c:	03d09000 	.word	0x03d09000
 8008820:	003d0900 	.word	0x003d0900
 8008824:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800882c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008830:	430b      	orrs	r3, r1
 8008832:	d148      	bne.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008834:	4b27      	ldr	r3, [pc, #156]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008838:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800883c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008844:	d02a      	beq.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800884c:	d838      	bhi.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800884e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008856:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800885a:	d00d      	beq.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800885c:	e030      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800885e:	4b1d      	ldr	r3, [pc, #116]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008866:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800886a:	d102      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800886c:	4b1a      	ldr	r3, [pc, #104]	@ (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800886e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008870:	e02b      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008876:	e028      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008878:	4b16      	ldr	r3, [pc, #88]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008880:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008884:	d107      	bne.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fae4 	bl	8008e58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008894:	e019      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889a:	e016      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800889c:	4b0d      	ldr	r3, [pc, #52]	@ (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088a8:	d107      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088aa:	f107 0318 	add.w	r3, r7, #24
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 f82a 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088b8:	e007      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088be:	e004      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c4:	e001      	b.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80088ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3740      	adds	r7, #64	@ 0x40
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	58024400 	.word	0x58024400
 80088d8:	017d7840 	.word	0x017d7840

080088dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80088e0:	f7fe f816 	bl	8006910 <HAL_RCC_GetHCLKFreq>
 80088e4:	4602      	mov	r2, r0
 80088e6:	4b06      	ldr	r3, [pc, #24]	@ (8008900 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	091b      	lsrs	r3, r3, #4
 80088ec:	f003 0307 	and.w	r3, r3, #7
 80088f0:	4904      	ldr	r1, [pc, #16]	@ (8008904 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80088f2:	5ccb      	ldrb	r3, [r1, r3]
 80088f4:	f003 031f 	and.w	r3, r3, #31
 80088f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	58024400 	.word	0x58024400
 8008904:	08012518 	.word	0x08012518

08008908 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008908:	b480      	push	{r7}
 800890a:	b089      	sub	sp, #36	@ 0x24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008910:	4ba1      	ldr	r3, [pc, #644]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008914:	f003 0303 	and.w	r3, r3, #3
 8008918:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800891a:	4b9f      	ldr	r3, [pc, #636]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800891c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891e:	0b1b      	lsrs	r3, r3, #12
 8008920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008924:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008926:	4b9c      	ldr	r3, [pc, #624]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892a:	091b      	lsrs	r3, r3, #4
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008932:	4b99      	ldr	r3, [pc, #612]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008936:	08db      	lsrs	r3, r3, #3
 8008938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	fb02 f303 	mul.w	r3, r2, r3
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 8111 	beq.w	8008b78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	2b02      	cmp	r3, #2
 800895a:	f000 8083 	beq.w	8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	2b02      	cmp	r3, #2
 8008962:	f200 80a1 	bhi.w	8008aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d056      	beq.n	8008a20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008972:	e099      	b.n	8008aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008974:	4b88      	ldr	r3, [pc, #544]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d02d      	beq.n	80089dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008980:	4b85      	ldr	r3, [pc, #532]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	08db      	lsrs	r3, r3, #3
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	4a84      	ldr	r2, [pc, #528]	@ (8008b9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800898c:	fa22 f303 	lsr.w	r3, r2, r3
 8008990:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	ee07 3a90 	vmov	s15, r3
 8008998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089aa:	4b7b      	ldr	r3, [pc, #492]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80089be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089da:	e087      	b.n	8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80089ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ee:	4b6a      	ldr	r3, [pc, #424]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a1e:	e065      	b.n	8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a32:	4b59      	ldr	r3, [pc, #356]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a62:	e043      	b.n	8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a76:	4b48      	ldr	r3, [pc, #288]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aa6:	e021      	b.n	8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aba:	4b37      	ldr	r3, [pc, #220]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ace:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008aec:	4b2a      	ldr	r3, [pc, #168]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af0:	0a5b      	lsrs	r3, r3, #9
 8008af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b12:	ee17 2a90 	vmov	r2, s15
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b1e:	0c1b      	lsrs	r3, r3, #16
 8008b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b24:	ee07 3a90 	vmov	s15, r3
 8008b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b40:	ee17 2a90 	vmov	r2, s15
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b48:	4b13      	ldr	r3, [pc, #76]	@ (8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4c:	0e1b      	lsrs	r3, r3, #24
 8008b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b6e:	ee17 2a90 	vmov	r2, s15
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b76:	e008      	b.n	8008b8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	609a      	str	r2, [r3, #8]
}
 8008b8a:	bf00      	nop
 8008b8c:	3724      	adds	r7, #36	@ 0x24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	58024400 	.word	0x58024400
 8008b9c:	03d09000 	.word	0x03d09000
 8008ba0:	46000000 	.word	0x46000000
 8008ba4:	4c742400 	.word	0x4c742400
 8008ba8:	4a742400 	.word	0x4a742400
 8008bac:	4bbebc20 	.word	0x4bbebc20

08008bb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b089      	sub	sp, #36	@ 0x24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bb8:	4ba1      	ldr	r3, [pc, #644]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bbc:	f003 0303 	and.w	r3, r3, #3
 8008bc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008bc2:	4b9f      	ldr	r3, [pc, #636]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc6:	0d1b      	lsrs	r3, r3, #20
 8008bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bcc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008bce:	4b9c      	ldr	r3, [pc, #624]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008bda:	4b99      	ldr	r3, [pc, #612]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bde:	08db      	lsrs	r3, r3, #3
 8008be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	fb02 f303 	mul.w	r3, r2, r3
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 8111 	beq.w	8008e20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	f000 8083 	beq.w	8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	f200 80a1 	bhi.w	8008d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d056      	beq.n	8008cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c1a:	e099      	b.n	8008d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c1c:	4b88      	ldr	r3, [pc, #544]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0320 	and.w	r3, r3, #32
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d02d      	beq.n	8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c28:	4b85      	ldr	r3, [pc, #532]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	08db      	lsrs	r3, r3, #3
 8008c2e:	f003 0303 	and.w	r3, r3, #3
 8008c32:	4a84      	ldr	r2, [pc, #528]	@ (8008e44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c34:	fa22 f303 	lsr.w	r3, r2, r3
 8008c38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	ee07 3a90 	vmov	s15, r3
 8008c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c52:	4b7b      	ldr	r3, [pc, #492]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c82:	e087      	b.n	8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c96:	4b6a      	ldr	r3, [pc, #424]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008caa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cc6:	e065      	b.n	8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cda:	4b59      	ldr	r3, [pc, #356]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d0a:	e043      	b.n	8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1e:	4b48      	ldr	r3, [pc, #288]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d4e:	e021      	b.n	8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d62:	4b37      	ldr	r3, [pc, #220]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d94:	4b2a      	ldr	r3, [pc, #168]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d98:	0a5b      	lsrs	r3, r3, #9
 8008d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dba:	ee17 2a90 	vmov	r2, s15
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc6:	0c1b      	lsrs	r3, r3, #16
 8008dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dcc:	ee07 3a90 	vmov	s15, r3
 8008dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008de8:	ee17 2a90 	vmov	r2, s15
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008df0:	4b13      	ldr	r3, [pc, #76]	@ (8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df4:	0e1b      	lsrs	r3, r3, #24
 8008df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e16:	ee17 2a90 	vmov	r2, s15
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e1e:	e008      	b.n	8008e32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	609a      	str	r2, [r3, #8]
}
 8008e32:	bf00      	nop
 8008e34:	3724      	adds	r7, #36	@ 0x24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	58024400 	.word	0x58024400
 8008e44:	03d09000 	.word	0x03d09000
 8008e48:	46000000 	.word	0x46000000
 8008e4c:	4c742400 	.word	0x4c742400
 8008e50:	4a742400 	.word	0x4a742400
 8008e54:	4bbebc20 	.word	0x4bbebc20

08008e58 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b089      	sub	sp, #36	@ 0x24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e60:	4ba0      	ldr	r3, [pc, #640]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e64:	f003 0303 	and.w	r3, r3, #3
 8008e68:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008e6a:	4b9e      	ldr	r3, [pc, #632]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e6e:	091b      	lsrs	r3, r3, #4
 8008e70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e74:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008e76:	4b9b      	ldr	r3, [pc, #620]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e80:	4b98      	ldr	r3, [pc, #608]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e84:	08db      	lsrs	r3, r3, #3
 8008e86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	fb02 f303 	mul.w	r3, r2, r3
 8008e90:	ee07 3a90 	vmov	s15, r3
 8008e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e98:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f000 8111 	beq.w	80090c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	f000 8083 	beq.w	8008fb2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	f200 80a1 	bhi.w	8008ff6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d056      	beq.n	8008f6e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008ec0:	e099      	b.n	8008ff6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ec2:	4b88      	ldr	r3, [pc, #544]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d02d      	beq.n	8008f2a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ece:	4b85      	ldr	r3, [pc, #532]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	08db      	lsrs	r3, r3, #3
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	4a83      	ldr	r2, [pc, #524]	@ (80090e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008eda:	fa22 f303 	lsr.w	r3, r2, r3
 8008ede:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	ee07 3a90 	vmov	s15, r3
 8008ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef8:	4b7a      	ldr	r3, [pc, #488]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f00:	ee07 3a90 	vmov	s15, r3
 8008f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f08:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f0c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80090ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f24:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f28:	e087      	b.n	800903a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	ee07 3a90 	vmov	s15, r3
 8008f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f34:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80090f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f3c:	4b69      	ldr	r3, [pc, #420]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f44:	ee07 3a90 	vmov	s15, r3
 8008f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f50:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80090ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f6c:	e065      	b.n	800903a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	ee07 3a90 	vmov	s15, r3
 8008f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f78:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80090f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f80:	4b58      	ldr	r3, [pc, #352]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f88:	ee07 3a90 	vmov	s15, r3
 8008f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f90:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f94:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80090ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fb0:	e043      	b.n	800903a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	ee07 3a90 	vmov	s15, r3
 8008fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fbc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80090f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc4:	4b47      	ldr	r3, [pc, #284]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fcc:	ee07 3a90 	vmov	s15, r3
 8008fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fd8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80090ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fe4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ff4:	e021      	b.n	800903a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	ee07 3a90 	vmov	s15, r3
 8008ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009000:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80090f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009008:	4b36      	ldr	r3, [pc, #216]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800900a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800900c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009010:	ee07 3a90 	vmov	s15, r3
 8009014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009018:	ed97 6a03 	vldr	s12, [r7, #12]
 800901c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80090ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009028:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800902c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009034:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009038:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800903a:	4b2a      	ldr	r3, [pc, #168]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800903c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903e:	0a5b      	lsrs	r3, r3, #9
 8009040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009044:	ee07 3a90 	vmov	s15, r3
 8009048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009050:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009054:	edd7 6a07 	vldr	s13, [r7, #28]
 8009058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800905c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009060:	ee17 2a90 	vmov	r2, s15
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009068:	4b1e      	ldr	r3, [pc, #120]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800906a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906c:	0c1b      	lsrs	r3, r3, #16
 800906e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800907e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009082:	edd7 6a07 	vldr	s13, [r7, #28]
 8009086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800908a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800908e:	ee17 2a90 	vmov	r2, s15
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009096:	4b13      	ldr	r3, [pc, #76]	@ (80090e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909a:	0e1b      	lsrs	r3, r3, #24
 800909c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090a0:	ee07 3a90 	vmov	s15, r3
 80090a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090bc:	ee17 2a90 	vmov	r2, s15
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80090c4:	e008      	b.n	80090d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	609a      	str	r2, [r3, #8]
}
 80090d8:	bf00      	nop
 80090da:	3724      	adds	r7, #36	@ 0x24
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	58024400 	.word	0x58024400
 80090e8:	03d09000 	.word	0x03d09000
 80090ec:	46000000 	.word	0x46000000
 80090f0:	4c742400 	.word	0x4c742400
 80090f4:	4a742400 	.word	0x4a742400
 80090f8:	4bbebc20 	.word	0x4bbebc20

080090fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800910a:	4b53      	ldr	r3, [pc, #332]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 800910c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910e:	f003 0303 	and.w	r3, r3, #3
 8009112:	2b03      	cmp	r3, #3
 8009114:	d101      	bne.n	800911a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e099      	b.n	800924e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800911a:	4b4f      	ldr	r3, [pc, #316]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a4e      	ldr	r2, [pc, #312]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 8009120:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009126:	f7f8 fe6d 	bl	8001e04 <HAL_GetTick>
 800912a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800912c:	e008      	b.n	8009140 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800912e:	f7f8 fe69 	bl	8001e04 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d901      	bls.n	8009140 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e086      	b.n	800924e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009140:	4b45      	ldr	r3, [pc, #276]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1f0      	bne.n	800912e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800914c:	4b42      	ldr	r3, [pc, #264]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 800914e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009150:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	031b      	lsls	r3, r3, #12
 800915a:	493f      	ldr	r1, [pc, #252]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 800915c:	4313      	orrs	r3, r2
 800915e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	3b01      	subs	r3, #1
 8009166:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	3b01      	subs	r3, #1
 8009170:	025b      	lsls	r3, r3, #9
 8009172:	b29b      	uxth	r3, r3
 8009174:	431a      	orrs	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	3b01      	subs	r3, #1
 800917c:	041b      	lsls	r3, r3, #16
 800917e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009182:	431a      	orrs	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	3b01      	subs	r3, #1
 800918a:	061b      	lsls	r3, r3, #24
 800918c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009190:	4931      	ldr	r1, [pc, #196]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 8009192:	4313      	orrs	r3, r2
 8009194:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009196:	4b30      	ldr	r3, [pc, #192]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 8009198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	492d      	ldr	r1, [pc, #180]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80091a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 80091aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ac:	f023 0220 	bic.w	r2, r3, #32
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	4928      	ldr	r1, [pc, #160]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80091ba:	4b27      	ldr	r3, [pc, #156]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 80091bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091be:	4a26      	ldr	r2, [pc, #152]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 80091c0:	f023 0310 	bic.w	r3, r3, #16
 80091c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80091c6:	4b24      	ldr	r3, [pc, #144]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 80091c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091ca:	4b24      	ldr	r3, [pc, #144]	@ (800925c <RCCEx_PLL2_Config+0x160>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	69d2      	ldr	r2, [r2, #28]
 80091d2:	00d2      	lsls	r2, r2, #3
 80091d4:	4920      	ldr	r1, [pc, #128]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80091da:	4b1f      	ldr	r3, [pc, #124]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 80091dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091de:	4a1e      	ldr	r2, [pc, #120]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 80091e0:	f043 0310 	orr.w	r3, r3, #16
 80091e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d106      	bne.n	80091fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80091ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 80091ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f0:	4a19      	ldr	r2, [pc, #100]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 80091f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091f8:	e00f      	b.n	800921a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d106      	bne.n	800920e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009200:	4b15      	ldr	r3, [pc, #84]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 8009202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009204:	4a14      	ldr	r2, [pc, #80]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 8009206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800920a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800920c:	e005      	b.n	800921a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800920e:	4b12      	ldr	r3, [pc, #72]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 8009210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009212:	4a11      	ldr	r2, [pc, #68]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 8009214:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009218:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800921a:	4b0f      	ldr	r3, [pc, #60]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a0e      	ldr	r2, [pc, #56]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 8009220:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009226:	f7f8 fded 	bl	8001e04 <HAL_GetTick>
 800922a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800922c:	e008      	b.n	8009240 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800922e:	f7f8 fde9 	bl	8001e04 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	d901      	bls.n	8009240 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e006      	b.n	800924e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009240:	4b05      	ldr	r3, [pc, #20]	@ (8009258 <RCCEx_PLL2_Config+0x15c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0f0      	beq.n	800922e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800924c:	7bfb      	ldrb	r3, [r7, #15]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	58024400 	.word	0x58024400
 800925c:	ffff0007 	.word	0xffff0007

08009260 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800926e:	4b53      	ldr	r3, [pc, #332]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009272:	f003 0303 	and.w	r3, r3, #3
 8009276:	2b03      	cmp	r3, #3
 8009278:	d101      	bne.n	800927e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e099      	b.n	80093b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800927e:	4b4f      	ldr	r3, [pc, #316]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a4e      	ldr	r2, [pc, #312]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800928a:	f7f8 fdbb 	bl	8001e04 <HAL_GetTick>
 800928e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009290:	e008      	b.n	80092a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009292:	f7f8 fdb7 	bl	8001e04 <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	2b02      	cmp	r3, #2
 800929e:	d901      	bls.n	80092a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e086      	b.n	80093b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092a4:	4b45      	ldr	r3, [pc, #276]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1f0      	bne.n	8009292 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80092b0:	4b42      	ldr	r3, [pc, #264]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 80092b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	051b      	lsls	r3, r3, #20
 80092be:	493f      	ldr	r1, [pc, #252]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	025b      	lsls	r3, r3, #9
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	3b01      	subs	r3, #1
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80092e6:	431a      	orrs	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	061b      	lsls	r3, r3, #24
 80092f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80092f4:	4931      	ldr	r1, [pc, #196]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80092fa:	4b30      	ldr	r3, [pc, #192]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 80092fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	492d      	ldr	r1, [pc, #180]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009308:	4313      	orrs	r3, r2
 800930a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800930c:	4b2b      	ldr	r3, [pc, #172]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 800930e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009310:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	4928      	ldr	r1, [pc, #160]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 800931a:	4313      	orrs	r3, r2
 800931c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800931e:	4b27      	ldr	r3, [pc, #156]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009322:	4a26      	ldr	r2, [pc, #152]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009328:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800932a:	4b24      	ldr	r3, [pc, #144]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 800932c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800932e:	4b24      	ldr	r3, [pc, #144]	@ (80093c0 <RCCEx_PLL3_Config+0x160>)
 8009330:	4013      	ands	r3, r2
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	69d2      	ldr	r2, [r2, #28]
 8009336:	00d2      	lsls	r2, r2, #3
 8009338:	4920      	ldr	r1, [pc, #128]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 800933a:	4313      	orrs	r3, r2
 800933c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800933e:	4b1f      	ldr	r3, [pc, #124]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009342:	4a1e      	ldr	r2, [pc, #120]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009348:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d106      	bne.n	800935e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009350:	4b1a      	ldr	r3, [pc, #104]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009354:	4a19      	ldr	r2, [pc, #100]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009356:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800935a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800935c:	e00f      	b.n	800937e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d106      	bne.n	8009372 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009364:	4b15      	ldr	r3, [pc, #84]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009368:	4a14      	ldr	r2, [pc, #80]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 800936a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800936e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009370:	e005      	b.n	800937e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009372:	4b12      	ldr	r3, [pc, #72]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009376:	4a11      	ldr	r2, [pc, #68]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009378:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800937c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800937e:	4b0f      	ldr	r3, [pc, #60]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a0e      	ldr	r2, [pc, #56]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 8009384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800938a:	f7f8 fd3b 	bl	8001e04 <HAL_GetTick>
 800938e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009390:	e008      	b.n	80093a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009392:	f7f8 fd37 	bl	8001e04 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	2b02      	cmp	r3, #2
 800939e:	d901      	bls.n	80093a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e006      	b.n	80093b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093a4:	4b05      	ldr	r3, [pc, #20]	@ (80093bc <RCCEx_PLL3_Config+0x15c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0f0      	beq.n	8009392 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	58024400 	.word	0x58024400
 80093c0:	ffff0007 	.word	0xffff0007

080093c4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d904      	bls.n	80093e2 <HAL_SAI_InitProtocol+0x1e>
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	3b03      	subs	r3, #3
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d812      	bhi.n	8009406 <HAL_SAI_InitProtocol+0x42>
 80093e0:	e008      	b.n	80093f4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	68b9      	ldr	r1, [r7, #8]
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 fdd9 	bl	8009fa0 <SAI_InitI2S>
 80093ee:	4603      	mov	r3, r0
 80093f0:	75fb      	strb	r3, [r7, #23]
      break;
 80093f2:	e00b      	b.n	800940c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	68b9      	ldr	r1, [r7, #8]
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f000 fe82 	bl	800a104 <SAI_InitPCM>
 8009400:	4603      	mov	r3, r0
 8009402:	75fb      	strb	r3, [r7, #23]
      break;
 8009404:	e002      	b.n	800940c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	75fb      	strb	r3, [r7, #23]
      break;
 800940a:	bf00      	nop
  }

  if (status == HAL_OK)
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d104      	bne.n	800941c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 f808 	bl	8009428 <HAL_SAI_Init>
 8009418:	4603      	mov	r3, r0
 800941a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800941c:	7dfb      	ldrb	r3, [r7, #23]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b08a      	sub	sp, #40	@ 0x28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e28e      	b.n	8009958 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800943a:	f7f8 fd13 	bl	8001e64 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009444:	2b01      	cmp	r3, #1
 8009446:	d113      	bne.n	8009470 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a96      	ldr	r2, [pc, #600]	@ (80096a8 <HAL_SAI_Init+0x280>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d004      	beq.n	800945c <HAL_SAI_Init+0x34>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a95      	ldr	r2, [pc, #596]	@ (80096ac <HAL_SAI_Init+0x284>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d107      	bne.n	800946c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009460:	2b01      	cmp	r3, #1
 8009462:	d103      	bne.n	800946c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e273      	b.n	8009958 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a8c      	ldr	r2, [pc, #560]	@ (80096a8 <HAL_SAI_Init+0x280>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d004      	beq.n	8009484 <HAL_SAI_Init+0x5c>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a8c      	ldr	r2, [pc, #560]	@ (80096b0 <HAL_SAI_Init+0x288>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d102      	bne.n	800948a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009484:	4b8b      	ldr	r3, [pc, #556]	@ (80096b4 <HAL_SAI_Init+0x28c>)
 8009486:	61bb      	str	r3, [r7, #24]
 8009488:	e028      	b.n	80094dc <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a8a      	ldr	r2, [pc, #552]	@ (80096b8 <HAL_SAI_Init+0x290>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d004      	beq.n	800949e <HAL_SAI_Init+0x76>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a88      	ldr	r2, [pc, #544]	@ (80096bc <HAL_SAI_Init+0x294>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d102      	bne.n	80094a4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800949e:	4b88      	ldr	r3, [pc, #544]	@ (80096c0 <HAL_SAI_Init+0x298>)
 80094a0:	61bb      	str	r3, [r7, #24]
 80094a2:	e01b      	b.n	80094dc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a86      	ldr	r2, [pc, #536]	@ (80096c4 <HAL_SAI_Init+0x29c>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d004      	beq.n	80094b8 <HAL_SAI_Init+0x90>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a85      	ldr	r2, [pc, #532]	@ (80096c8 <HAL_SAI_Init+0x2a0>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d102      	bne.n	80094be <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 80094b8:	4b84      	ldr	r3, [pc, #528]	@ (80096cc <HAL_SAI_Init+0x2a4>)
 80094ba:	61bb      	str	r3, [r7, #24]
 80094bc:	e00e      	b.n	80094dc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a7a      	ldr	r2, [pc, #488]	@ (80096ac <HAL_SAI_Init+0x284>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d004      	beq.n	80094d2 <HAL_SAI_Init+0xaa>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a80      	ldr	r2, [pc, #512]	@ (80096d0 <HAL_SAI_Init+0x2a8>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d102      	bne.n	80094d8 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 80094d2:	4b80      	ldr	r3, [pc, #512]	@ (80096d4 <HAL_SAI_Init+0x2ac>)
 80094d4:	61bb      	str	r3, [r7, #24]
 80094d6:	e001      	b.n	80094dc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e23d      	b.n	8009958 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d106      	bne.n	80094f6 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7f7 fd61 	bl	8000fb8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 febe 	bl	800a278 <SAI_Disable>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e228      	b.n	8009958 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2202      	movs	r2, #2
 800950a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d00c      	beq.n	8009530 <HAL_SAI_Init+0x108>
 8009516:	2b02      	cmp	r3, #2
 8009518:	d80d      	bhi.n	8009536 <HAL_SAI_Init+0x10e>
 800951a:	2b00      	cmp	r3, #0
 800951c:	d002      	beq.n	8009524 <HAL_SAI_Init+0xfc>
 800951e:	2b01      	cmp	r3, #1
 8009520:	d003      	beq.n	800952a <HAL_SAI_Init+0x102>
 8009522:	e008      	b.n	8009536 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009524:	2300      	movs	r3, #0
 8009526:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009528:	e008      	b.n	800953c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800952a:	2310      	movs	r3, #16
 800952c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800952e:	e005      	b.n	800953c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009530:	2320      	movs	r3, #32
 8009532:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009534:	e002      	b.n	800953c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800953a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	2b05      	cmp	r3, #5
 8009542:	d832      	bhi.n	80095aa <HAL_SAI_Init+0x182>
 8009544:	a201      	add	r2, pc, #4	@ (adr r2, 800954c <HAL_SAI_Init+0x124>)
 8009546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954a:	bf00      	nop
 800954c:	08009565 	.word	0x08009565
 8009550:	0800956b 	.word	0x0800956b
 8009554:	08009573 	.word	0x08009573
 8009558:	0800957b 	.word	0x0800957b
 800955c:	0800958b 	.word	0x0800958b
 8009560:	0800959b 	.word	0x0800959b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	61fb      	str	r3, [r7, #28]
      break;
 8009568:	e022      	b.n	80095b0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800956a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800956e:	61fb      	str	r3, [r7, #28]
      break;
 8009570:	e01e      	b.n	80095b0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009572:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009576:	61fb      	str	r3, [r7, #28]
      break;
 8009578:	e01a      	b.n	80095b0 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800957a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800957e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009582:	f043 0301 	orr.w	r3, r3, #1
 8009586:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009588:	e012      	b.n	80095b0 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800958a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800958e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009592:	f043 0302 	orr.w	r3, r3, #2
 8009596:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009598:	e00a      	b.n	80095b0 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800959a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800959e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80095a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a2:	f043 0303 	orr.w	r3, r3, #3
 80095a6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80095a8:	e002      	b.n	80095b0 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	61fb      	str	r3, [r7, #28]
      break;
 80095ae:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 80c5 	beq.w	800974a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a37      	ldr	r2, [pc, #220]	@ (80096a8 <HAL_SAI_Init+0x280>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d004      	beq.n	80095d8 <HAL_SAI_Init+0x1b0>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a37      	ldr	r2, [pc, #220]	@ (80096b0 <HAL_SAI_Init+0x288>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d106      	bne.n	80095e6 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80095d8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80095dc:	f04f 0100 	mov.w	r1, #0
 80095e0:	f7fe fbfc 	bl	8007ddc <HAL_RCCEx_GetPeriphCLKFreq>
 80095e4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a33      	ldr	r2, [pc, #204]	@ (80096b8 <HAL_SAI_Init+0x290>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d004      	beq.n	80095fa <HAL_SAI_Init+0x1d2>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a31      	ldr	r2, [pc, #196]	@ (80096bc <HAL_SAI_Init+0x294>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d106      	bne.n	8009608 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80095fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80095fe:	f04f 0100 	mov.w	r1, #0
 8009602:	f7fe fbeb 	bl	8007ddc <HAL_RCCEx_GetPeriphCLKFreq>
 8009606:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a2d      	ldr	r2, [pc, #180]	@ (80096c4 <HAL_SAI_Init+0x29c>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d004      	beq.n	800961c <HAL_SAI_Init+0x1f4>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a2c      	ldr	r2, [pc, #176]	@ (80096c8 <HAL_SAI_Init+0x2a0>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d106      	bne.n	800962a <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800961c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009620:	f04f 0100 	mov.w	r1, #0
 8009624:	f7fe fbda 	bl	8007ddc <HAL_RCCEx_GetPeriphCLKFreq>
 8009628:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a1f      	ldr	r2, [pc, #124]	@ (80096ac <HAL_SAI_Init+0x284>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d106      	bne.n	8009642 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009634:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009638:	f04f 0100 	mov.w	r1, #0
 800963c:	f7fe fbce 	bl	8007ddc <HAL_RCCEx_GetPeriphCLKFreq>
 8009640:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a22      	ldr	r2, [pc, #136]	@ (80096d0 <HAL_SAI_Init+0x2a8>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d106      	bne.n	800965a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800964c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009650:	f04f 0100 	mov.w	r1, #0
 8009654:	f7fe fbc2 	bl	8007ddc <HAL_RCCEx_GetPeriphCLKFreq>
 8009658:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009662:	d139      	bne.n	80096d8 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009668:	2b04      	cmp	r3, #4
 800966a:	d102      	bne.n	8009672 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800966c:	2340      	movs	r3, #64	@ 0x40
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	e00a      	b.n	8009688 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009676:	2b08      	cmp	r3, #8
 8009678:	d103      	bne.n	8009682 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800967a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	e002      	b.n	8009688 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009686:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	4619      	mov	r1, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	fb02 f303 	mul.w	r3, r2, r3
 800969e:	fbb1 f3f3 	udiv	r3, r1, r3
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	e030      	b.n	8009708 <HAL_SAI_Init+0x2e0>
 80096a6:	bf00      	nop
 80096a8:	40015804 	.word	0x40015804
 80096ac:	58005404 	.word	0x58005404
 80096b0:	40015824 	.word	0x40015824
 80096b4:	40015800 	.word	0x40015800
 80096b8:	40015c04 	.word	0x40015c04
 80096bc:	40015c24 	.word	0x40015c24
 80096c0:	40015c00 	.word	0x40015c00
 80096c4:	40016004 	.word	0x40016004
 80096c8:	40016024 	.word	0x40016024
 80096cc:	40016000 	.word	0x40016000
 80096d0:	58005424 	.word	0x58005424
 80096d4:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096e0:	d101      	bne.n	80096e6 <HAL_SAI_Init+0x2be>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e000      	b.n	80096e8 <HAL_SAI_Init+0x2c0>
 80096e6:	2301      	movs	r3, #1
 80096e8:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	4619      	mov	r1, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	fb02 f303 	mul.w	r3, r2, r3
 8009700:	021b      	lsls	r3, r3, #8
 8009702:	fbb1 f3f3 	udiv	r3, r1, r3
 8009706:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	4a95      	ldr	r2, [pc, #596]	@ (8009960 <HAL_SAI_Init+0x538>)
 800970c:	fba2 2303 	umull	r2, r3, r2, r3
 8009710:	08da      	lsrs	r2, r3, #3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009716:	6939      	ldr	r1, [r7, #16]
 8009718:	4b91      	ldr	r3, [pc, #580]	@ (8009960 <HAL_SAI_Init+0x538>)
 800971a:	fba3 2301 	umull	r2, r3, r3, r1
 800971e:	08da      	lsrs	r2, r3, #3
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	1aca      	subs	r2, r1, r3
 800972a:	2a08      	cmp	r2, #8
 800972c:	d904      	bls.n	8009738 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800973c:	2b04      	cmp	r3, #4
 800973e:	d104      	bne.n	800974a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009744:	085a      	lsrs	r2, r3, #1
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_SAI_Init+0x332>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	2b02      	cmp	r3, #2
 8009758:	d109      	bne.n	800976e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <HAL_SAI_Init+0x33e>
 8009762:	2300      	movs	r3, #0
 8009764:	e001      	b.n	800976a <HAL_SAI_Init+0x342>
 8009766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800976a:	623b      	str	r3, [r7, #32]
 800976c:	e008      	b.n	8009780 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009772:	2b01      	cmp	r3, #1
 8009774:	d102      	bne.n	800977c <HAL_SAI_Init+0x354>
 8009776:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800977a:	e000      	b.n	800977e <HAL_SAI_Init+0x356>
 800977c:	2300      	movs	r3, #0
 800977e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009780:	f7f8 fb70 	bl	8001e64 <HAL_GetREVID>
 8009784:	4603      	mov	r3, r0
 8009786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800978a:	d331      	bcc.n	80097f0 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6819      	ldr	r1, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4b73      	ldr	r3, [pc, #460]	@ (8009964 <HAL_SAI_Init+0x53c>)
 8009798:	400b      	ands	r3, r1
 800979a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6819      	ldr	r1, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097aa:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80097b0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097b6:	431a      	orrs	r2, r3
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 80097c4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80097d0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d6:	051b      	lsls	r3, r3, #20
 80097d8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80097de:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	430a      	orrs	r2, r1
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	e02d      	b.n	800984c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6819      	ldr	r1, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	4b5b      	ldr	r3, [pc, #364]	@ (8009968 <HAL_SAI_Init+0x540>)
 80097fc:	400b      	ands	r3, r1
 80097fe:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6819      	ldr	r1, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800980e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009814:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800981a:	431a      	orrs	r2, r3
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009828:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009834:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983a:	051b      	lsls	r3, r3, #20
 800983c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009842:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6859      	ldr	r1, [r3, #4]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	4b45      	ldr	r3, [pc, #276]	@ (800996c <HAL_SAI_Init+0x544>)
 8009858:	400b      	ands	r3, r1
 800985a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6859      	ldr	r1, [r3, #4]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	69da      	ldr	r2, [r3, #28]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009870:	431a      	orrs	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6899      	ldr	r1, [r3, #8]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	4b3a      	ldr	r3, [pc, #232]	@ (8009970 <HAL_SAI_Init+0x548>)
 8009886:	400b      	ands	r3, r1
 8009888:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	6899      	ldr	r1, [r3, #8]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009894:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800989a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 80098a0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 80098a6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ac:	3b01      	subs	r3, #1
 80098ae:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80098b0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68d9      	ldr	r1, [r3, #12]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80098c8:	400b      	ands	r3, r1
 80098ca:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68d9      	ldr	r1, [r3, #12]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098da:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098e0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80098e2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098e8:	3b01      	subs	r3, #1
 80098ea:	021b      	lsls	r3, r3, #8
 80098ec:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	430a      	orrs	r2, r1
 80098f4:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009974 <HAL_SAI_Init+0x54c>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d004      	beq.n	800990a <HAL_SAI_Init+0x4e2>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a1c      	ldr	r2, [pc, #112]	@ (8009978 <HAL_SAI_Init+0x550>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d119      	bne.n	800993e <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800990e:	f023 0201 	bic.w	r2, r3, #1
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800991c:	2b01      	cmp	r3, #1
 800991e:	d10e      	bne.n	800993e <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009928:	3b01      	subs	r3, #1
 800992a:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800992c:	431a      	orrs	r2, r3
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009936:	f043 0201 	orr.w	r2, r3, #1
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3728      	adds	r7, #40	@ 0x28
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	cccccccd 	.word	0xcccccccd
 8009964:	f005c010 	.word	0xf005c010
 8009968:	f805c010 	.word	0xf805c010
 800996c:	ffff1ff0 	.word	0xffff1ff0
 8009970:	fff88000 	.word	0xfff88000
 8009974:	40015804 	.word	0x40015804
 8009978:	58005404 	.word	0x58005404

0800997c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800998e:	2b01      	cmp	r3, #1
 8009990:	d101      	bne.n	8009996 <HAL_SAI_Abort+0x1a>
 8009992:	2302      	movs	r3, #2
 8009994:	e07d      	b.n	8009a92 <HAL_SAI_Abort+0x116>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fc6a 	bl	800a278 <SAI_Disable>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099bc:	d14f      	bne.n	8009a5e <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80099cc:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b12      	cmp	r3, #18
 80099d8:	d11d      	bne.n	8009a16 <HAL_SAI_Abort+0x9a>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d018      	beq.n	8009a16 <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f9 f91c 	bl	8002c28 <HAL_DMA_Abort>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00f      	beq.n	8009a16 <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099fe:	2b80      	cmp	r3, #128	@ 0x80
 8009a00:	d009      	beq.n	8009a16 <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b22      	cmp	r3, #34	@ 0x22
 8009a20:	d11d      	bne.n	8009a5e <HAL_SAI_Abort+0xe2>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d018      	beq.n	8009a5e <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f9 f8f8 	bl	8002c28 <HAL_DMA_Abort>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00f      	beq.n	8009a5e <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a46:	2b80      	cmp	r3, #128	@ 0x80
 8009a48:	d009      	beq.n	8009a5e <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2200      	movs	r2, #0
 8009a64:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6e:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f042 0208 	orr.w	r2, r2, #8
 8009a7e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
	...

08009a9c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009aaa:	f7f8 f9ab 	bl	8001e04 <HAL_GetTick>
 8009aae:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <HAL_SAI_Transmit_DMA+0x20>
 8009ab6:	88fb      	ldrh	r3, [r7, #6]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e098      	b.n	8009bf2 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	f040 8091 	bne.w	8009bf0 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d101      	bne.n	8009adc <HAL_SAI_Transmit_DMA+0x40>
 8009ad8:	2302      	movs	r3, #2
 8009ada:	e08a      	b.n	8009bf2 <HAL_SAI_Transmit_DMA+0x156>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	88fa      	ldrh	r2, [r7, #6]
 8009aee:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	88fa      	ldrh	r2, [r7, #6]
 8009af6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2212      	movs	r2, #18
 8009b06:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b10:	4a3a      	ldr	r2, [pc, #232]	@ (8009bfc <HAL_SAI_Transmit_DMA+0x160>)
 8009b12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b1a:	4a39      	ldr	r2, [pc, #228]	@ (8009c00 <HAL_SAI_Transmit_DMA+0x164>)
 8009b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b24:	4a37      	ldr	r2, [pc, #220]	@ (8009c04 <HAL_SAI_Transmit_DMA+0x168>)
 8009b26:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b2e:	2200      	movs	r2, #0
 8009b30:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	331c      	adds	r3, #28
 8009b44:	461a      	mov	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8009b4c:	f7f8 fe02 	bl	8002754 <HAL_DMA_Start_IT>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d005      	beq.n	8009b62 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e047      	b.n	8009bf2 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009b62:	2100      	movs	r1, #0
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 fb4f 	bl	800a208 <SAI_InterruptFlag>
 8009b6a:	4601      	mov	r1, r0
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	691a      	ldr	r2, [r3, #16]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	430a      	orrs	r2, r1
 8009b78:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009b88:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009b8a:	e015      	b.n	8009bb8 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8009b8c:	f7f8 f93a 	bl	8001e04 <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b9a:	d90d      	bls.n	8009bb8 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ba2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e01c      	b.n	8009bf2 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0e2      	beq.n	8009b8c <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d107      	bne.n	8009be4 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009be2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e000      	b.n	8009bf2 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8009bf0:	2302      	movs	r3, #2
  }
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	0800a34d 	.word	0x0800a34d
 8009c00:	0800a2ed 	.word	0x0800a2ed
 8009c04:	0800a369 	.word	0x0800a369

08009c08 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 81a7 	beq.w	8009f6c <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f003 0308 	and.w	r3, r3, #8
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00a      	beq.n	8009c56 <HAL_SAI_IRQHandler+0x4e>
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	f003 0308 	and.w	r3, r3, #8
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d005      	beq.n	8009c56 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4798      	blx	r3
 8009c54:	e18a      	b.n	8009f6c <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01e      	beq.n	8009c9e <HAL_SAI_IRQHandler+0x96>
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d019      	beq.n	8009c9e <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b22      	cmp	r3, #34	@ 0x22
 8009c7c:	d101      	bne.n	8009c82 <HAL_SAI_IRQHandler+0x7a>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e000      	b.n	8009c84 <HAL_SAI_IRQHandler+0x7c>
 8009c82:	2302      	movs	r3, #2
 8009c84:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f978 	bl	8009f8c <HAL_SAI_ErrorCallback>
 8009c9c:	e166      	b.n	8009f6c <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d013      	beq.n	8009cd0 <HAL_SAI_IRQHandler+0xc8>
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f003 0302 	and.w	r3, r3, #2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00e      	beq.n	8009cd0 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8153 	beq.w	8009f6c <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ccc:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8009cce:	e14d      	b.n	8009f6c <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f003 0320 	and.w	r3, r3, #32
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d05b      	beq.n	8009d92 <HAL_SAI_IRQHandler+0x18a>
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	f003 0320 	and.w	r3, r3, #32
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d056      	beq.n	8009d92 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cf2:	f043 0204 	orr.w	r2, r3, #4
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d03e      	beq.n	8009d84 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d018      	beq.n	8009d42 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d16:	4a97      	ldr	r2, [pc, #604]	@ (8009f74 <HAL_SAI_IRQHandler+0x36c>)
 8009d18:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7f9 fa9f 	bl	8003264 <HAL_DMA_Abort_IT>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00a      	beq.n	8009d42 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f925 	bl	8009f8c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 810a 	beq.w	8009f62 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d54:	4a87      	ldr	r2, [pc, #540]	@ (8009f74 <HAL_SAI_IRQHandler+0x36c>)
 8009d56:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7f9 fa80 	bl	8003264 <HAL_DMA_Abort_IT>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 80fb 	beq.w	8009f62 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f905 	bl	8009f8c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009d82:	e0ee      	b.n	8009f62 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff fdf9 	bl	800997c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f8fe 	bl	8009f8c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009d90:	e0e7      	b.n	8009f62 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d05b      	beq.n	8009e54 <HAL_SAI_IRQHandler+0x24c>
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d056      	beq.n	8009e54 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2240      	movs	r2, #64	@ 0x40
 8009dac:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009db4:	f043 0208 	orr.w	r2, r3, #8
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d03e      	beq.n	8009e46 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d018      	beq.n	8009e04 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dd8:	4a66      	ldr	r2, [pc, #408]	@ (8009f74 <HAL_SAI_IRQHandler+0x36c>)
 8009dda:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7f9 fa3e 	bl	8003264 <HAL_DMA_Abort_IT>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009df4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f8c4 	bl	8009f8c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f000 80ab 	beq.w	8009f66 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e16:	4a57      	ldr	r2, [pc, #348]	@ (8009f74 <HAL_SAI_IRQHandler+0x36c>)
 8009e18:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7f9 fa1f 	bl	8003264 <HAL_DMA_Abort_IT>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f000 809c 	beq.w	8009f66 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f8a4 	bl	8009f8c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009e44:	e08f      	b.n	8009f66 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7ff fd98 	bl	800997c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f89d 	bl	8009f8c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009e52:	e088      	b.n	8009f66 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f003 0304 	and.w	r3, r3, #4
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d067      	beq.n	8009f2e <HAL_SAI_IRQHandler+0x326>
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d062      	beq.n	8009f2e <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2204      	movs	r2, #4
 8009e6e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e76:	f043 0220 	orr.w	r2, r3, #32
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d03c      	beq.n	8009f04 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d018      	beq.n	8009ec6 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e9a:	4a36      	ldr	r2, [pc, #216]	@ (8009f74 <HAL_SAI_IRQHandler+0x36c>)
 8009e9c:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7f9 f9dd 	bl	8003264 <HAL_DMA_Abort_IT>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00a      	beq.n	8009ec6 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009eb6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f863 	bl	8009f8c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d04c      	beq.n	8009f6a <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ed6:	4a27      	ldr	r2, [pc, #156]	@ (8009f74 <HAL_SAI_IRQHandler+0x36c>)
 8009ed8:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7f9 f9bf 	bl	8003264 <HAL_DMA_Abort_IT>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d03e      	beq.n	8009f6a <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ef2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f845 	bl	8009f8c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f02:	e032      	b.n	8009f6a <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f04f 32ff 	mov.w	r2, #4294967295
 8009f14:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f830 	bl	8009f8c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f2c:	e01d      	b.n	8009f6a <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f003 0310 	and.w	r3, r3, #16
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d019      	beq.n	8009f6c <HAL_SAI_IRQHandler+0x364>
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f003 0310 	and.w	r3, r3, #16
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d014      	beq.n	8009f6c <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2210      	movs	r2, #16
 8009f48:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f50:	f043 0210 	orr.w	r2, r3, #16
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f816 	bl	8009f8c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8009f60:	e004      	b.n	8009f6c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f62:	bf00      	nop
 8009f64:	e002      	b.n	8009f6c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f66:	bf00      	nop
 8009f68:	e000      	b.n	8009f6c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f6a:	bf00      	nop
}
 8009f6c:	bf00      	nop
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	0800a3c7 	.word	0x0800a3c7

08009f78 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b087      	sub	sp, #28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d003      	beq.n	8009fce <SAI_InitI2S+0x2e>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	d103      	bne.n	8009fd6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	651a      	str	r2, [r3, #80]	@ 0x50
 8009fd4:	e002      	b.n	8009fdc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009fea:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e077      	b.n	800a0f6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d107      	bne.n	800a01c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a018:	665a      	str	r2, [r3, #100]	@ 0x64
 800a01a:	e006      	b.n	800a02a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a022:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b03      	cmp	r3, #3
 800a02e:	d84f      	bhi.n	800a0d0 <SAI_InitI2S+0x130>
 800a030:	a201      	add	r2, pc, #4	@ (adr r2, 800a038 <SAI_InitI2S+0x98>)
 800a032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a036:	bf00      	nop
 800a038:	0800a049 	.word	0x0800a049
 800a03c:	0800a06b 	.word	0x0800a06b
 800a040:	0800a08d 	.word	0x0800a08d
 800a044:	0800a0af 	.word	0x0800a0af
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2280      	movs	r2, #128	@ 0x80
 800a04c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	085b      	lsrs	r3, r3, #1
 800a052:	015a      	lsls	r2, r3, #5
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	085b      	lsrs	r3, r3, #1
 800a05c:	011a      	lsls	r2, r3, #4
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2240      	movs	r2, #64	@ 0x40
 800a066:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a068:	e035      	b.n	800a0d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2280      	movs	r2, #128	@ 0x80
 800a06e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	085b      	lsrs	r3, r3, #1
 800a074:	019a      	lsls	r2, r3, #6
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	085b      	lsrs	r3, r3, #1
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2280      	movs	r2, #128	@ 0x80
 800a088:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a08a:	e024      	b.n	800a0d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	22c0      	movs	r2, #192	@ 0xc0
 800a090:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	085b      	lsrs	r3, r3, #1
 800a096:	019a      	lsls	r2, r3, #6
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	085b      	lsrs	r3, r3, #1
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2280      	movs	r2, #128	@ 0x80
 800a0aa:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a0ac:	e013      	b.n	800a0d6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	22e0      	movs	r2, #224	@ 0xe0
 800a0b2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	085b      	lsrs	r3, r3, #1
 800a0b8:	019a      	lsls	r2, r3, #6
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	085b      	lsrs	r3, r3, #1
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2280      	movs	r2, #128	@ 0x80
 800a0cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a0ce:	e002      	b.n	800a0d6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0d4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d10b      	bne.n	800a0f4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d102      	bne.n	800a0e8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2210      	movs	r2, #16
 800a0e6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d102      	bne.n	800a0f4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2208      	movs	r2, #8
 800a0f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	371c      	adds	r7, #28
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop

0800a104 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d003      	beq.n	800a132 <SAI_InitPCM+0x2e>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d103      	bne.n	800a13a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2201      	movs	r2, #1
 800a136:	651a      	str	r2, [r3, #80]	@ 0x50
 800a138:	e002      	b.n	800a140 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a14c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a154:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a168:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	2b04      	cmp	r3, #4
 800a16e:	d103      	bne.n	800a178 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2201      	movs	r2, #1
 800a174:	659a      	str	r2, [r3, #88]	@ 0x58
 800a176:	e002      	b.n	800a17e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	220d      	movs	r2, #13
 800a17c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2b03      	cmp	r3, #3
 800a182:	d837      	bhi.n	800a1f4 <SAI_InitPCM+0xf0>
 800a184:	a201      	add	r2, pc, #4	@ (adr r2, 800a18c <SAI_InitPCM+0x88>)
 800a186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18a:	bf00      	nop
 800a18c:	0800a19d 	.word	0x0800a19d
 800a190:	0800a1b3 	.word	0x0800a1b3
 800a194:	0800a1c9 	.word	0x0800a1c9
 800a198:	0800a1df 	.word	0x0800a1df
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2280      	movs	r2, #128	@ 0x80
 800a1a0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	011a      	lsls	r2, r3, #4
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2240      	movs	r2, #64	@ 0x40
 800a1ae:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a1b0:	e023      	b.n	800a1fa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2280      	movs	r2, #128	@ 0x80
 800a1b6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2280      	movs	r2, #128	@ 0x80
 800a1c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a1c6:	e018      	b.n	800a1fa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	22c0      	movs	r2, #192	@ 0xc0
 800a1cc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	015a      	lsls	r2, r3, #5
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2280      	movs	r2, #128	@ 0x80
 800a1da:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a1dc:	e00d      	b.n	800a1fa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	22e0      	movs	r2, #224	@ 0xe0
 800a1e2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2280      	movs	r2, #128	@ 0x80
 800a1f0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a1f2:	e002      	b.n	800a1fa <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a1f8:	bf00      	nop
  }

  return status;
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	460b      	mov	r3, r1
 800a212:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a214:	2301      	movs	r3, #1
 800a216:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a218:	78fb      	ldrb	r3, [r7, #3]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d103      	bne.n	800a226 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f043 0308 	orr.w	r3, r3, #8
 800a224:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a22a:	2b08      	cmp	r3, #8
 800a22c:	d10b      	bne.n	800a246 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a232:	2b03      	cmp	r3, #3
 800a234:	d003      	beq.n	800a23e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d103      	bne.n	800a246 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f043 0310 	orr.w	r3, r3, #16
 800a244:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	2b03      	cmp	r3, #3
 800a24c:	d003      	beq.n	800a256 <SAI_InterruptFlag+0x4e>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	2b02      	cmp	r3, #2
 800a254:	d104      	bne.n	800a260 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	e003      	b.n	800a268 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f043 0304 	orr.w	r3, r3, #4
 800a266:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a268:	68fb      	ldr	r3, [r7, #12]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
	...

0800a278 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a280:	4b18      	ldr	r3, [pc, #96]	@ (800a2e4 <SAI_Disable+0x6c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a18      	ldr	r2, [pc, #96]	@ (800a2e8 <SAI_Disable+0x70>)
 800a286:	fba2 2303 	umull	r2, r3, r2, r3
 800a28a:	0b1b      	lsrs	r3, r3, #12
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a2a2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10a      	bne.n	800a2c0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	72fb      	strb	r3, [r7, #11]
      break;
 800a2be:	e009      	b.n	800a2d4 <SAI_Disable+0x5c>
    }
    count--;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1e7      	bne.n	800a2a4 <SAI_Disable+0x2c>

  return status;
 800a2d4:	7afb      	ldrb	r3, [r7, #11]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3714      	adds	r7, #20
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	24000000 	.word	0x24000000
 800a2e8:	95cbec1b 	.word	0x95cbec1b

0800a2ec <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a302:	d01c      	beq.n	800a33e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a31a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a31c:	2100      	movs	r1, #0
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f7ff ff72 	bl	800a208 <SAI_InterruptFlag>
 800a324:	4603      	mov	r3, r0
 800a326:	43d9      	mvns	r1, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	691a      	ldr	r2, [r3, #16]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	400a      	ands	r2, r1
 800a334:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7f6 fdce 	bl	8000ee0 <HAL_SAI_TxCpltCallback>
#endif
}
 800a344:	bf00      	nop
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a358:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7ff fe0c 	bl	8009f78 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800a360:	bf00      	nop
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a374:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7fa f8e4 	bl	8004544 <HAL_DMA_GetError>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d01d      	beq.n	800a3be <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a388:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a3a0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f7ff ff68 	bl	800a278 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f7ff fde7 	bl	8009f8c <HAL_SAI_ErrorCallback>
#endif
  }
}
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a3e2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f4:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3fc:	2b20      	cmp	r3, #32
 800a3fe:	d00a      	beq.n	800a416 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f7ff ff39 	bl	800a278 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f042 0208 	orr.w	r2, r2, #8
 800a414:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f7ff fdb0 	bl	8009f8c <HAL_SAI_ErrorCallback>
#endif
}
 800a42c:	bf00      	nop
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08a      	sub	sp, #40	@ 0x28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e075      	b.n	800a532 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d105      	bne.n	800a45e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7f6 fe93 	bl	8001184 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2204      	movs	r2, #4
 800a462:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f868 	bl	800a53c <HAL_SD_InitCard>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e05d      	b.n	800a532 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a476:	f107 0308 	add.w	r3, r7, #8
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fdb5 	bl	800afec <HAL_SD_GetCardStatus>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e052      	b.n	800a532 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a48c:	7e3b      	ldrb	r3, [r7, #24]
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a492:	7e7b      	ldrb	r3, [r7, #25]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d10a      	bne.n	800a4b6 <HAL_SD_Init+0x82>
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d102      	bne.n	800a4ac <HAL_SD_Init+0x78>
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d004      	beq.n	800a4b6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4b2:	659a      	str	r2, [r3, #88]	@ 0x58
 800a4b4:	e00b      	b.n	800a4ce <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d104      	bne.n	800a4c8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4c4:	659a      	str	r2, [r3, #88]	@ 0x58
 800a4c6:	e002      	b.n	800a4ce <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fe73 	bl	800b1c0 <HAL_SD_ConfigWideBusOperation>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e026      	b.n	800a532 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a4e4:	f7f7 fc8e 	bl	8001e04 <HAL_GetTick>
 800a4e8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a4ea:	e011      	b.n	800a510 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a4ec:	f7f7 fc8a 	bl	8001e04 <HAL_GetTick>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fa:	d109      	bne.n	800a510 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a502:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e010      	b.n	800a532 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 ff67 	bl	800b3e4 <HAL_SD_GetCardState>
 800a516:	4603      	mov	r3, r0
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d1e7      	bne.n	800a4ec <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3728      	adds	r7, #40	@ 0x28
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a53c:	b590      	push	{r4, r7, lr}
 800a53e:	b08d      	sub	sp, #52	@ 0x34
 800a540:	af02      	add	r7, sp, #8
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a544:	2300      	movs	r3, #0
 800a546:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a548:	2300      	movs	r3, #0
 800a54a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a54c:	2300      	movs	r3, #0
 800a54e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a550:	2300      	movs	r3, #0
 800a552:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a554:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a558:	f04f 0100 	mov.w	r1, #0
 800a55c:	f7fd fc3e 	bl	8007ddc <HAL_RCCEx_GetPeriphCLKFreq>
 800a560:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800a562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a564:	2b00      	cmp	r3, #0
 800a566:	d109      	bne.n	800a57c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a576:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e070      	b.n	800a65e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57e:	0a1b      	lsrs	r3, r3, #8
 800a580:	4a39      	ldr	r2, [pc, #228]	@ (800a668 <HAL_SD_InitCard+0x12c>)
 800a582:	fba2 2303 	umull	r2, r3, r2, r3
 800a586:	091b      	lsrs	r3, r3, #4
 800a588:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681c      	ldr	r4, [r3, #0]
 800a58e:	466a      	mov	r2, sp
 800a590:	f107 0318 	add.w	r3, r7, #24
 800a594:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a598:	e882 0003 	stmia.w	r2, {r0, r1}
 800a59c:	f107 030c 	add.w	r3, r7, #12
 800a5a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f002 fd2a 	bl	800cffc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f002 fd6d 	bl	800d08c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d005      	beq.n	800a5c4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d007      	beq.n	800a5da <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a5ca:	4a28      	ldr	r2, [pc, #160]	@ (800a66c <HAL_SD_InitCard+0x130>)
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7f7 fc21 	bl	8001e1c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fff0 	bl	800b5c0 <SD_PowerON>
 800a5e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e02e      	b.n	800a65e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 ff0f 	bl	800b424 <SD_InitCard>
 800a606:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00b      	beq.n	800a626 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	431a      	orrs	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e01b      	b.n	800a65e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a62e:	4618      	mov	r0, r3
 800a630:	f002 fdc2 	bl	800d1b8 <SDMMC_CmdBlockLength>
 800a634:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00f      	beq.n	800a65c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a0b      	ldr	r2, [pc, #44]	@ (800a670 <HAL_SD_InitCard+0x134>)
 800a642:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	431a      	orrs	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e000      	b.n	800a65e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	372c      	adds	r7, #44	@ 0x2c
 800a662:	46bd      	mov	sp, r7
 800a664:	bd90      	pop	{r4, r7, pc}
 800a666:	bf00      	nop
 800a668:	014f8b59 	.word	0x014f8b59
 800a66c:	00012110 	.word	0x00012110
 800a670:	1fe00fff 	.word	0x1fe00fff

0800a674 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b092      	sub	sp, #72	@ 0x48
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a682:	f7f7 fbbf 	bl	8001e04 <HAL_GetTick>
 800a686:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d107      	bne.n	800a6a6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a69a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e167      	b.n	800a976 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	f040 815a 	bne.w	800a968 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a6ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	441a      	add	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d907      	bls.n	800a6d8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6cc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e14e      	b.n	800a976 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2203      	movs	r2, #3
 800a6dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d002      	beq.n	800a6f6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f2:	025b      	lsls	r3, r3, #9
 800a6f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	025b      	lsls	r3, r3, #9
 800a700:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a702:	2390      	movs	r3, #144	@ 0x90
 800a704:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a706:	2302      	movs	r3, #2
 800a708:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a70e:	2300      	movs	r3, #0
 800a710:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f107 0214 	add.w	r2, r7, #20
 800a71a:	4611      	mov	r1, r2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f002 fd1f 	bl	800d160 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68da      	ldr	r2, [r3, #12]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a730:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d90a      	bls.n	800a74e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2202      	movs	r2, #2
 800a73c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a744:	4618      	mov	r0, r3
 800a746:	f002 fd7d 	bl	800d244 <SDMMC_CmdReadMultiBlock>
 800a74a:	6478      	str	r0, [r7, #68]	@ 0x44
 800a74c:	e009      	b.n	800a762 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2201      	movs	r2, #1
 800a752:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a75a:	4618      	mov	r0, r3
 800a75c:	f002 fd4f 	bl	800d1fe <SDMMC_CmdReadSingleBlock>
 800a760:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a764:	2b00      	cmp	r3, #0
 800a766:	d012      	beq.n	800a78e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a84      	ldr	r2, [pc, #528]	@ (800a980 <HAL_SD_ReadBlocks+0x30c>)
 800a76e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a776:	431a      	orrs	r2, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e0f3      	b.n	800a976 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a792:	e058      	b.n	800a846 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a79a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d033      	beq.n	800a80a <HAL_SD_ReadBlocks+0x196>
 800a7a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7a4:	2b1f      	cmp	r3, #31
 800a7a6:	d930      	bls.n	800a80a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7ac:	e027      	b.n	800a7fe <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f002 fc4c 	bl	800d050 <SDMMC_ReadFIFO>
 800a7b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ca:	0a1b      	lsrs	r3, r3, #8
 800a7cc:	b2da      	uxtb	r2, r3
 800a7ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7da:	0c1b      	lsrs	r3, r3, #16
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ea:	0e1b      	lsrs	r3, r3, #24
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a7f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a800:	2b07      	cmp	r3, #7
 800a802:	d9d4      	bls.n	800a7ae <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800a804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a806:	3b20      	subs	r3, #32
 800a808:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a80a:	f7f7 fafb 	bl	8001e04 <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a816:	429a      	cmp	r2, r3
 800a818:	d902      	bls.n	800a820 <HAL_SD_ReadBlocks+0x1ac>
 800a81a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d112      	bne.n	800a846 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a56      	ldr	r2, [pc, #344]	@ (800a980 <HAL_SD_ReadBlocks+0x30c>)
 800a826:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a82c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	e097      	b.n	800a976 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a84c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a850:	2b00      	cmp	r3, #0
 800a852:	d09f      	beq.n	800a794 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68da      	ldr	r2, [r3, #12]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a862:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a86a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d022      	beq.n	800a8b8 <HAL_SD_ReadBlocks+0x244>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d91f      	bls.n	800a8b8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	d01b      	beq.n	800a8b8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4618      	mov	r0, r3
 800a886:	f002 fd47 	bl	800d318 <SDMMC_CmdStopTransfer>
 800a88a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a88c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d012      	beq.n	800a8b8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a3a      	ldr	r2, [pc, #232]	@ (800a980 <HAL_SD_ReadBlocks+0x30c>)
 800a898:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a89e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8a0:	431a      	orrs	r2, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e05e      	b.n	800a976 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8be:	f003 0308 	and.w	r3, r3, #8
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d012      	beq.n	800a8ec <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a2d      	ldr	r2, [pc, #180]	@ (800a980 <HAL_SD_ReadBlocks+0x30c>)
 800a8cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8d2:	f043 0208 	orr.w	r2, r3, #8
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e044      	b.n	800a976 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d012      	beq.n	800a920 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a20      	ldr	r2, [pc, #128]	@ (800a980 <HAL_SD_ReadBlocks+0x30c>)
 800a900:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a906:	f043 0202 	orr.w	r2, r3, #2
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e02a      	b.n	800a976 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a926:	f003 0320 	and.w	r3, r3, #32
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d012      	beq.n	800a954 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a13      	ldr	r2, [pc, #76]	@ (800a980 <HAL_SD_ReadBlocks+0x30c>)
 800a934:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a93a:	f043 0220 	orr.w	r2, r3, #32
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e010      	b.n	800a976 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a0a      	ldr	r2, [pc, #40]	@ (800a984 <HAL_SD_ReadBlocks+0x310>)
 800a95a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	e006      	b.n	800a976 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a96c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
  }
}
 800a976:	4618      	mov	r0, r3
 800a978:	3748      	adds	r7, #72	@ 0x48
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	1fe00fff 	.word	0x1fe00fff
 800a984:	18000f3a 	.word	0x18000f3a

0800a988 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b092      	sub	sp, #72	@ 0x48
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
 800a994:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a996:	f7f7 fa35 	bl	8001e04 <HAL_GetTick>
 800a99a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d107      	bne.n	800a9ba <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e16b      	b.n	800ac92 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	f040 815e 	bne.w	800ac84 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a9ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	441a      	add	r2, r3
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d907      	bls.n	800a9ec <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9e0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e152      	b.n	800ac92 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2203      	movs	r2, #3
 800a9f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d002      	beq.n	800aa0a <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	025b      	lsls	r3, r3, #9
 800aa08:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa0a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa0e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	025b      	lsls	r3, r3, #9
 800aa14:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800aa16:	2390      	movs	r3, #144	@ 0x90
 800aa18:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f107 0218 	add.w	r2, r7, #24
 800aa2e:	4611      	mov	r1, r2
 800aa30:	4618      	mov	r0, r3
 800aa32:	f002 fb95 	bl	800d160 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68da      	ldr	r2, [r3, #12]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa44:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d90a      	bls.n	800aa62 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f002 fc39 	bl	800d2d0 <SDMMC_CmdWriteMultiBlock>
 800aa5e:	6478      	str	r0, [r7, #68]	@ 0x44
 800aa60:	e009      	b.n	800aa76 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2210      	movs	r2, #16
 800aa66:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f002 fc0b 	bl	800d28a <SDMMC_CmdWriteSingleBlock>
 800aa74:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d012      	beq.n	800aaa2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a86      	ldr	r2, [pc, #536]	@ (800ac9c <HAL_SD_WriteBlocks+0x314>)
 800aa82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e0f7      	b.n	800ac92 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800aaa6:	e05c      	b.n	800ab62 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d037      	beq.n	800ab26 <HAL_SD_WriteBlocks+0x19e>
 800aab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aab8:	2b1f      	cmp	r3, #31
 800aaba:	d934      	bls.n	800ab26 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800aabc:	2300      	movs	r3, #0
 800aabe:	643b      	str	r3, [r7, #64]	@ 0x40
 800aac0:	e02b      	b.n	800ab1a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800aac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800aac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaca:	3301      	adds	r3, #1
 800aacc:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800aace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	021a      	lsls	r2, r3, #8
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800aada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aadc:	3301      	adds	r3, #1
 800aade:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800aae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	041a      	lsls	r2, r3, #16
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800aaec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaee:	3301      	adds	r3, #1
 800aaf0:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800aaf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	061a      	lsls	r2, r3, #24
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800aafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab00:	3301      	adds	r3, #1
 800ab02:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f107 0214 	add.w	r2, r7, #20
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f002 faab 	bl	800d06a <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800ab14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab16:	3301      	adds	r3, #1
 800ab18:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab1c:	2b07      	cmp	r3, #7
 800ab1e:	d9d0      	bls.n	800aac2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800ab20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab22:	3b20      	subs	r3, #32
 800ab24:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800ab26:	f7f7 f96d 	bl	8001e04 <HAL_GetTick>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d902      	bls.n	800ab3c <HAL_SD_WriteBlocks+0x1b4>
 800ab36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d112      	bne.n	800ab62 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a56      	ldr	r2, [pc, #344]	@ (800ac9c <HAL_SD_WriteBlocks+0x314>)
 800ab42:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab4a:	431a      	orrs	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	e097      	b.n	800ac92 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab68:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d09b      	beq.n	800aaa8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68da      	ldr	r2, [r3, #12]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab7e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d022      	beq.n	800abd4 <HAL_SD_WriteBlocks+0x24c>
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d91f      	bls.n	800abd4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab98:	2b03      	cmp	r3, #3
 800ab9a:	d01b      	beq.n	800abd4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f002 fbb9 	bl	800d318 <SDMMC_CmdStopTransfer>
 800aba6:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800aba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d012      	beq.n	800abd4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a3a      	ldr	r2, [pc, #232]	@ (800ac9c <HAL_SD_WriteBlocks+0x314>)
 800abb4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abbc:	431a      	orrs	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e05e      	b.n	800ac92 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abda:	f003 0308 	and.w	r3, r3, #8
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d012      	beq.n	800ac08 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a2d      	ldr	r2, [pc, #180]	@ (800ac9c <HAL_SD_WriteBlocks+0x314>)
 800abe8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abee:	f043 0208 	orr.w	r2, r3, #8
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e044      	b.n	800ac92 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d012      	beq.n	800ac3c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a20      	ldr	r2, [pc, #128]	@ (800ac9c <HAL_SD_WriteBlocks+0x314>)
 800ac1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac22:	f043 0202 	orr.w	r2, r3, #2
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e02a      	b.n	800ac92 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac42:	f003 0310 	and.w	r3, r3, #16
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d012      	beq.n	800ac70 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a13      	ldr	r2, [pc, #76]	@ (800ac9c <HAL_SD_WriteBlocks+0x314>)
 800ac50:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac56:	f043 0210 	orr.w	r2, r3, #16
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e010      	b.n	800ac92 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a0a      	ldr	r2, [pc, #40]	@ (800aca0 <HAL_SD_WriteBlocks+0x318>)
 800ac76:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	e006      	b.n	800ac92 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac88:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
  }
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3748      	adds	r7, #72	@ 0x48
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	1fe00fff 	.word	0x1fe00fff
 800aca0:	18000f3a 	.word	0x18000f3a

0800aca4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acb2:	0f9b      	lsrs	r3, r3, #30
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acbe:	0e9b      	lsrs	r3, r3, #26
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	f003 030f 	and.w	r3, r3, #15
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acd0:	0e1b      	lsrs	r3, r3, #24
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	f003 0303 	and.w	r3, r3, #3
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ace2:	0c1b      	lsrs	r3, r3, #16
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acee:	0a1b      	lsrs	r3, r3, #8
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad04:	0d1b      	lsrs	r3, r3, #20
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad10:	0c1b      	lsrs	r3, r3, #16
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	f003 030f 	and.w	r3, r3, #15
 800ad18:	b2da      	uxtb	r2, r3
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad22:	0bdb      	lsrs	r3, r3, #15
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	f003 0301 	and.w	r3, r3, #1
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad34:	0b9b      	lsrs	r3, r3, #14
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad46:	0b5b      	lsrs	r3, r3, #13
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad58:	0b1b      	lsrs	r3, r3, #12
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d163      	bne.n	800ae3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad78:	009a      	lsls	r2, r3, #2
 800ad7a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800ad7e:	4013      	ands	r3, r2
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800ad84:	0f92      	lsrs	r2, r2, #30
 800ad86:	431a      	orrs	r2, r3
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad90:	0edb      	lsrs	r3, r3, #27
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	f003 0307 	and.w	r3, r3, #7
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ada2:	0e1b      	lsrs	r3, r3, #24
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	f003 0307 	and.w	r3, r3, #7
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adb4:	0d5b      	lsrs	r3, r3, #21
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	f003 0307 	and.w	r3, r3, #7
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adc6:	0c9b      	lsrs	r3, r3, #18
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	f003 0307 	and.w	r3, r3, #7
 800adce:	b2da      	uxtb	r2, r3
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800add8:	0bdb      	lsrs	r3, r3, #15
 800adda:	b2db      	uxtb	r3, r3
 800addc:	f003 0307 	and.w	r3, r3, #7
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	1c5a      	adds	r2, r3, #1
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	7e1b      	ldrb	r3, [r3, #24]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	f003 0307 	and.w	r3, r3, #7
 800adfa:	3302      	adds	r3, #2
 800adfc:	2201      	movs	r2, #1
 800adfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ae06:	fb03 f202 	mul.w	r2, r3, r2
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	7a1b      	ldrb	r3, [r3, #8]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	f003 030f 	and.w	r3, r3, #15
 800ae18:	2201      	movs	r2, #1
 800ae1a:	409a      	lsls	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ae28:	0a52      	lsrs	r2, r2, #9
 800ae2a:	fb03 f202 	mul.w	r2, r3, r2
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae38:	655a      	str	r2, [r3, #84]	@ 0x54
 800ae3a:	e031      	b.n	800aea0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d11d      	bne.n	800ae80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae48:	041b      	lsls	r3, r3, #16
 800ae4a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae52:	0c1b      	lsrs	r3, r3, #16
 800ae54:	431a      	orrs	r2, r3
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	029a      	lsls	r2, r3, #10
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae74:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	655a      	str	r2, [r3, #84]	@ 0x54
 800ae7e:	e00f      	b.n	800aea0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a58      	ldr	r2, [pc, #352]	@ (800afe8 <HAL_SD_GetCardCSD+0x344>)
 800ae86:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e09d      	b.n	800afdc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aea4:	0b9b      	lsrs	r3, r3, #14
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeb6:	09db      	lsrs	r3, r3, #7
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aece:	b2da      	uxtb	r2, r3
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aed8:	0fdb      	lsrs	r3, r3, #31
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aee4:	0f5b      	lsrs	r3, r3, #29
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	f003 0303 	and.w	r3, r3, #3
 800aeec:	b2da      	uxtb	r2, r3
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aef6:	0e9b      	lsrs	r3, r3, #26
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	f003 0307 	and.w	r3, r3, #7
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af08:	0d9b      	lsrs	r3, r3, #22
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	f003 030f 	and.w	r3, r3, #15
 800af10:	b2da      	uxtb	r2, r3
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af1a:	0d5b      	lsrs	r3, r3, #21
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	b2da      	uxtb	r2, r3
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af36:	0c1b      	lsrs	r3, r3, #16
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	b2da      	uxtb	r2, r3
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af4a:	0bdb      	lsrs	r3, r3, #15
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	f003 0301 	and.w	r3, r3, #1
 800af52:	b2da      	uxtb	r2, r3
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af5e:	0b9b      	lsrs	r3, r3, #14
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	b2da      	uxtb	r2, r3
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af72:	0b5b      	lsrs	r3, r3, #13
 800af74:	b2db      	uxtb	r3, r3
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af86:	0b1b      	lsrs	r3, r3, #12
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af9a:	0a9b      	lsrs	r3, r3, #10
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	f003 0303 	and.w	r3, r3, #3
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afae:	0a1b      	lsrs	r3, r3, #8
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	f003 0303 	and.w	r3, r3, #3
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afc2:	085b      	lsrs	r3, r3, #1
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	2201      	movs	r2, #1
 800afd6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	1fe00fff 	.word	0x1fe00fff

0800afec <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b094      	sub	sp, #80	@ 0x50
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b002:	b2db      	uxtb	r3, r3
 800b004:	2b03      	cmp	r3, #3
 800b006:	d101      	bne.n	800b00c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	e0a7      	b.n	800b15c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b00c:	f107 0308 	add.w	r3, r7, #8
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fb62 	bl	800b6dc <SD_SendSDStatus>
 800b018:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800b01a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d011      	beq.n	800b044 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a4f      	ldr	r2, [pc, #316]	@ (800b164 <HAL_SD_GetCardStatus+0x178>)
 800b026:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b02c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b02e:	431a      	orrs	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800b042:	e070      	b.n	800b126 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	099b      	lsrs	r3, r3, #6
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	f003 0303 	and.w	r3, r3, #3
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	095b      	lsrs	r3, r3, #5
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	0a1b      	lsrs	r3, r3, #8
 800b068:	b29b      	uxth	r3, r3
 800b06a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b06e:	b29a      	uxth	r2, r3
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	0e1b      	lsrs	r3, r3, #24
 800b074:	b29b      	uxth	r3, r3
 800b076:	4313      	orrs	r3, r2
 800b078:	b29a      	uxth	r2, r3
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	061a      	lsls	r2, r3, #24
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	021b      	lsls	r3, r3, #8
 800b086:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b08a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	0a1b      	lsrs	r3, r3, #8
 800b090:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b094:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	0e1b      	lsrs	r3, r3, #24
 800b09a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	0a1b      	lsrs	r3, r3, #8
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	0d1b      	lsrs	r3, r3, #20
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	f003 030f 	and.w	r3, r3, #15
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	0c1b      	lsrs	r3, r3, #16
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	0a9b      	lsrs	r3, r3, #10
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	0a1b      	lsrs	r3, r3, #8
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	f003 0303 	and.w	r3, r3, #3
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	091b      	lsrs	r3, r3, #4
 800b102:	b2db      	uxtb	r3, r3
 800b104:	f003 030f 	and.w	r3, r3, #15
 800b108:	b2da      	uxtb	r2, r3
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	b2db      	uxtb	r3, r3
 800b112:	f003 030f 	and.w	r3, r3, #15
 800b116:	b2da      	uxtb	r2, r3
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	0e1b      	lsrs	r3, r3, #24
 800b120:	b2da      	uxtb	r2, r3
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b12e:	4618      	mov	r0, r3
 800b130:	f002 f842 	bl	800d1b8 <SDMMC_CmdBlockLength>
 800b134:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800b136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00d      	beq.n	800b158 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a08      	ldr	r2, [pc, #32]	@ (800b164 <HAL_SD_GetCardStatus+0x178>)
 800b142:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b148:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800b158:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3750      	adds	r7, #80	@ 0x50
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	1fe00fff 	.word	0x1fe00fff

0800b168 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b1c0:	b590      	push	{r4, r7, lr}
 800b1c2:	b08d      	sub	sp, #52	@ 0x34
 800b1c4:	af02      	add	r7, sp, #8
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2203      	movs	r2, #3
 800b1d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1dc:	2b03      	cmp	r3, #3
 800b1de:	d02e      	beq.n	800b23e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1e6:	d106      	bne.n	800b1f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	635a      	str	r2, [r3, #52]	@ 0x34
 800b1f4:	e029      	b.n	800b24a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b1fc:	d10a      	bne.n	800b214 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fb64 	bl	800b8cc <SD_WideBus_Enable>
 800b204:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	431a      	orrs	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	635a      	str	r2, [r3, #52]	@ 0x34
 800b212:	e01a      	b.n	800b24a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10a      	bne.n	800b230 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fba1 	bl	800b962 <SD_WideBus_Disable>
 800b220:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	431a      	orrs	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	635a      	str	r2, [r3, #52]	@ 0x34
 800b22e:	e00c      	b.n	800b24a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b234:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	635a      	str	r2, [r3, #52]	@ 0x34
 800b23c:	e005      	b.n	800b24a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b242:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d007      	beq.n	800b262 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a5f      	ldr	r2, [pc, #380]	@ (800b3d4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b258:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b260:	e096      	b.n	800b390 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b262:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b266:	f04f 0100 	mov.w	r1, #0
 800b26a:	f7fc fdb7 	bl	8007ddc <HAL_RCCEx_GetPeriphCLKFreq>
 800b26e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 8083 	beq.w	800b37e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	695a      	ldr	r2, [r3, #20]
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	4950      	ldr	r1, [pc, #320]	@ (800b3d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b296:	fba1 1303 	umull	r1, r3, r1, r3
 800b29a:	0e1b      	lsrs	r3, r3, #24
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d303      	bcc.n	800b2a8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	695b      	ldr	r3, [r3, #20]
 800b2a4:	61bb      	str	r3, [r7, #24]
 800b2a6:	e05a      	b.n	800b35e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2b0:	d103      	bne.n	800b2ba <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	695b      	ldr	r3, [r3, #20]
 800b2b6:	61bb      	str	r3, [r7, #24]
 800b2b8:	e051      	b.n	800b35e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2c2:	d126      	bne.n	800b312 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10e      	bne.n	800b2ea <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	4a43      	ldr	r2, [pc, #268]	@ (800b3dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d906      	bls.n	800b2e2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	4a40      	ldr	r2, [pc, #256]	@ (800b3d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b2d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2dc:	0e5b      	lsrs	r3, r3, #25
 800b2de:	61bb      	str	r3, [r7, #24]
 800b2e0:	e03d      	b.n	800b35e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	61bb      	str	r3, [r7, #24]
 800b2e8:	e039      	b.n	800b35e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	005b      	lsls	r3, r3, #1
 800b2f0:	69fa      	ldr	r2, [r7, #28]
 800b2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f6:	4a39      	ldr	r2, [pc, #228]	@ (800b3dc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d906      	bls.n	800b30a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	4a36      	ldr	r2, [pc, #216]	@ (800b3d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b300:	fba2 2303 	umull	r2, r3, r2, r3
 800b304:	0e5b      	lsrs	r3, r3, #25
 800b306:	61bb      	str	r3, [r7, #24]
 800b308:	e029      	b.n	800b35e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	61bb      	str	r3, [r7, #24]
 800b310:	e025      	b.n	800b35e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10e      	bne.n	800b338 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	4a30      	ldr	r2, [pc, #192]	@ (800b3e0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d906      	bls.n	800b330 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	4a2c      	ldr	r2, [pc, #176]	@ (800b3d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b326:	fba2 2303 	umull	r2, r3, r2, r3
 800b32a:	0e1b      	lsrs	r3, r3, #24
 800b32c:	61bb      	str	r3, [r7, #24]
 800b32e:	e016      	b.n	800b35e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	61bb      	str	r3, [r7, #24]
 800b336:	e012      	b.n	800b35e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	005b      	lsls	r3, r3, #1
 800b33e:	69fa      	ldr	r2, [r7, #28]
 800b340:	fbb2 f3f3 	udiv	r3, r2, r3
 800b344:	4a26      	ldr	r2, [pc, #152]	@ (800b3e0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d906      	bls.n	800b358 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	4a22      	ldr	r2, [pc, #136]	@ (800b3d8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b34e:	fba2 2303 	umull	r2, r3, r2, r3
 800b352:	0e1b      	lsrs	r3, r3, #24
 800b354:	61bb      	str	r3, [r7, #24]
 800b356:	e002      	b.n	800b35e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	695b      	ldr	r3, [r3, #20]
 800b35c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681c      	ldr	r4, [r3, #0]
 800b362:	466a      	mov	r2, sp
 800b364:	f107 0314 	add.w	r3, r7, #20
 800b368:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b36c:	e882 0003 	stmia.w	r2, {r0, r1}
 800b370:	f107 0308 	add.w	r3, r7, #8
 800b374:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b376:	4620      	mov	r0, r4
 800b378:	f001 fe40 	bl	800cffc <SDMMC_Init>
 800b37c:	e008      	b.n	800b390 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b382:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b398:	4618      	mov	r0, r3
 800b39a:	f001 ff0d 	bl	800d1b8 <SDMMC_CmdBlockLength>
 800b39e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3a0:	6a3b      	ldr	r3, [r7, #32]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00c      	beq.n	800b3c0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a0a      	ldr	r2, [pc, #40]	@ (800b3d4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b3ac:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800b3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	372c      	adds	r7, #44	@ 0x2c
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd90      	pop	{r4, r7, pc}
 800b3d4:	1fe00fff 	.word	0x1fe00fff
 800b3d8:	55e63b89 	.word	0x55e63b89
 800b3dc:	02faf080 	.word	0x02faf080
 800b3e0:	017d7840 	.word	0x017d7840

0800b3e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b3f0:	f107 030c 	add.w	r3, r7, #12
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 fa40 	bl	800b87c <SD_SendStatus>
 800b3fc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d005      	beq.n	800b410 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	431a      	orrs	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	0a5b      	lsrs	r3, r3, #9
 800b414:	f003 030f 	and.w	r3, r3, #15
 800b418:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b41a:	693b      	ldr	r3, [r7, #16]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b090      	sub	sp, #64	@ 0x40
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b42c:	2300      	movs	r3, #0
 800b42e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b430:	f7f6 fce8 	bl	8001e04 <HAL_GetTick>
 800b434:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f001 fe37 	bl	800d0ae <SDMMC_GetPowerState>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d102      	bne.n	800b44c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b446:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b44a:	e0b5      	b.n	800b5b8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b450:	2b03      	cmp	r3, #3
 800b452:	d02e      	beq.n	800b4b2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4618      	mov	r0, r3
 800b45a:	f002 f882 	bl	800d562 <SDMMC_CmdSendCID>
 800b45e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b462:	2b00      	cmp	r3, #0
 800b464:	d001      	beq.n	800b46a <SD_InitCard+0x46>
    {
      return errorstate;
 800b466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b468:	e0a6      	b.n	800b5b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2100      	movs	r1, #0
 800b470:	4618      	mov	r0, r3
 800b472:	f001 fe62 	bl	800d13a <SDMMC_GetResponse>
 800b476:	4602      	mov	r2, r0
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2104      	movs	r1, #4
 800b482:	4618      	mov	r0, r3
 800b484:	f001 fe59 	bl	800d13a <SDMMC_GetResponse>
 800b488:	4602      	mov	r2, r0
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2108      	movs	r1, #8
 800b494:	4618      	mov	r0, r3
 800b496:	f001 fe50 	bl	800d13a <SDMMC_GetResponse>
 800b49a:	4602      	mov	r2, r0
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	210c      	movs	r1, #12
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f001 fe47 	bl	800d13a <SDMMC_GetResponse>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d01d      	beq.n	800b4f6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b4ba:	e019      	b.n	800b4f0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f107 020a 	add.w	r2, r7, #10
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f002 f88a 	bl	800d5e0 <SDMMC_CmdSetRelAdd>
 800b4cc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d6:	e06f      	b.n	800b5b8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b4d8:	f7f6 fc94 	bl	8001e04 <HAL_GetTick>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	f241 3287 	movw	r2, #4999	@ 0x1387
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d902      	bls.n	800b4f0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b4ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b4ee:	e063      	b.n	800b5b8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b4f0:	897b      	ldrh	r3, [r7, #10]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0e2      	beq.n	800b4bc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d036      	beq.n	800b56c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b4fe:	897b      	ldrh	r3, [r7, #10]
 800b500:	461a      	mov	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b50e:	041b      	lsls	r3, r3, #16
 800b510:	4619      	mov	r1, r3
 800b512:	4610      	mov	r0, r2
 800b514:	f002 f844 	bl	800d5a0 <SDMMC_CmdSendCSD>
 800b518:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <SD_InitCard+0x100>
    {
      return errorstate;
 800b520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b522:	e049      	b.n	800b5b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2100      	movs	r1, #0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f001 fe05 	bl	800d13a <SDMMC_GetResponse>
 800b530:	4602      	mov	r2, r0
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2104      	movs	r1, #4
 800b53c:	4618      	mov	r0, r3
 800b53e:	f001 fdfc 	bl	800d13a <SDMMC_GetResponse>
 800b542:	4602      	mov	r2, r0
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2108      	movs	r1, #8
 800b54e:	4618      	mov	r0, r3
 800b550:	f001 fdf3 	bl	800d13a <SDMMC_GetResponse>
 800b554:	4602      	mov	r2, r0
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	210c      	movs	r1, #12
 800b560:	4618      	mov	r0, r3
 800b562:	f001 fdea 	bl	800d13a <SDMMC_GetResponse>
 800b566:	4602      	mov	r2, r0
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2104      	movs	r1, #4
 800b572:	4618      	mov	r0, r3
 800b574:	f001 fde1 	bl	800d13a <SDMMC_GetResponse>
 800b578:	4603      	mov	r3, r0
 800b57a:	0d1a      	lsrs	r2, r3, #20
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b580:	f107 030c 	add.w	r3, r7, #12
 800b584:	4619      	mov	r1, r3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff fb8c 	bl	800aca4 <HAL_SD_GetCardCSD>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d002      	beq.n	800b598 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b592:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b596:	e00f      	b.n	800b5b8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5a0:	041b      	lsls	r3, r3, #16
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	f001 fef3 	bl	800d390 <SDMMC_CmdSelDesel>
 800b5aa:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <SD_InitCard+0x192>
  {
    return errorstate;
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b4:	e000      	b.n	800b5b8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3740      	adds	r7, #64	@ 0x40
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f001 fefc 	bl	800d3d6 <SDMMC_CmdGoIdleState>
 800b5de:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <SD_PowerON+0x2a>
  {
    return errorstate;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	e072      	b.n	800b6d0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f001 ff0f 	bl	800d412 <SDMMC_CmdOperCond>
 800b5f4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5fc:	d10d      	bne.n	800b61a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4618      	mov	r0, r3
 800b60a:	f001 fee4 	bl	800d3d6 <SDMMC_CmdGoIdleState>
 800b60e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <SD_PowerON+0x60>
    {
      return errorstate;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	e05a      	b.n	800b6d0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b624:	2b01      	cmp	r3, #1
 800b626:	d137      	bne.n	800b698 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2100      	movs	r1, #0
 800b62e:	4618      	mov	r0, r3
 800b630:	f001 ff0f 	bl	800d452 <SDMMC_CmdAppCommand>
 800b634:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d02d      	beq.n	800b698 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b63c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b640:	e046      	b.n	800b6d0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2100      	movs	r1, #0
 800b648:	4618      	mov	r0, r3
 800b64a:	f001 ff02 	bl	800d452 <SDMMC_CmdAppCommand>
 800b64e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <SD_PowerON+0x9a>
    {
      return errorstate;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	e03a      	b.n	800b6d0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	491e      	ldr	r1, [pc, #120]	@ (800b6d8 <SD_PowerON+0x118>)
 800b660:	4618      	mov	r0, r3
 800b662:	f001 ff19 	bl	800d498 <SDMMC_CmdAppOperCommand>
 800b666:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d002      	beq.n	800b674 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b66e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b672:	e02d      	b.n	800b6d0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2100      	movs	r1, #0
 800b67a:	4618      	mov	r0, r3
 800b67c:	f001 fd5d 	bl	800d13a <SDMMC_GetResponse>
 800b680:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	0fdb      	lsrs	r3, r3, #31
 800b686:	2b01      	cmp	r3, #1
 800b688:	d101      	bne.n	800b68e <SD_PowerON+0xce>
 800b68a:	2301      	movs	r3, #1
 800b68c:	e000      	b.n	800b690 <SD_PowerON+0xd0>
 800b68e:	2300      	movs	r3, #0
 800b690:	613b      	str	r3, [r7, #16]

    count++;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	3301      	adds	r3, #1
 800b696:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d802      	bhi.n	800b6a8 <SD_PowerON+0xe8>
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d0cc      	beq.n	800b642 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d902      	bls.n	800b6b8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b6b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b6b6:	e00b      	b.n	800b6d0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	c1100000 	.word	0xc1100000

0800b6dc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08c      	sub	sp, #48	@ 0x30
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b6e6:	f7f6 fb8d 	bl	8001e04 <HAL_GetTick>
 800b6ea:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f001 fd1f 	bl	800d13a <SDMMC_GetResponse>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b702:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b706:	d102      	bne.n	800b70e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b708:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b70c:	e0b0      	b.n	800b870 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2140      	movs	r1, #64	@ 0x40
 800b714:	4618      	mov	r0, r3
 800b716:	f001 fd4f 	bl	800d1b8 <SDMMC_CmdBlockLength>
 800b71a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d005      	beq.n	800b72e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	e0a0      	b.n	800b870 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b736:	041b      	lsls	r3, r3, #16
 800b738:	4619      	mov	r1, r3
 800b73a:	4610      	mov	r0, r2
 800b73c:	f001 fe89 	bl	800d452 <SDMMC_CmdAppCommand>
 800b740:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d005      	beq.n	800b754 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	e08d      	b.n	800b870 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b754:	f04f 33ff 	mov.w	r3, #4294967295
 800b758:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b75a:	2340      	movs	r3, #64	@ 0x40
 800b75c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b75e:	2360      	movs	r3, #96	@ 0x60
 800b760:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b762:	2302      	movs	r3, #2
 800b764:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b766:	2300      	movs	r3, #0
 800b768:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b76a:	2301      	movs	r3, #1
 800b76c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f107 0208 	add.w	r2, r7, #8
 800b776:	4611      	mov	r1, r2
 800b778:	4618      	mov	r0, r3
 800b77a:	f001 fcf1 	bl	800d160 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4618      	mov	r0, r3
 800b784:	f001 ff71 	bl	800d66a <SDMMC_CmdStatusRegister>
 800b788:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d02b      	beq.n	800b7e8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b798:	6a3b      	ldr	r3, [r7, #32]
 800b79a:	e069      	b.n	800b870 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d013      	beq.n	800b7d2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7ae:	e00d      	b.n	800b7cc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f001 fc4b 	bl	800d050 <SDMMC_ReadFIFO>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7be:	601a      	str	r2, [r3, #0]
        pData++;
 800b7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800b7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ce:	2b07      	cmp	r3, #7
 800b7d0:	d9ee      	bls.n	800b7b0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b7d2:	f7f6 fb17 	bl	8001e04 <HAL_GetTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e0:	d102      	bne.n	800b7e8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b7e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b7e6:	e043      	b.n	800b870 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7ee:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0d2      	beq.n	800b79c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7fc:	f003 0308 	and.w	r3, r3, #8
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b804:	2308      	movs	r3, #8
 800b806:	e033      	b.n	800b870 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b80e:	f003 0302 	and.w	r3, r3, #2
 800b812:	2b00      	cmp	r3, #0
 800b814:	d001      	beq.n	800b81a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b816:	2302      	movs	r3, #2
 800b818:	e02a      	b.n	800b870 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b820:	f003 0320 	and.w	r3, r3, #32
 800b824:	2b00      	cmp	r3, #0
 800b826:	d017      	beq.n	800b858 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b828:	2320      	movs	r3, #32
 800b82a:	e021      	b.n	800b870 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4618      	mov	r0, r3
 800b832:	f001 fc0d 	bl	800d050 <SDMMC_ReadFIFO>
 800b836:	4602      	mov	r2, r0
 800b838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83a:	601a      	str	r2, [r3, #0]
    pData++;
 800b83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83e:	3304      	adds	r3, #4
 800b840:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b842:	f7f6 fadf 	bl	8001e04 <HAL_GetTick>
 800b846:	4602      	mov	r2, r0
 800b848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b850:	d102      	bne.n	800b858 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b852:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b856:	e00b      	b.n	800b870 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b85e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1e2      	bne.n	800b82c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a03      	ldr	r2, [pc, #12]	@ (800b878 <SD_SendSDStatus+0x19c>)
 800b86c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3730      	adds	r7, #48	@ 0x30
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	18000f3a 	.word	0x18000f3a

0800b87c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b88c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b890:	e018      	b.n	800b8c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b89a:	041b      	lsls	r3, r3, #16
 800b89c:	4619      	mov	r1, r3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	f001 fec0 	bl	800d624 <SDMMC_CmdSendStatus>
 800b8a4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d001      	beq.n	800b8b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	e009      	b.n	800b8c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f001 fc3f 	bl	800d13a <SDMMC_GetResponse>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	60fb      	str	r3, [r7, #12]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f001 fc29 	bl	800d13a <SDMMC_GetResponse>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b8f2:	d102      	bne.n	800b8fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b8f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b8f8:	e02f      	b.n	800b95a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b8fa:	f107 030c 	add.w	r3, r7, #12
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f879 	bl	800b9f8 <SD_FindSCR>
 800b906:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	e023      	b.n	800b95a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d01c      	beq.n	800b956 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b924:	041b      	lsls	r3, r3, #16
 800b926:	4619      	mov	r1, r3
 800b928:	4610      	mov	r0, r2
 800b92a:	f001 fd92 	bl	800d452 <SDMMC_CmdAppCommand>
 800b92e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	e00f      	b.n	800b95a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2102      	movs	r1, #2
 800b940:	4618      	mov	r0, r3
 800b942:	f001 fdc9 	bl	800d4d8 <SDMMC_CmdBusWidth>
 800b946:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	e003      	b.n	800b95a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b952:	2300      	movs	r3, #0
 800b954:	e001      	b.n	800b95a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b956:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3718      	adds	r7, #24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b086      	sub	sp, #24
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b96a:	2300      	movs	r3, #0
 800b96c:	60fb      	str	r3, [r7, #12]
 800b96e:	2300      	movs	r3, #0
 800b970:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2100      	movs	r1, #0
 800b978:	4618      	mov	r0, r3
 800b97a:	f001 fbde 	bl	800d13a <SDMMC_GetResponse>
 800b97e:	4603      	mov	r3, r0
 800b980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b984:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b988:	d102      	bne.n	800b990 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b98a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b98e:	e02f      	b.n	800b9f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b990:	f107 030c 	add.w	r3, r7, #12
 800b994:	4619      	mov	r1, r3
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f82e 	bl	800b9f8 <SD_FindSCR>
 800b99c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	e023      	b.n	800b9f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d01c      	beq.n	800b9ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9ba:	041b      	lsls	r3, r3, #16
 800b9bc:	4619      	mov	r1, r3
 800b9be:	4610      	mov	r0, r2
 800b9c0:	f001 fd47 	bl	800d452 <SDMMC_CmdAppCommand>
 800b9c4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	e00f      	b.n	800b9f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f001 fd7e 	bl	800d4d8 <SDMMC_CmdBusWidth>
 800b9dc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	e003      	b.n	800b9f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	e001      	b.n	800b9f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b9ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08e      	sub	sp, #56	@ 0x38
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ba02:	f7f6 f9ff 	bl	8001e04 <HAL_GetTick>
 800ba06:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	60bb      	str	r3, [r7, #8]
 800ba10:	2300      	movs	r3, #0
 800ba12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2108      	movs	r1, #8
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f001 fbca 	bl	800d1b8 <SDMMC_CmdBlockLength>
 800ba24:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ba26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ba2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2e:	e0ad      	b.n	800bb8c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba38:	041b      	lsls	r3, r3, #16
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	f001 fd08 	bl	800d452 <SDMMC_CmdAppCommand>
 800ba42:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <SD_FindSCR+0x56>
  {
    return errorstate;
 800ba4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba4c:	e09e      	b.n	800bb8c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ba4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ba54:	2308      	movs	r3, #8
 800ba56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ba58:	2330      	movs	r3, #48	@ 0x30
 800ba5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ba64:	2301      	movs	r3, #1
 800ba66:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f107 0210 	add.w	r2, r7, #16
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f001 fb74 	bl	800d160 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f001 fd4e 	bl	800d51e <SDMMC_CmdSendSCR>
 800ba82:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ba84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d027      	beq.n	800bada <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ba8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba8c:	e07e      	b.n	800bb8c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d113      	bne.n	800bac4 <SD_FindSCR+0xcc>
 800ba9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d110      	bne.n	800bac4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 fad2 	bl	800d050 <SDMMC_ReadFIFO>
 800baac:	4603      	mov	r3, r0
 800baae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f001 facb 	bl	800d050 <SDMMC_ReadFIFO>
 800baba:	4603      	mov	r3, r0
 800babc:	60fb      	str	r3, [r7, #12]
      index++;
 800babe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac0:	3301      	adds	r3, #1
 800bac2:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800bac4:	f7f6 f99e 	bl	8001e04 <HAL_GetTick>
 800bac8:	4602      	mov	r2, r0
 800baca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad2:	d102      	bne.n	800bada <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bad4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bad8:	e058      	b.n	800bb8c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bae0:	f240 532a 	movw	r3, #1322	@ 0x52a
 800bae4:	4013      	ands	r3, r2
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0d1      	beq.n	800ba8e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baf0:	f003 0308 	and.w	r3, r3, #8
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d005      	beq.n	800bb04 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2208      	movs	r2, #8
 800bafe:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bb00:	2308      	movs	r3, #8
 800bb02:	e043      	b.n	800bb8c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb0a:	f003 0302 	and.w	r3, r3, #2
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d005      	beq.n	800bb1e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2202      	movs	r2, #2
 800bb18:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	e036      	b.n	800bb8c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb24:	f003 0320 	and.w	r3, r3, #32
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d005      	beq.n	800bb38 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2220      	movs	r2, #32
 800bb32:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bb34:	2320      	movs	r3, #32
 800bb36:	e029      	b.n	800bb8c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a15      	ldr	r2, [pc, #84]	@ (800bb94 <SD_FindSCR+0x19c>)
 800bb3e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	061a      	lsls	r2, r3, #24
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	021b      	lsls	r3, r3, #8
 800bb48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bb4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	0a1b      	lsrs	r3, r3, #8
 800bb52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800bb56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	0e1b      	lsrs	r3, r3, #24
 800bb5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800bb5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb60:	601a      	str	r2, [r3, #0]
    scr++;
 800bb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb64:	3304      	adds	r3, #4
 800bb66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	061a      	lsls	r2, r3, #24
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	021b      	lsls	r3, r3, #8
 800bb70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bb74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	0a1b      	lsrs	r3, r3, #8
 800bb7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800bb7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	0e1b      	lsrs	r3, r3, #24
 800bb84:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800bb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb88:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3738      	adds	r7, #56	@ 0x38
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	18000f3a 	.word	0x18000f3a

0800bb98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e042      	b.n	800bc30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d106      	bne.n	800bbc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f7f5 fd07 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2224      	movs	r2, #36	@ 0x24
 800bbc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f022 0201 	bic.w	r2, r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d002      	beq.n	800bbe8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fee6 	bl	800c9b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f97b 	bl	800bee4 <UART_SetConfig>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d101      	bne.n	800bbf8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e01b      	b.n	800bc30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685a      	ldr	r2, [r3, #4]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bc06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689a      	ldr	r2, [r3, #8]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bc16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f042 0201 	orr.w	r2, r2, #1
 800bc26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 ff65 	bl	800caf8 <UART_CheckIdleState>
 800bc2e:	4603      	mov	r3, r0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b08a      	sub	sp, #40	@ 0x28
 800bc3c:	af02      	add	r7, sp, #8
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	603b      	str	r3, [r7, #0]
 800bc44:	4613      	mov	r3, r2
 800bc46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc4e:	2b20      	cmp	r3, #32
 800bc50:	d17b      	bne.n	800bd4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <HAL_UART_Transmit+0x26>
 800bc58:	88fb      	ldrh	r3, [r7, #6]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e074      	b.n	800bd4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2221      	movs	r2, #33	@ 0x21
 800bc6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc72:	f7f6 f8c7 	bl	8001e04 <HAL_GetTick>
 800bc76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	88fa      	ldrh	r2, [r7, #6]
 800bc7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	88fa      	ldrh	r2, [r7, #6]
 800bc84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc90:	d108      	bne.n	800bca4 <HAL_UART_Transmit+0x6c>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d104      	bne.n	800bca4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	61bb      	str	r3, [r7, #24]
 800bca2:	e003      	b.n	800bcac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bcac:	e030      	b.n	800bd10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	2180      	movs	r1, #128	@ 0x80
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f000 ffc7 	bl	800cc4c <UART_WaitOnFlagUntilTimeout>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d005      	beq.n	800bcd0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2220      	movs	r2, #32
 800bcc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bccc:	2303      	movs	r3, #3
 800bcce:	e03d      	b.n	800bd4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10b      	bne.n	800bcee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	881b      	ldrh	r3, [r3, #0]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bce4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	3302      	adds	r3, #2
 800bcea:	61bb      	str	r3, [r7, #24]
 800bcec:	e007      	b.n	800bcfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	781a      	ldrb	r2, [r3, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	3b01      	subs	r3, #1
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1c8      	bne.n	800bcae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	2200      	movs	r2, #0
 800bd24:	2140      	movs	r1, #64	@ 0x40
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f000 ff90 	bl	800cc4c <UART_WaitOnFlagUntilTimeout>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d005      	beq.n	800bd3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2220      	movs	r2, #32
 800bd36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	e006      	b.n	800bd4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2220      	movs	r2, #32
 800bd42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	e000      	b.n	800bd4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bd4a:	2302      	movs	r3, #2
  }
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3720      	adds	r7, #32
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b08a      	sub	sp, #40	@ 0x28
 800bd58:	af02      	add	r7, sp, #8
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	603b      	str	r3, [r7, #0]
 800bd60:	4613      	mov	r3, r2
 800bd62:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd6a:	2b20      	cmp	r3, #32
 800bd6c:	f040 80b5 	bne.w	800beda <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d002      	beq.n	800bd7c <HAL_UART_Receive+0x28>
 800bd76:	88fb      	ldrh	r3, [r7, #6]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e0ad      	b.n	800bedc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2222      	movs	r2, #34	@ 0x22
 800bd8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2200      	movs	r2, #0
 800bd94:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd96:	f7f6 f835 	bl	8001e04 <HAL_GetTick>
 800bd9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	88fa      	ldrh	r2, [r7, #6]
 800bda0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	88fa      	ldrh	r2, [r7, #6]
 800bda8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdb4:	d10e      	bne.n	800bdd4 <HAL_UART_Receive+0x80>
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d105      	bne.n	800bdca <HAL_UART_Receive+0x76>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bdc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bdc8:	e02d      	b.n	800be26 <HAL_UART_Receive+0xd2>
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	22ff      	movs	r2, #255	@ 0xff
 800bdce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bdd2:	e028      	b.n	800be26 <HAL_UART_Receive+0xd2>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10d      	bne.n	800bdf8 <HAL_UART_Receive+0xa4>
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d104      	bne.n	800bdee <HAL_UART_Receive+0x9a>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	22ff      	movs	r2, #255	@ 0xff
 800bde8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bdec:	e01b      	b.n	800be26 <HAL_UART_Receive+0xd2>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	227f      	movs	r2, #127	@ 0x7f
 800bdf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bdf6:	e016      	b.n	800be26 <HAL_UART_Receive+0xd2>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be00:	d10d      	bne.n	800be1e <HAL_UART_Receive+0xca>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d104      	bne.n	800be14 <HAL_UART_Receive+0xc0>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	227f      	movs	r2, #127	@ 0x7f
 800be0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800be12:	e008      	b.n	800be26 <HAL_UART_Receive+0xd2>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	223f      	movs	r2, #63	@ 0x3f
 800be18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800be1c:	e003      	b.n	800be26 <HAL_UART_Receive+0xd2>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800be2c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be36:	d108      	bne.n	800be4a <HAL_UART_Receive+0xf6>
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d104      	bne.n	800be4a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800be40:	2300      	movs	r3, #0
 800be42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	61bb      	str	r3, [r7, #24]
 800be48:	e003      	b.n	800be52 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be4e:	2300      	movs	r3, #0
 800be50:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800be52:	e036      	b.n	800bec2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2200      	movs	r2, #0
 800be5c:	2120      	movs	r1, #32
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f000 fef4 	bl	800cc4c <UART_WaitOnFlagUntilTimeout>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d005      	beq.n	800be76 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2220      	movs	r2, #32
 800be6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800be72:	2303      	movs	r3, #3
 800be74:	e032      	b.n	800bedc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10c      	bne.n	800be96 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be82:	b29a      	uxth	r2, r3
 800be84:	8a7b      	ldrh	r3, [r7, #18]
 800be86:	4013      	ands	r3, r2
 800be88:	b29a      	uxth	r2, r3
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	3302      	adds	r3, #2
 800be92:	61bb      	str	r3, [r7, #24]
 800be94:	e00c      	b.n	800beb0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	8a7b      	ldrh	r3, [r7, #18]
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	4013      	ands	r3, r2
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	3301      	adds	r3, #1
 800beae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	3b01      	subs	r3, #1
 800beba:	b29a      	uxth	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bec8:	b29b      	uxth	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1c2      	bne.n	800be54 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2220      	movs	r2, #32
 800bed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	e000      	b.n	800bedc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800beda:	2302      	movs	r3, #2
  }
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3720      	adds	r7, #32
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bee8:	b092      	sub	sp, #72	@ 0x48
 800beea:	af00      	add	r7, sp, #0
 800beec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	689a      	ldr	r2, [r3, #8]
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	431a      	orrs	r2, r3
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	431a      	orrs	r2, r3
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	69db      	ldr	r3, [r3, #28]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	4bbe      	ldr	r3, [pc, #760]	@ (800c20c <UART_SetConfig+0x328>)
 800bf14:	4013      	ands	r3, r2
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	6812      	ldr	r2, [r2, #0]
 800bf1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf1c:	430b      	orrs	r3, r1
 800bf1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	68da      	ldr	r2, [r3, #12]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	430a      	orrs	r2, r1
 800bf34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4ab3      	ldr	r2, [pc, #716]	@ (800c210 <UART_SetConfig+0x32c>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d004      	beq.n	800bf50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	6a1b      	ldr	r3, [r3, #32]
 800bf4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	689a      	ldr	r2, [r3, #8]
 800bf56:	4baf      	ldr	r3, [pc, #700]	@ (800c214 <UART_SetConfig+0x330>)
 800bf58:	4013      	ands	r3, r2
 800bf5a:	697a      	ldr	r2, [r7, #20]
 800bf5c:	6812      	ldr	r2, [r2, #0]
 800bf5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf60:	430b      	orrs	r3, r1
 800bf62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf6a:	f023 010f 	bic.w	r1, r3, #15
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	430a      	orrs	r2, r1
 800bf78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4aa6      	ldr	r2, [pc, #664]	@ (800c218 <UART_SetConfig+0x334>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d177      	bne.n	800c074 <UART_SetConfig+0x190>
 800bf84:	4ba5      	ldr	r3, [pc, #660]	@ (800c21c <UART_SetConfig+0x338>)
 800bf86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf8c:	2b28      	cmp	r3, #40	@ 0x28
 800bf8e:	d86d      	bhi.n	800c06c <UART_SetConfig+0x188>
 800bf90:	a201      	add	r2, pc, #4	@ (adr r2, 800bf98 <UART_SetConfig+0xb4>)
 800bf92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf96:	bf00      	nop
 800bf98:	0800c03d 	.word	0x0800c03d
 800bf9c:	0800c06d 	.word	0x0800c06d
 800bfa0:	0800c06d 	.word	0x0800c06d
 800bfa4:	0800c06d 	.word	0x0800c06d
 800bfa8:	0800c06d 	.word	0x0800c06d
 800bfac:	0800c06d 	.word	0x0800c06d
 800bfb0:	0800c06d 	.word	0x0800c06d
 800bfb4:	0800c06d 	.word	0x0800c06d
 800bfb8:	0800c045 	.word	0x0800c045
 800bfbc:	0800c06d 	.word	0x0800c06d
 800bfc0:	0800c06d 	.word	0x0800c06d
 800bfc4:	0800c06d 	.word	0x0800c06d
 800bfc8:	0800c06d 	.word	0x0800c06d
 800bfcc:	0800c06d 	.word	0x0800c06d
 800bfd0:	0800c06d 	.word	0x0800c06d
 800bfd4:	0800c06d 	.word	0x0800c06d
 800bfd8:	0800c04d 	.word	0x0800c04d
 800bfdc:	0800c06d 	.word	0x0800c06d
 800bfe0:	0800c06d 	.word	0x0800c06d
 800bfe4:	0800c06d 	.word	0x0800c06d
 800bfe8:	0800c06d 	.word	0x0800c06d
 800bfec:	0800c06d 	.word	0x0800c06d
 800bff0:	0800c06d 	.word	0x0800c06d
 800bff4:	0800c06d 	.word	0x0800c06d
 800bff8:	0800c055 	.word	0x0800c055
 800bffc:	0800c06d 	.word	0x0800c06d
 800c000:	0800c06d 	.word	0x0800c06d
 800c004:	0800c06d 	.word	0x0800c06d
 800c008:	0800c06d 	.word	0x0800c06d
 800c00c:	0800c06d 	.word	0x0800c06d
 800c010:	0800c06d 	.word	0x0800c06d
 800c014:	0800c06d 	.word	0x0800c06d
 800c018:	0800c05d 	.word	0x0800c05d
 800c01c:	0800c06d 	.word	0x0800c06d
 800c020:	0800c06d 	.word	0x0800c06d
 800c024:	0800c06d 	.word	0x0800c06d
 800c028:	0800c06d 	.word	0x0800c06d
 800c02c:	0800c06d 	.word	0x0800c06d
 800c030:	0800c06d 	.word	0x0800c06d
 800c034:	0800c06d 	.word	0x0800c06d
 800c038:	0800c065 	.word	0x0800c065
 800c03c:	2301      	movs	r3, #1
 800c03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c042:	e222      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c044:	2304      	movs	r3, #4
 800c046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c04a:	e21e      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c04c:	2308      	movs	r3, #8
 800c04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c052:	e21a      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c054:	2310      	movs	r3, #16
 800c056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c05a:	e216      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c05c:	2320      	movs	r3, #32
 800c05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c062:	e212      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c064:	2340      	movs	r3, #64	@ 0x40
 800c066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c06a:	e20e      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c06c:	2380      	movs	r3, #128	@ 0x80
 800c06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c072:	e20a      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a69      	ldr	r2, [pc, #420]	@ (800c220 <UART_SetConfig+0x33c>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d130      	bne.n	800c0e0 <UART_SetConfig+0x1fc>
 800c07e:	4b67      	ldr	r3, [pc, #412]	@ (800c21c <UART_SetConfig+0x338>)
 800c080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c082:	f003 0307 	and.w	r3, r3, #7
 800c086:	2b05      	cmp	r3, #5
 800c088:	d826      	bhi.n	800c0d8 <UART_SetConfig+0x1f4>
 800c08a:	a201      	add	r2, pc, #4	@ (adr r2, 800c090 <UART_SetConfig+0x1ac>)
 800c08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c090:	0800c0a9 	.word	0x0800c0a9
 800c094:	0800c0b1 	.word	0x0800c0b1
 800c098:	0800c0b9 	.word	0x0800c0b9
 800c09c:	0800c0c1 	.word	0x0800c0c1
 800c0a0:	0800c0c9 	.word	0x0800c0c9
 800c0a4:	0800c0d1 	.word	0x0800c0d1
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ae:	e1ec      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c0b0:	2304      	movs	r3, #4
 800c0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0b6:	e1e8      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c0b8:	2308      	movs	r3, #8
 800c0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0be:	e1e4      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c0c0:	2310      	movs	r3, #16
 800c0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0c6:	e1e0      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c0c8:	2320      	movs	r3, #32
 800c0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ce:	e1dc      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c0d0:	2340      	movs	r3, #64	@ 0x40
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0d6:	e1d8      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c0d8:	2380      	movs	r3, #128	@ 0x80
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0de:	e1d4      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a4f      	ldr	r2, [pc, #316]	@ (800c224 <UART_SetConfig+0x340>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d130      	bne.n	800c14c <UART_SetConfig+0x268>
 800c0ea:	4b4c      	ldr	r3, [pc, #304]	@ (800c21c <UART_SetConfig+0x338>)
 800c0ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ee:	f003 0307 	and.w	r3, r3, #7
 800c0f2:	2b05      	cmp	r3, #5
 800c0f4:	d826      	bhi.n	800c144 <UART_SetConfig+0x260>
 800c0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0fc <UART_SetConfig+0x218>)
 800c0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0fc:	0800c115 	.word	0x0800c115
 800c100:	0800c11d 	.word	0x0800c11d
 800c104:	0800c125 	.word	0x0800c125
 800c108:	0800c12d 	.word	0x0800c12d
 800c10c:	0800c135 	.word	0x0800c135
 800c110:	0800c13d 	.word	0x0800c13d
 800c114:	2300      	movs	r3, #0
 800c116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c11a:	e1b6      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c11c:	2304      	movs	r3, #4
 800c11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c122:	e1b2      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c124:	2308      	movs	r3, #8
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c12a:	e1ae      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c12c:	2310      	movs	r3, #16
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c132:	e1aa      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c134:	2320      	movs	r3, #32
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c13a:	e1a6      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c13c:	2340      	movs	r3, #64	@ 0x40
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c142:	e1a2      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c144:	2380      	movs	r3, #128	@ 0x80
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14a:	e19e      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a35      	ldr	r2, [pc, #212]	@ (800c228 <UART_SetConfig+0x344>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d130      	bne.n	800c1b8 <UART_SetConfig+0x2d4>
 800c156:	4b31      	ldr	r3, [pc, #196]	@ (800c21c <UART_SetConfig+0x338>)
 800c158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c15a:	f003 0307 	and.w	r3, r3, #7
 800c15e:	2b05      	cmp	r3, #5
 800c160:	d826      	bhi.n	800c1b0 <UART_SetConfig+0x2cc>
 800c162:	a201      	add	r2, pc, #4	@ (adr r2, 800c168 <UART_SetConfig+0x284>)
 800c164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c168:	0800c181 	.word	0x0800c181
 800c16c:	0800c189 	.word	0x0800c189
 800c170:	0800c191 	.word	0x0800c191
 800c174:	0800c199 	.word	0x0800c199
 800c178:	0800c1a1 	.word	0x0800c1a1
 800c17c:	0800c1a9 	.word	0x0800c1a9
 800c180:	2300      	movs	r3, #0
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c186:	e180      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c188:	2304      	movs	r3, #4
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c18e:	e17c      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c190:	2308      	movs	r3, #8
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c196:	e178      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c198:	2310      	movs	r3, #16
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c19e:	e174      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c1a0:	2320      	movs	r3, #32
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1a6:	e170      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c1a8:	2340      	movs	r3, #64	@ 0x40
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ae:	e16c      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c1b0:	2380      	movs	r3, #128	@ 0x80
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b6:	e168      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a1b      	ldr	r2, [pc, #108]	@ (800c22c <UART_SetConfig+0x348>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d142      	bne.n	800c248 <UART_SetConfig+0x364>
 800c1c2:	4b16      	ldr	r3, [pc, #88]	@ (800c21c <UART_SetConfig+0x338>)
 800c1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1c6:	f003 0307 	and.w	r3, r3, #7
 800c1ca:	2b05      	cmp	r3, #5
 800c1cc:	d838      	bhi.n	800c240 <UART_SetConfig+0x35c>
 800c1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c1d4 <UART_SetConfig+0x2f0>)
 800c1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d4:	0800c1ed 	.word	0x0800c1ed
 800c1d8:	0800c1f5 	.word	0x0800c1f5
 800c1dc:	0800c1fd 	.word	0x0800c1fd
 800c1e0:	0800c205 	.word	0x0800c205
 800c1e4:	0800c231 	.word	0x0800c231
 800c1e8:	0800c239 	.word	0x0800c239
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1f2:	e14a      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c1f4:	2304      	movs	r3, #4
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1fa:	e146      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c1fc:	2308      	movs	r3, #8
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c202:	e142      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c204:	2310      	movs	r3, #16
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c20a:	e13e      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c20c:	cfff69f3 	.word	0xcfff69f3
 800c210:	58000c00 	.word	0x58000c00
 800c214:	11fff4ff 	.word	0x11fff4ff
 800c218:	40011000 	.word	0x40011000
 800c21c:	58024400 	.word	0x58024400
 800c220:	40004400 	.word	0x40004400
 800c224:	40004800 	.word	0x40004800
 800c228:	40004c00 	.word	0x40004c00
 800c22c:	40005000 	.word	0x40005000
 800c230:	2320      	movs	r3, #32
 800c232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c236:	e128      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c238:	2340      	movs	r3, #64	@ 0x40
 800c23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c23e:	e124      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c240:	2380      	movs	r3, #128	@ 0x80
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c246:	e120      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4acb      	ldr	r2, [pc, #812]	@ (800c57c <UART_SetConfig+0x698>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d176      	bne.n	800c340 <UART_SetConfig+0x45c>
 800c252:	4bcb      	ldr	r3, [pc, #812]	@ (800c580 <UART_SetConfig+0x69c>)
 800c254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c256:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c25a:	2b28      	cmp	r3, #40	@ 0x28
 800c25c:	d86c      	bhi.n	800c338 <UART_SetConfig+0x454>
 800c25e:	a201      	add	r2, pc, #4	@ (adr r2, 800c264 <UART_SetConfig+0x380>)
 800c260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c264:	0800c309 	.word	0x0800c309
 800c268:	0800c339 	.word	0x0800c339
 800c26c:	0800c339 	.word	0x0800c339
 800c270:	0800c339 	.word	0x0800c339
 800c274:	0800c339 	.word	0x0800c339
 800c278:	0800c339 	.word	0x0800c339
 800c27c:	0800c339 	.word	0x0800c339
 800c280:	0800c339 	.word	0x0800c339
 800c284:	0800c311 	.word	0x0800c311
 800c288:	0800c339 	.word	0x0800c339
 800c28c:	0800c339 	.word	0x0800c339
 800c290:	0800c339 	.word	0x0800c339
 800c294:	0800c339 	.word	0x0800c339
 800c298:	0800c339 	.word	0x0800c339
 800c29c:	0800c339 	.word	0x0800c339
 800c2a0:	0800c339 	.word	0x0800c339
 800c2a4:	0800c319 	.word	0x0800c319
 800c2a8:	0800c339 	.word	0x0800c339
 800c2ac:	0800c339 	.word	0x0800c339
 800c2b0:	0800c339 	.word	0x0800c339
 800c2b4:	0800c339 	.word	0x0800c339
 800c2b8:	0800c339 	.word	0x0800c339
 800c2bc:	0800c339 	.word	0x0800c339
 800c2c0:	0800c339 	.word	0x0800c339
 800c2c4:	0800c321 	.word	0x0800c321
 800c2c8:	0800c339 	.word	0x0800c339
 800c2cc:	0800c339 	.word	0x0800c339
 800c2d0:	0800c339 	.word	0x0800c339
 800c2d4:	0800c339 	.word	0x0800c339
 800c2d8:	0800c339 	.word	0x0800c339
 800c2dc:	0800c339 	.word	0x0800c339
 800c2e0:	0800c339 	.word	0x0800c339
 800c2e4:	0800c329 	.word	0x0800c329
 800c2e8:	0800c339 	.word	0x0800c339
 800c2ec:	0800c339 	.word	0x0800c339
 800c2f0:	0800c339 	.word	0x0800c339
 800c2f4:	0800c339 	.word	0x0800c339
 800c2f8:	0800c339 	.word	0x0800c339
 800c2fc:	0800c339 	.word	0x0800c339
 800c300:	0800c339 	.word	0x0800c339
 800c304:	0800c331 	.word	0x0800c331
 800c308:	2301      	movs	r3, #1
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c30e:	e0bc      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c310:	2304      	movs	r3, #4
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c316:	e0b8      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c318:	2308      	movs	r3, #8
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e0b4      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c320:	2310      	movs	r3, #16
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e0b0      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c328:	2320      	movs	r3, #32
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e0ac      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c330:	2340      	movs	r3, #64	@ 0x40
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e0a8      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c338:	2380      	movs	r3, #128	@ 0x80
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33e:	e0a4      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a8f      	ldr	r2, [pc, #572]	@ (800c584 <UART_SetConfig+0x6a0>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d130      	bne.n	800c3ac <UART_SetConfig+0x4c8>
 800c34a:	4b8d      	ldr	r3, [pc, #564]	@ (800c580 <UART_SetConfig+0x69c>)
 800c34c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c34e:	f003 0307 	and.w	r3, r3, #7
 800c352:	2b05      	cmp	r3, #5
 800c354:	d826      	bhi.n	800c3a4 <UART_SetConfig+0x4c0>
 800c356:	a201      	add	r2, pc, #4	@ (adr r2, 800c35c <UART_SetConfig+0x478>)
 800c358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35c:	0800c375 	.word	0x0800c375
 800c360:	0800c37d 	.word	0x0800c37d
 800c364:	0800c385 	.word	0x0800c385
 800c368:	0800c38d 	.word	0x0800c38d
 800c36c:	0800c395 	.word	0x0800c395
 800c370:	0800c39d 	.word	0x0800c39d
 800c374:	2300      	movs	r3, #0
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37a:	e086      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c37c:	2304      	movs	r3, #4
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c382:	e082      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c384:	2308      	movs	r3, #8
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38a:	e07e      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c38c:	2310      	movs	r3, #16
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c392:	e07a      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c394:	2320      	movs	r3, #32
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39a:	e076      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c39c:	2340      	movs	r3, #64	@ 0x40
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a2:	e072      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c3a4:	2380      	movs	r3, #128	@ 0x80
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3aa:	e06e      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a75      	ldr	r2, [pc, #468]	@ (800c588 <UART_SetConfig+0x6a4>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d130      	bne.n	800c418 <UART_SetConfig+0x534>
 800c3b6:	4b72      	ldr	r3, [pc, #456]	@ (800c580 <UART_SetConfig+0x69c>)
 800c3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ba:	f003 0307 	and.w	r3, r3, #7
 800c3be:	2b05      	cmp	r3, #5
 800c3c0:	d826      	bhi.n	800c410 <UART_SetConfig+0x52c>
 800c3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c8 <UART_SetConfig+0x4e4>)
 800c3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c8:	0800c3e1 	.word	0x0800c3e1
 800c3cc:	0800c3e9 	.word	0x0800c3e9
 800c3d0:	0800c3f1 	.word	0x0800c3f1
 800c3d4:	0800c3f9 	.word	0x0800c3f9
 800c3d8:	0800c401 	.word	0x0800c401
 800c3dc:	0800c409 	.word	0x0800c409
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e6:	e050      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c3e8:	2304      	movs	r3, #4
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ee:	e04c      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c3f0:	2308      	movs	r3, #8
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f6:	e048      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c3f8:	2310      	movs	r3, #16
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e044      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c400:	2320      	movs	r3, #32
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c406:	e040      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c408:	2340      	movs	r3, #64	@ 0x40
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40e:	e03c      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c410:	2380      	movs	r3, #128	@ 0x80
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c416:	e038      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a5b      	ldr	r2, [pc, #364]	@ (800c58c <UART_SetConfig+0x6a8>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d130      	bne.n	800c484 <UART_SetConfig+0x5a0>
 800c422:	4b57      	ldr	r3, [pc, #348]	@ (800c580 <UART_SetConfig+0x69c>)
 800c424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b05      	cmp	r3, #5
 800c42c:	d826      	bhi.n	800c47c <UART_SetConfig+0x598>
 800c42e:	a201      	add	r2, pc, #4	@ (adr r2, 800c434 <UART_SetConfig+0x550>)
 800c430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c434:	0800c44d 	.word	0x0800c44d
 800c438:	0800c455 	.word	0x0800c455
 800c43c:	0800c45d 	.word	0x0800c45d
 800c440:	0800c465 	.word	0x0800c465
 800c444:	0800c46d 	.word	0x0800c46d
 800c448:	0800c475 	.word	0x0800c475
 800c44c:	2302      	movs	r3, #2
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c452:	e01a      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c454:	2304      	movs	r3, #4
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45a:	e016      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c45c:	2308      	movs	r3, #8
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c462:	e012      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c464:	2310      	movs	r3, #16
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c46a:	e00e      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c46c:	2320      	movs	r3, #32
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c472:	e00a      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c474:	2340      	movs	r3, #64	@ 0x40
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47a:	e006      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c47c:	2380      	movs	r3, #128	@ 0x80
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c482:	e002      	b.n	800c48a <UART_SetConfig+0x5a6>
 800c484:	2380      	movs	r3, #128	@ 0x80
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a3f      	ldr	r2, [pc, #252]	@ (800c58c <UART_SetConfig+0x6a8>)
 800c490:	4293      	cmp	r3, r2
 800c492:	f040 80f8 	bne.w	800c686 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c496:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c49a:	2b20      	cmp	r3, #32
 800c49c:	dc46      	bgt.n	800c52c <UART_SetConfig+0x648>
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	f2c0 8082 	blt.w	800c5a8 <UART_SetConfig+0x6c4>
 800c4a4:	3b02      	subs	r3, #2
 800c4a6:	2b1e      	cmp	r3, #30
 800c4a8:	d87e      	bhi.n	800c5a8 <UART_SetConfig+0x6c4>
 800c4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b0 <UART_SetConfig+0x5cc>)
 800c4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b0:	0800c533 	.word	0x0800c533
 800c4b4:	0800c5a9 	.word	0x0800c5a9
 800c4b8:	0800c53b 	.word	0x0800c53b
 800c4bc:	0800c5a9 	.word	0x0800c5a9
 800c4c0:	0800c5a9 	.word	0x0800c5a9
 800c4c4:	0800c5a9 	.word	0x0800c5a9
 800c4c8:	0800c54b 	.word	0x0800c54b
 800c4cc:	0800c5a9 	.word	0x0800c5a9
 800c4d0:	0800c5a9 	.word	0x0800c5a9
 800c4d4:	0800c5a9 	.word	0x0800c5a9
 800c4d8:	0800c5a9 	.word	0x0800c5a9
 800c4dc:	0800c5a9 	.word	0x0800c5a9
 800c4e0:	0800c5a9 	.word	0x0800c5a9
 800c4e4:	0800c5a9 	.word	0x0800c5a9
 800c4e8:	0800c55b 	.word	0x0800c55b
 800c4ec:	0800c5a9 	.word	0x0800c5a9
 800c4f0:	0800c5a9 	.word	0x0800c5a9
 800c4f4:	0800c5a9 	.word	0x0800c5a9
 800c4f8:	0800c5a9 	.word	0x0800c5a9
 800c4fc:	0800c5a9 	.word	0x0800c5a9
 800c500:	0800c5a9 	.word	0x0800c5a9
 800c504:	0800c5a9 	.word	0x0800c5a9
 800c508:	0800c5a9 	.word	0x0800c5a9
 800c50c:	0800c5a9 	.word	0x0800c5a9
 800c510:	0800c5a9 	.word	0x0800c5a9
 800c514:	0800c5a9 	.word	0x0800c5a9
 800c518:	0800c5a9 	.word	0x0800c5a9
 800c51c:	0800c5a9 	.word	0x0800c5a9
 800c520:	0800c5a9 	.word	0x0800c5a9
 800c524:	0800c5a9 	.word	0x0800c5a9
 800c528:	0800c59b 	.word	0x0800c59b
 800c52c:	2b40      	cmp	r3, #64	@ 0x40
 800c52e:	d037      	beq.n	800c5a0 <UART_SetConfig+0x6bc>
 800c530:	e03a      	b.n	800c5a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c532:	f7fc f9d3 	bl	80088dc <HAL_RCCEx_GetD3PCLK1Freq>
 800c536:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c538:	e03c      	b.n	800c5b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c53a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fc f9e2 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c548:	e034      	b.n	800c5b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c54a:	f107 0318 	add.w	r3, r7, #24
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fc fb2e 	bl	8008bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c558:	e02c      	b.n	800c5b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c55a:	4b09      	ldr	r3, [pc, #36]	@ (800c580 <UART_SetConfig+0x69c>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 0320 	and.w	r3, r3, #32
 800c562:	2b00      	cmp	r3, #0
 800c564:	d016      	beq.n	800c594 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c566:	4b06      	ldr	r3, [pc, #24]	@ (800c580 <UART_SetConfig+0x69c>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	08db      	lsrs	r3, r3, #3
 800c56c:	f003 0303 	and.w	r3, r3, #3
 800c570:	4a07      	ldr	r2, [pc, #28]	@ (800c590 <UART_SetConfig+0x6ac>)
 800c572:	fa22 f303 	lsr.w	r3, r2, r3
 800c576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c578:	e01c      	b.n	800c5b4 <UART_SetConfig+0x6d0>
 800c57a:	bf00      	nop
 800c57c:	40011400 	.word	0x40011400
 800c580:	58024400 	.word	0x58024400
 800c584:	40007800 	.word	0x40007800
 800c588:	40007c00 	.word	0x40007c00
 800c58c:	58000c00 	.word	0x58000c00
 800c590:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c594:	4b9d      	ldr	r3, [pc, #628]	@ (800c80c <UART_SetConfig+0x928>)
 800c596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c598:	e00c      	b.n	800c5b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c59a:	4b9d      	ldr	r3, [pc, #628]	@ (800c810 <UART_SetConfig+0x92c>)
 800c59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c59e:	e009      	b.n	800c5b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5a6:	e005      	b.n	800c5b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c5b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c5b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f000 81de 	beq.w	800c978 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c0:	4a94      	ldr	r2, [pc, #592]	@ (800c814 <UART_SetConfig+0x930>)
 800c5c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5ce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	685a      	ldr	r2, [r3, #4]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	005b      	lsls	r3, r3, #1
 800c5d8:	4413      	add	r3, r2
 800c5da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d305      	bcc.n	800c5ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c5e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d903      	bls.n	800c5f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c5f2:	e1c1      	b.n	800c978 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	60bb      	str	r3, [r7, #8]
 800c5fa:	60fa      	str	r2, [r7, #12]
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c600:	4a84      	ldr	r2, [pc, #528]	@ (800c814 <UART_SetConfig+0x930>)
 800c602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c606:	b29b      	uxth	r3, r3
 800c608:	2200      	movs	r2, #0
 800c60a:	603b      	str	r3, [r7, #0]
 800c60c:	607a      	str	r2, [r7, #4]
 800c60e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c616:	f7f3 feb3 	bl	8000380 <__aeabi_uldivmod>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	4610      	mov	r0, r2
 800c620:	4619      	mov	r1, r3
 800c622:	f04f 0200 	mov.w	r2, #0
 800c626:	f04f 0300 	mov.w	r3, #0
 800c62a:	020b      	lsls	r3, r1, #8
 800c62c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c630:	0202      	lsls	r2, r0, #8
 800c632:	6979      	ldr	r1, [r7, #20]
 800c634:	6849      	ldr	r1, [r1, #4]
 800c636:	0849      	lsrs	r1, r1, #1
 800c638:	2000      	movs	r0, #0
 800c63a:	460c      	mov	r4, r1
 800c63c:	4605      	mov	r5, r0
 800c63e:	eb12 0804 	adds.w	r8, r2, r4
 800c642:	eb43 0905 	adc.w	r9, r3, r5
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	469a      	mov	sl, r3
 800c64e:	4693      	mov	fp, r2
 800c650:	4652      	mov	r2, sl
 800c652:	465b      	mov	r3, fp
 800c654:	4640      	mov	r0, r8
 800c656:	4649      	mov	r1, r9
 800c658:	f7f3 fe92 	bl	8000380 <__aeabi_uldivmod>
 800c65c:	4602      	mov	r2, r0
 800c65e:	460b      	mov	r3, r1
 800c660:	4613      	mov	r3, r2
 800c662:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c66a:	d308      	bcc.n	800c67e <UART_SetConfig+0x79a>
 800c66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c672:	d204      	bcs.n	800c67e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c67a:	60da      	str	r2, [r3, #12]
 800c67c:	e17c      	b.n	800c978 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c684:	e178      	b.n	800c978 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	69db      	ldr	r3, [r3, #28]
 800c68a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c68e:	f040 80c5 	bne.w	800c81c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c692:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c696:	2b20      	cmp	r3, #32
 800c698:	dc48      	bgt.n	800c72c <UART_SetConfig+0x848>
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	db7b      	blt.n	800c796 <UART_SetConfig+0x8b2>
 800c69e:	2b20      	cmp	r3, #32
 800c6a0:	d879      	bhi.n	800c796 <UART_SetConfig+0x8b2>
 800c6a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c6a8 <UART_SetConfig+0x7c4>)
 800c6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a8:	0800c733 	.word	0x0800c733
 800c6ac:	0800c73b 	.word	0x0800c73b
 800c6b0:	0800c797 	.word	0x0800c797
 800c6b4:	0800c797 	.word	0x0800c797
 800c6b8:	0800c743 	.word	0x0800c743
 800c6bc:	0800c797 	.word	0x0800c797
 800c6c0:	0800c797 	.word	0x0800c797
 800c6c4:	0800c797 	.word	0x0800c797
 800c6c8:	0800c753 	.word	0x0800c753
 800c6cc:	0800c797 	.word	0x0800c797
 800c6d0:	0800c797 	.word	0x0800c797
 800c6d4:	0800c797 	.word	0x0800c797
 800c6d8:	0800c797 	.word	0x0800c797
 800c6dc:	0800c797 	.word	0x0800c797
 800c6e0:	0800c797 	.word	0x0800c797
 800c6e4:	0800c797 	.word	0x0800c797
 800c6e8:	0800c763 	.word	0x0800c763
 800c6ec:	0800c797 	.word	0x0800c797
 800c6f0:	0800c797 	.word	0x0800c797
 800c6f4:	0800c797 	.word	0x0800c797
 800c6f8:	0800c797 	.word	0x0800c797
 800c6fc:	0800c797 	.word	0x0800c797
 800c700:	0800c797 	.word	0x0800c797
 800c704:	0800c797 	.word	0x0800c797
 800c708:	0800c797 	.word	0x0800c797
 800c70c:	0800c797 	.word	0x0800c797
 800c710:	0800c797 	.word	0x0800c797
 800c714:	0800c797 	.word	0x0800c797
 800c718:	0800c797 	.word	0x0800c797
 800c71c:	0800c797 	.word	0x0800c797
 800c720:	0800c797 	.word	0x0800c797
 800c724:	0800c797 	.word	0x0800c797
 800c728:	0800c789 	.word	0x0800c789
 800c72c:	2b40      	cmp	r3, #64	@ 0x40
 800c72e:	d02e      	beq.n	800c78e <UART_SetConfig+0x8aa>
 800c730:	e031      	b.n	800c796 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c732:	f7fa f91d 	bl	8006970 <HAL_RCC_GetPCLK1Freq>
 800c736:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c738:	e033      	b.n	800c7a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c73a:	f7fa f92f 	bl	800699c <HAL_RCC_GetPCLK2Freq>
 800c73e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c740:	e02f      	b.n	800c7a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c746:	4618      	mov	r0, r3
 800c748:	f7fc f8de 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c750:	e027      	b.n	800c7a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c752:	f107 0318 	add.w	r3, r7, #24
 800c756:	4618      	mov	r0, r3
 800c758:	f7fc fa2a 	bl	8008bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c760:	e01f      	b.n	800c7a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c762:	4b2d      	ldr	r3, [pc, #180]	@ (800c818 <UART_SetConfig+0x934>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f003 0320 	and.w	r3, r3, #32
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d009      	beq.n	800c782 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c76e:	4b2a      	ldr	r3, [pc, #168]	@ (800c818 <UART_SetConfig+0x934>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	08db      	lsrs	r3, r3, #3
 800c774:	f003 0303 	and.w	r3, r3, #3
 800c778:	4a24      	ldr	r2, [pc, #144]	@ (800c80c <UART_SetConfig+0x928>)
 800c77a:	fa22 f303 	lsr.w	r3, r2, r3
 800c77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c780:	e00f      	b.n	800c7a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c782:	4b22      	ldr	r3, [pc, #136]	@ (800c80c <UART_SetConfig+0x928>)
 800c784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c786:	e00c      	b.n	800c7a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c788:	4b21      	ldr	r3, [pc, #132]	@ (800c810 <UART_SetConfig+0x92c>)
 800c78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c78c:	e009      	b.n	800c7a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c78e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c794:	e005      	b.n	800c7a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c796:	2300      	movs	r3, #0
 800c798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c7a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c7a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f000 80e7 	beq.w	800c978 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ae:	4a19      	ldr	r2, [pc, #100]	@ (800c814 <UART_SetConfig+0x930>)
 800c7b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7bc:	005a      	lsls	r2, r3, #1
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	085b      	lsrs	r3, r3, #1
 800c7c4:	441a      	add	r2, r3
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d2:	2b0f      	cmp	r3, #15
 800c7d4:	d916      	bls.n	800c804 <UART_SetConfig+0x920>
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7dc:	d212      	bcs.n	800c804 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	f023 030f 	bic.w	r3, r3, #15
 800c7e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ea:	085b      	lsrs	r3, r3, #1
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	f003 0307 	and.w	r3, r3, #7
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c800:	60da      	str	r2, [r3, #12]
 800c802:	e0b9      	b.n	800c978 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c804:	2301      	movs	r3, #1
 800c806:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c80a:	e0b5      	b.n	800c978 <UART_SetConfig+0xa94>
 800c80c:	03d09000 	.word	0x03d09000
 800c810:	003d0900 	.word	0x003d0900
 800c814:	08012530 	.word	0x08012530
 800c818:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c81c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c820:	2b20      	cmp	r3, #32
 800c822:	dc49      	bgt.n	800c8b8 <UART_SetConfig+0x9d4>
 800c824:	2b00      	cmp	r3, #0
 800c826:	db7c      	blt.n	800c922 <UART_SetConfig+0xa3e>
 800c828:	2b20      	cmp	r3, #32
 800c82a:	d87a      	bhi.n	800c922 <UART_SetConfig+0xa3e>
 800c82c:	a201      	add	r2, pc, #4	@ (adr r2, 800c834 <UART_SetConfig+0x950>)
 800c82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c832:	bf00      	nop
 800c834:	0800c8bf 	.word	0x0800c8bf
 800c838:	0800c8c7 	.word	0x0800c8c7
 800c83c:	0800c923 	.word	0x0800c923
 800c840:	0800c923 	.word	0x0800c923
 800c844:	0800c8cf 	.word	0x0800c8cf
 800c848:	0800c923 	.word	0x0800c923
 800c84c:	0800c923 	.word	0x0800c923
 800c850:	0800c923 	.word	0x0800c923
 800c854:	0800c8df 	.word	0x0800c8df
 800c858:	0800c923 	.word	0x0800c923
 800c85c:	0800c923 	.word	0x0800c923
 800c860:	0800c923 	.word	0x0800c923
 800c864:	0800c923 	.word	0x0800c923
 800c868:	0800c923 	.word	0x0800c923
 800c86c:	0800c923 	.word	0x0800c923
 800c870:	0800c923 	.word	0x0800c923
 800c874:	0800c8ef 	.word	0x0800c8ef
 800c878:	0800c923 	.word	0x0800c923
 800c87c:	0800c923 	.word	0x0800c923
 800c880:	0800c923 	.word	0x0800c923
 800c884:	0800c923 	.word	0x0800c923
 800c888:	0800c923 	.word	0x0800c923
 800c88c:	0800c923 	.word	0x0800c923
 800c890:	0800c923 	.word	0x0800c923
 800c894:	0800c923 	.word	0x0800c923
 800c898:	0800c923 	.word	0x0800c923
 800c89c:	0800c923 	.word	0x0800c923
 800c8a0:	0800c923 	.word	0x0800c923
 800c8a4:	0800c923 	.word	0x0800c923
 800c8a8:	0800c923 	.word	0x0800c923
 800c8ac:	0800c923 	.word	0x0800c923
 800c8b0:	0800c923 	.word	0x0800c923
 800c8b4:	0800c915 	.word	0x0800c915
 800c8b8:	2b40      	cmp	r3, #64	@ 0x40
 800c8ba:	d02e      	beq.n	800c91a <UART_SetConfig+0xa36>
 800c8bc:	e031      	b.n	800c922 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8be:	f7fa f857 	bl	8006970 <HAL_RCC_GetPCLK1Freq>
 800c8c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c8c4:	e033      	b.n	800c92e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8c6:	f7fa f869 	bl	800699c <HAL_RCC_GetPCLK2Freq>
 800c8ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c8cc:	e02f      	b.n	800c92e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7fc f818 	bl	8008908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8dc:	e027      	b.n	800c92e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8de:	f107 0318 	add.w	r3, r7, #24
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fc f964 	bl	8008bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8ec:	e01f      	b.n	800c92e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8ee:	4b2d      	ldr	r3, [pc, #180]	@ (800c9a4 <UART_SetConfig+0xac0>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f003 0320 	and.w	r3, r3, #32
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d009      	beq.n	800c90e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8fa:	4b2a      	ldr	r3, [pc, #168]	@ (800c9a4 <UART_SetConfig+0xac0>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	08db      	lsrs	r3, r3, #3
 800c900:	f003 0303 	and.w	r3, r3, #3
 800c904:	4a28      	ldr	r2, [pc, #160]	@ (800c9a8 <UART_SetConfig+0xac4>)
 800c906:	fa22 f303 	lsr.w	r3, r2, r3
 800c90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c90c:	e00f      	b.n	800c92e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c90e:	4b26      	ldr	r3, [pc, #152]	@ (800c9a8 <UART_SetConfig+0xac4>)
 800c910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c912:	e00c      	b.n	800c92e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c914:	4b25      	ldr	r3, [pc, #148]	@ (800c9ac <UART_SetConfig+0xac8>)
 800c916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c918:	e009      	b.n	800c92e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c91a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c920:	e005      	b.n	800c92e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c922:	2300      	movs	r3, #0
 800c924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c926:	2301      	movs	r3, #1
 800c928:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c92c:	bf00      	nop
    }

    if (pclk != 0U)
 800c92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c930:	2b00      	cmp	r3, #0
 800c932:	d021      	beq.n	800c978 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c938:	4a1d      	ldr	r2, [pc, #116]	@ (800c9b0 <UART_SetConfig+0xacc>)
 800c93a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c93e:	461a      	mov	r2, r3
 800c940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c942:	fbb3 f2f2 	udiv	r2, r3, r2
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	085b      	lsrs	r3, r3, #1
 800c94c:	441a      	add	r2, r3
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	fbb2 f3f3 	udiv	r3, r2, r3
 800c956:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c95a:	2b0f      	cmp	r3, #15
 800c95c:	d909      	bls.n	800c972 <UART_SetConfig+0xa8e>
 800c95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c964:	d205      	bcs.n	800c972 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c968:	b29a      	uxth	r2, r3
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	60da      	str	r2, [r3, #12]
 800c970:	e002      	b.n	800c978 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c972:	2301      	movs	r3, #1
 800c974:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	2201      	movs	r2, #1
 800c984:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	2200      	movs	r2, #0
 800c98c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2200      	movs	r2, #0
 800c992:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c994:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3748      	adds	r7, #72	@ 0x48
 800c99c:	46bd      	mov	sp, r7
 800c99e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9a2:	bf00      	nop
 800c9a4:	58024400 	.word	0x58024400
 800c9a8:	03d09000 	.word	0x03d09000
 800c9ac:	003d0900 	.word	0x003d0900
 800c9b0:	08012530 	.word	0x08012530

0800c9b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9c0:	f003 0308 	and.w	r3, r3, #8
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00a      	beq.n	800c9de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	430a      	orrs	r2, r1
 800c9dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9e2:	f003 0301 	and.w	r3, r3, #1
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00a      	beq.n	800ca00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	430a      	orrs	r2, r1
 800c9fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca04:	f003 0302 	and.w	r3, r3, #2
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00a      	beq.n	800ca22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	430a      	orrs	r2, r1
 800ca20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca26:	f003 0304 	and.w	r3, r3, #4
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00a      	beq.n	800ca44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	430a      	orrs	r2, r1
 800ca42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca48:	f003 0310 	and.w	r3, r3, #16
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00a      	beq.n	800ca66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	430a      	orrs	r2, r1
 800ca64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca6a:	f003 0320 	and.w	r3, r3, #32
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00a      	beq.n	800ca88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	430a      	orrs	r2, r1
 800ca86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d01a      	beq.n	800caca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	430a      	orrs	r2, r1
 800caa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cab2:	d10a      	bne.n	800caca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	430a      	orrs	r2, r1
 800cac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00a      	beq.n	800caec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	430a      	orrs	r2, r1
 800caea:	605a      	str	r2, [r3, #4]
  }
}
 800caec:	bf00      	nop
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b098      	sub	sp, #96	@ 0x60
 800cafc:	af02      	add	r7, sp, #8
 800cafe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb08:	f7f5 f97c 	bl	8001e04 <HAL_GetTick>
 800cb0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f003 0308 	and.w	r3, r3, #8
 800cb18:	2b08      	cmp	r3, #8
 800cb1a:	d12f      	bne.n	800cb7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb24:	2200      	movs	r2, #0
 800cb26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f88e 	bl	800cc4c <UART_WaitOnFlagUntilTimeout>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d022      	beq.n	800cb7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3e:	e853 3f00 	ldrex	r3, [r3]
 800cb42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	461a      	mov	r2, r3
 800cb52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb54:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb5c:	e841 2300 	strex	r3, r2, [r1]
 800cb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1e6      	bne.n	800cb36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2220      	movs	r2, #32
 800cb6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb78:	2303      	movs	r3, #3
 800cb7a:	e063      	b.n	800cc44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 0304 	and.w	r3, r3, #4
 800cb86:	2b04      	cmp	r3, #4
 800cb88:	d149      	bne.n	800cc1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb92:	2200      	movs	r2, #0
 800cb94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f000 f857 	bl	800cc4c <UART_WaitOnFlagUntilTimeout>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d03c      	beq.n	800cc1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbac:	e853 3f00 	ldrex	r3, [r3]
 800cbb0:	623b      	str	r3, [r7, #32]
   return(result);
 800cbb2:	6a3b      	ldr	r3, [r7, #32]
 800cbb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbca:	e841 2300 	strex	r3, r2, [r1]
 800cbce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1e6      	bne.n	800cba4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3308      	adds	r3, #8
 800cbdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	e853 3f00 	ldrex	r3, [r3]
 800cbe4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f023 0301 	bic.w	r3, r3, #1
 800cbec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbf6:	61fa      	str	r2, [r7, #28]
 800cbf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfa:	69b9      	ldr	r1, [r7, #24]
 800cbfc:	69fa      	ldr	r2, [r7, #28]
 800cbfe:	e841 2300 	strex	r3, r2, [r1]
 800cc02:	617b      	str	r3, [r7, #20]
   return(result);
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1e5      	bne.n	800cbd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2220      	movs	r2, #32
 800cc0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	e012      	b.n	800cc44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2220      	movs	r2, #32
 800cc22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2220      	movs	r2, #32
 800cc2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3758      	adds	r7, #88	@ 0x58
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	603b      	str	r3, [r7, #0]
 800cc58:	4613      	mov	r3, r2
 800cc5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc5c:	e04f      	b.n	800ccfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc64:	d04b      	beq.n	800ccfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc66:	f7f5 f8cd 	bl	8001e04 <HAL_GetTick>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	69ba      	ldr	r2, [r7, #24]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d302      	bcc.n	800cc7c <UART_WaitOnFlagUntilTimeout+0x30>
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d101      	bne.n	800cc80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cc7c:	2303      	movs	r3, #3
 800cc7e:	e04e      	b.n	800cd1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 0304 	and.w	r3, r3, #4
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d037      	beq.n	800ccfe <UART_WaitOnFlagUntilTimeout+0xb2>
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	2b80      	cmp	r3, #128	@ 0x80
 800cc92:	d034      	beq.n	800ccfe <UART_WaitOnFlagUntilTimeout+0xb2>
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2b40      	cmp	r3, #64	@ 0x40
 800cc98:	d031      	beq.n	800ccfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	69db      	ldr	r3, [r3, #28]
 800cca0:	f003 0308 	and.w	r3, r3, #8
 800cca4:	2b08      	cmp	r3, #8
 800cca6:	d110      	bne.n	800ccca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2208      	movs	r2, #8
 800ccae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f000 f839 	bl	800cd28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2208      	movs	r2, #8
 800ccba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e029      	b.n	800cd1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	69db      	ldr	r3, [r3, #28]
 800ccd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ccd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ccd8:	d111      	bne.n	800ccfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f000 f81f 	bl	800cd28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2220      	movs	r2, #32
 800ccee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	e00f      	b.n	800cd1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	69da      	ldr	r2, [r3, #28]
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	4013      	ands	r3, r2
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	bf0c      	ite	eq
 800cd0e:	2301      	moveq	r3, #1
 800cd10:	2300      	movne	r3, #0
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	461a      	mov	r2, r3
 800cd16:	79fb      	ldrb	r3, [r7, #7]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d0a0      	beq.n	800cc5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
	...

0800cd28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b095      	sub	sp, #84	@ 0x54
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd38:	e853 3f00 	ldrex	r3, [r3]
 800cd3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd4e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cd56:	e841 2300 	strex	r3, r2, [r1]
 800cd5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1e6      	bne.n	800cd30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	3308      	adds	r3, #8
 800cd68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd6a:	6a3b      	ldr	r3, [r7, #32]
 800cd6c:	e853 3f00 	ldrex	r3, [r3]
 800cd70:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd72:	69fa      	ldr	r2, [r7, #28]
 800cd74:	4b1e      	ldr	r3, [pc, #120]	@ (800cdf0 <UART_EndRxTransfer+0xc8>)
 800cd76:	4013      	ands	r3, r2
 800cd78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	3308      	adds	r3, #8
 800cd80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cd84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd8a:	e841 2300 	strex	r3, r2, [r1]
 800cd8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1e5      	bne.n	800cd62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d118      	bne.n	800cdd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	e853 3f00 	ldrex	r3, [r3]
 800cdaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	f023 0310 	bic.w	r3, r3, #16
 800cdb2:	647b      	str	r3, [r7, #68]	@ 0x44
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	461a      	mov	r2, r3
 800cdba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdbc:	61bb      	str	r3, [r7, #24]
 800cdbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc0:	6979      	ldr	r1, [r7, #20]
 800cdc2:	69ba      	ldr	r2, [r7, #24]
 800cdc4:	e841 2300 	strex	r3, r2, [r1]
 800cdc8:	613b      	str	r3, [r7, #16]
   return(result);
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1e6      	bne.n	800cd9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2220      	movs	r2, #32
 800cdd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cde4:	bf00      	nop
 800cde6:	3754      	adds	r7, #84	@ 0x54
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr
 800cdf0:	effffffe 	.word	0xeffffffe

0800cdf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b085      	sub	sp, #20
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d101      	bne.n	800ce0a <HAL_UARTEx_DisableFifoMode+0x16>
 800ce06:	2302      	movs	r3, #2
 800ce08:	e027      	b.n	800ce5a <HAL_UARTEx_DisableFifoMode+0x66>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2224      	movs	r2, #36	@ 0x24
 800ce16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f022 0201 	bic.w	r2, r2, #1
 800ce30:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ce38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2220      	movs	r2, #32
 800ce4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3714      	adds	r7, #20
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce64:	4770      	bx	lr

0800ce66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b084      	sub	sp, #16
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d101      	bne.n	800ce7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	e02d      	b.n	800ceda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2224      	movs	r2, #36	@ 0x24
 800ce8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f022 0201 	bic.w	r2, r2, #1
 800cea4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	683a      	ldr	r2, [r7, #0]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f850 	bl	800cf60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2220      	movs	r2, #32
 800cecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ced8:	2300      	movs	r3, #0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b084      	sub	sp, #16
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
 800ceea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d101      	bne.n	800cefa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cef6:	2302      	movs	r3, #2
 800cef8:	e02d      	b.n	800cf56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2201      	movs	r2, #1
 800cefe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2224      	movs	r2, #36	@ 0x24
 800cf06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f022 0201 	bic.w	r2, r2, #1
 800cf20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	683a      	ldr	r2, [r7, #0]
 800cf32:	430a      	orrs	r2, r1
 800cf34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 f812 	bl	800cf60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2220      	movs	r2, #32
 800cf48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3710      	adds	r7, #16
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
	...

0800cf60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d108      	bne.n	800cf82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf80:	e031      	b.n	800cfe6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf82:	2310      	movs	r3, #16
 800cf84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cf86:	2310      	movs	r3, #16
 800cf88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	0e5b      	lsrs	r3, r3, #25
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	f003 0307 	and.w	r3, r3, #7
 800cf98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	0f5b      	lsrs	r3, r3, #29
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	f003 0307 	and.w	r3, r3, #7
 800cfa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfaa:	7bbb      	ldrb	r3, [r7, #14]
 800cfac:	7b3a      	ldrb	r2, [r7, #12]
 800cfae:	4911      	ldr	r1, [pc, #68]	@ (800cff4 <UARTEx_SetNbDataToProcess+0x94>)
 800cfb0:	5c8a      	ldrb	r2, [r1, r2]
 800cfb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cfb6:	7b3a      	ldrb	r2, [r7, #12]
 800cfb8:	490f      	ldr	r1, [pc, #60]	@ (800cff8 <UARTEx_SetNbDataToProcess+0x98>)
 800cfba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfbc:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
 800cfca:	7b7a      	ldrb	r2, [r7, #13]
 800cfcc:	4909      	ldr	r1, [pc, #36]	@ (800cff4 <UARTEx_SetNbDataToProcess+0x94>)
 800cfce:	5c8a      	ldrb	r2, [r1, r2]
 800cfd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cfd4:	7b7a      	ldrb	r2, [r7, #13]
 800cfd6:	4908      	ldr	r1, [pc, #32]	@ (800cff8 <UARTEx_SetNbDataToProcess+0x98>)
 800cfd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cfda:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cfe6:	bf00      	nop
 800cfe8:	3714      	adds	r7, #20
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	08012548 	.word	0x08012548
 800cff8:	08012550 	.word	0x08012550

0800cffc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cffc:	b084      	sub	sp, #16
 800cffe:	b480      	push	{r7}
 800d000:	b085      	sub	sp, #20
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	f107 001c 	add.w	r0, r7, #28
 800d00a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d012:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d014:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d016:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800d01a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800d01e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800d022:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	4313      	orrs	r3, r2
 800d028:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	4b07      	ldr	r3, [pc, #28]	@ (800d04c <SDMMC_Init+0x50>)
 800d030:	4013      	ands	r3, r2
 800d032:	68fa      	ldr	r2, [r7, #12]
 800d034:	431a      	orrs	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3714      	adds	r7, #20
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	b004      	add	sp, #16
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	ffc02c00 	.word	0xffc02c00

0800d050 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d05e:	4618      	mov	r0, r3
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d06a:	b480      	push	{r7}
 800d06c:	b083      	sub	sp, #12
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f043 0203 	orr.w	r2, r3, #3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	370c      	adds	r7, #12
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr

0800d0ae <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	b083      	sub	sp, #12
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f003 0303 	and.w	r3, r3, #3
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	370c      	adds	r7, #12
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
	...

0800d0cc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d0ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d0f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d0f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	68da      	ldr	r2, [r3, #12]
 800d102:	4b06      	ldr	r3, [pc, #24]	@ (800d11c <SDMMC_SendCommand+0x50>)
 800d104:	4013      	ands	r3, r2
 800d106:	68fa      	ldr	r2, [r7, #12]
 800d108:	431a      	orrs	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d10e:	2300      	movs	r3, #0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3714      	adds	r7, #20
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr
 800d11c:	fffee0c0 	.word	0xfffee0c0

0800d120 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	b2db      	uxtb	r3, r3
}
 800d12e:	4618      	mov	r0, r3
 800d130:	370c      	adds	r7, #12
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr

0800d13a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d13a:	b480      	push	{r7}
 800d13c:	b085      	sub	sp, #20
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	3314      	adds	r3, #20
 800d148:	461a      	mov	r2, r3
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	4413      	add	r3, r2
 800d14e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	685a      	ldr	r2, [r3, #4]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d186:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d18c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d192:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	4313      	orrs	r3, r2
 800d198:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d19e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	431a      	orrs	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d1aa:	2300      	movs	r3, #0

}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b088      	sub	sp, #32
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d1c6:	2310      	movs	r3, #16
 800d1c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d1ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d1d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1da:	f107 0308 	add.w	r3, r7, #8
 800d1de:	4619      	mov	r1, r3
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7ff ff73 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d1e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1ea:	2110      	movs	r1, #16
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 fa5f 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d1f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1f4:	69fb      	ldr	r3, [r7, #28]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3720      	adds	r7, #32
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b088      	sub	sp, #32
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
 800d206:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d20c:	2311      	movs	r3, #17
 800d20e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d216:	2300      	movs	r3, #0
 800d218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d21a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d21e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d220:	f107 0308 	add.w	r3, r7, #8
 800d224:	4619      	mov	r1, r3
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff ff50 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d22c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d230:	2111      	movs	r1, #17
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 fa3c 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d23a:	69fb      	ldr	r3, [r7, #28]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3720      	adds	r7, #32
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b088      	sub	sp, #32
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d252:	2312      	movs	r3, #18
 800d254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d25a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d25c:	2300      	movs	r3, #0
 800d25e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d264:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d266:	f107 0308 	add.w	r3, r7, #8
 800d26a:	4619      	mov	r1, r3
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f7ff ff2d 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d272:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d276:	2112      	movs	r1, #18
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 fa19 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d27e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d280:	69fb      	ldr	r3, [r7, #28]
}
 800d282:	4618      	mov	r0, r3
 800d284:	3720      	adds	r7, #32
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b088      	sub	sp, #32
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
 800d292:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d298:	2318      	movs	r3, #24
 800d29a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d29c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2ac:	f107 0308 	add.w	r3, r7, #8
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7ff ff0a 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d2b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2bc:	2118      	movs	r1, #24
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f9f6 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d2c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2c6:	69fb      	ldr	r3, [r7, #28]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3720      	adds	r7, #32
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b088      	sub	sp, #32
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d2de:	2319      	movs	r3, #25
 800d2e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2f2:	f107 0308 	add.w	r3, r7, #8
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f7ff fee7 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d2fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d302:	2119      	movs	r1, #25
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 f9d3 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d30a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d30c:	69fb      	ldr	r3, [r7, #28]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3720      	adds	r7, #32
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
	...

0800d318 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b088      	sub	sp, #32
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d320:	2300      	movs	r3, #0
 800d322:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d324:	230c      	movs	r3, #12
 800d326:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d32c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d32e:	2300      	movs	r3, #0
 800d330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d336:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d350:	f107 0308 	add.w	r3, r7, #8
 800d354:	4619      	mov	r1, r3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7ff feb8 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d35c:	4a0b      	ldr	r2, [pc, #44]	@ (800d38c <SDMMC_CmdStopTransfer+0x74>)
 800d35e:	210c      	movs	r1, #12
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 f9a5 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d366:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d37a:	d101      	bne.n	800d380 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d37c:	2300      	movs	r3, #0
 800d37e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d380:	69fb      	ldr	r3, [r7, #28]
}
 800d382:	4618      	mov	r0, r3
 800d384:	3720      	adds	r7, #32
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	05f5e100 	.word	0x05f5e100

0800d390 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b088      	sub	sp, #32
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d39e:	2307      	movs	r3, #7
 800d3a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d3a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3b2:	f107 0308 	add.w	r3, r7, #8
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f7ff fe87 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d3be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3c2:	2107      	movs	r1, #7
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 f973 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d3ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3cc:	69fb      	ldr	r3, [r7, #28]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3720      	adds	r7, #32
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b088      	sub	sp, #32
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3f4:	f107 0308 	add.w	r3, r7, #8
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7ff fe66 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fb97 	bl	800db34 <SDMMC_GetCmdError>
 800d406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d408:	69fb      	ldr	r3, [r7, #28]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3720      	adds	r7, #32
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b088      	sub	sp, #32
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d41a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d41e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d420:	2308      	movs	r3, #8
 800d422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d424:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d42a:	2300      	movs	r3, #0
 800d42c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d42e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d432:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d434:	f107 0308 	add.w	r3, r7, #8
 800d438:	4619      	mov	r1, r3
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7ff fe46 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 fb29 	bl	800da98 <SDMMC_GetCmdResp7>
 800d446:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d448:	69fb      	ldr	r3, [r7, #28]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3720      	adds	r7, #32
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b088      	sub	sp, #32
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d460:	2337      	movs	r3, #55	@ 0x37
 800d462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d468:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d46a:	2300      	movs	r3, #0
 800d46c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d46e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d472:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d474:	f107 0308 	add.w	r3, r7, #8
 800d478:	4619      	mov	r1, r3
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff fe26 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d480:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d484:	2137      	movs	r1, #55	@ 0x37
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 f912 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d48c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d48e:	69fb      	ldr	r3, [r7, #28]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3720      	adds	r7, #32
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b088      	sub	sp, #32
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d4a6:	2329      	movs	r3, #41	@ 0x29
 800d4a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d4ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4ba:	f107 0308 	add.w	r3, r7, #8
 800d4be:	4619      	mov	r1, r3
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f7ff fe03 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 fa2e 	bl	800d928 <SDMMC_GetCmdResp3>
 800d4cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4ce:	69fb      	ldr	r3, [r7, #28]
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3720      	adds	r7, #32
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b088      	sub	sp, #32
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d4e6:	2306      	movs	r3, #6
 800d4e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d4ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4fa:	f107 0308 	add.w	r3, r7, #8
 800d4fe:	4619      	mov	r1, r3
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7ff fde3 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d50a:	2106      	movs	r1, #6
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f8cf 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d514:	69fb      	ldr	r3, [r7, #28]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3720      	adds	r7, #32
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b088      	sub	sp, #32
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d526:	2300      	movs	r3, #0
 800d528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d52a:	2333      	movs	r3, #51	@ 0x33
 800d52c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d52e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d534:	2300      	movs	r3, #0
 800d536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d538:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d53c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d53e:	f107 0308 	add.w	r3, r7, #8
 800d542:	4619      	mov	r1, r3
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff fdc1 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d54a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d54e:	2133      	movs	r1, #51	@ 0x33
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f8ad 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d558:	69fb      	ldr	r3, [r7, #28]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3720      	adds	r7, #32
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b088      	sub	sp, #32
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d56a:	2300      	movs	r3, #0
 800d56c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d56e:	2302      	movs	r3, #2
 800d570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d572:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d578:	2300      	movs	r3, #0
 800d57a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d57c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d580:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d582:	f107 0308 	add.w	r3, r7, #8
 800d586:	4619      	mov	r1, r3
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7ff fd9f 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f980 	bl	800d894 <SDMMC_GetCmdResp2>
 800d594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d596:	69fb      	ldr	r3, [r7, #28]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3720      	adds	r7, #32
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b088      	sub	sp, #32
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d5ae:	2309      	movs	r3, #9
 800d5b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d5b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d5b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5c2:	f107 0308 	add.w	r3, r7, #8
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7ff fd7f 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f960 	bl	800d894 <SDMMC_GetCmdResp2>
 800d5d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5d6:	69fb      	ldr	r3, [r7, #28]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3720      	adds	r7, #32
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b088      	sub	sp, #32
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d600:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d602:	f107 0308 	add.w	r3, r7, #8
 800d606:	4619      	mov	r1, r3
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f7ff fd5f 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	2103      	movs	r1, #3
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 f9c8 	bl	800d9a8 <SDMMC_GetCmdResp6>
 800d618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d61a:	69fb      	ldr	r3, [r7, #28]
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3720      	adds	r7, #32
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b088      	sub	sp, #32
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d632:	230d      	movs	r3, #13
 800d634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d636:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d63a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d63c:	2300      	movs	r3, #0
 800d63e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d644:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d646:	f107 0308 	add.w	r3, r7, #8
 800d64a:	4619      	mov	r1, r3
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7ff fd3d 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d652:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d656:	210d      	movs	r1, #13
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 f829 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d65e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d660:	69fb      	ldr	r3, [r7, #28]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3720      	adds	r7, #32
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}

0800d66a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b088      	sub	sp, #32
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d672:	2300      	movs	r3, #0
 800d674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d676:	230d      	movs	r3, #13
 800d678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d67a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d67e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d680:	2300      	movs	r3, #0
 800d682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d688:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d68a:	f107 0308 	add.w	r3, r7, #8
 800d68e:	4619      	mov	r1, r3
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7ff fd1b 	bl	800d0cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d69a:	210d      	movs	r1, #13
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 f807 	bl	800d6b0 <SDMMC_GetCmdResp1>
 800d6a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6a4:	69fb      	ldr	r3, [r7, #28]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3720      	adds	r7, #32
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
	...

0800d6b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b088      	sub	sp, #32
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	607a      	str	r2, [r7, #4]
 800d6bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d6be:	4b70      	ldr	r3, [pc, #448]	@ (800d880 <SDMMC_GetCmdResp1+0x1d0>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a70      	ldr	r2, [pc, #448]	@ (800d884 <SDMMC_GetCmdResp1+0x1d4>)
 800d6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c8:	0a5a      	lsrs	r2, r3, #9
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	fb02 f303 	mul.w	r3, r2, r3
 800d6d0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	1e5a      	subs	r2, r3, #1
 800d6d6:	61fa      	str	r2, [r7, #28]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d102      	bne.n	800d6e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d6e0:	e0c9      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6e6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d6e8:	69ba      	ldr	r2, [r7, #24]
 800d6ea:	4b67      	ldr	r3, [pc, #412]	@ (800d888 <SDMMC_GetCmdResp1+0x1d8>)
 800d6ec:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d0ef      	beq.n	800d6d2 <SDMMC_GetCmdResp1+0x22>
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1ea      	bne.n	800d6d2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d700:	f003 0304 	and.w	r3, r3, #4
 800d704:	2b00      	cmp	r3, #0
 800d706:	d004      	beq.n	800d712 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2204      	movs	r2, #4
 800d70c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d70e:	2304      	movs	r3, #4
 800d710:	e0b1      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d716:	f003 0301 	and.w	r3, r3, #1
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d004      	beq.n	800d728 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2201      	movs	r2, #1
 800d722:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d724:	2301      	movs	r3, #1
 800d726:	e0a6      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	4a58      	ldr	r2, [pc, #352]	@ (800d88c <SDMMC_GetCmdResp1+0x1dc>)
 800d72c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f7ff fcf6 	bl	800d120 <SDMMC_GetCommandResponse>
 800d734:	4603      	mov	r3, r0
 800d736:	461a      	mov	r2, r3
 800d738:	7afb      	ldrb	r3, [r7, #11]
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d001      	beq.n	800d742 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d73e:	2301      	movs	r3, #1
 800d740:	e099      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d742:	2100      	movs	r1, #0
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f7ff fcf8 	bl	800d13a <SDMMC_GetResponse>
 800d74a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d74c:	697a      	ldr	r2, [r7, #20]
 800d74e:	4b50      	ldr	r3, [pc, #320]	@ (800d890 <SDMMC_GetCmdResp1+0x1e0>)
 800d750:	4013      	ands	r3, r2
 800d752:	2b00      	cmp	r3, #0
 800d754:	d101      	bne.n	800d75a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d756:	2300      	movs	r3, #0
 800d758:	e08d      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	da02      	bge.n	800d766 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d760:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d764:	e087      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d001      	beq.n	800d774 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d770:	2340      	movs	r3, #64	@ 0x40
 800d772:	e080      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d77e:	2380      	movs	r3, #128	@ 0x80
 800d780:	e079      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d78c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d790:	e071      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d79c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d7a0:	e069      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d7ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7b0:	e061      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d7bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d7c0:	e059      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d7cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d7d0:	e051      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d7dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d7e0:	e049      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d7ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d7f0:	e041      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d7fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d800:	e039      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d80c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d810:	e031      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d002      	beq.n	800d822 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d81c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d820:	e029      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d002      	beq.n	800d832 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d82c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d830:	e021      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d002      	beq.n	800d842 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d83c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d840:	e019      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d002      	beq.n	800d852 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d84c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d850:	e011      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d002      	beq.n	800d862 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d85c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d860:	e009      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	f003 0308 	and.w	r3, r3, #8
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d002      	beq.n	800d872 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d86c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d870:	e001      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d872:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d876:	4618      	mov	r0, r3
 800d878:	3720      	adds	r7, #32
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	24000000 	.word	0x24000000
 800d884:	10624dd3 	.word	0x10624dd3
 800d888:	00200045 	.word	0x00200045
 800d88c:	002000c5 	.word	0x002000c5
 800d890:	fdffe008 	.word	0xfdffe008

0800d894 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d894:	b480      	push	{r7}
 800d896:	b085      	sub	sp, #20
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d89c:	4b1f      	ldr	r3, [pc, #124]	@ (800d91c <SDMMC_GetCmdResp2+0x88>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a1f      	ldr	r2, [pc, #124]	@ (800d920 <SDMMC_GetCmdResp2+0x8c>)
 800d8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8a6:	0a5b      	lsrs	r3, r3, #9
 800d8a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d8ac:	fb02 f303 	mul.w	r3, r2, r3
 800d8b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	1e5a      	subs	r2, r3, #1
 800d8b6:	60fa      	str	r2, [r7, #12]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d102      	bne.n	800d8c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d8c0:	e026      	b.n	800d910 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d0ef      	beq.n	800d8b2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1ea      	bne.n	800d8b2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8e0:	f003 0304 	and.w	r3, r3, #4
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d004      	beq.n	800d8f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2204      	movs	r2, #4
 800d8ec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8ee:	2304      	movs	r3, #4
 800d8f0:	e00e      	b.n	800d910 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8f6:	f003 0301 	and.w	r3, r3, #1
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d004      	beq.n	800d908 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2201      	movs	r2, #1
 800d902:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d904:	2301      	movs	r3, #1
 800d906:	e003      	b.n	800d910 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	4a06      	ldr	r2, [pc, #24]	@ (800d924 <SDMMC_GetCmdResp2+0x90>)
 800d90c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3714      	adds	r7, #20
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr
 800d91c:	24000000 	.word	0x24000000
 800d920:	10624dd3 	.word	0x10624dd3
 800d924:	002000c5 	.word	0x002000c5

0800d928 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d930:	4b1a      	ldr	r3, [pc, #104]	@ (800d99c <SDMMC_GetCmdResp3+0x74>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4a1a      	ldr	r2, [pc, #104]	@ (800d9a0 <SDMMC_GetCmdResp3+0x78>)
 800d936:	fba2 2303 	umull	r2, r3, r2, r3
 800d93a:	0a5b      	lsrs	r3, r3, #9
 800d93c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d940:	fb02 f303 	mul.w	r3, r2, r3
 800d944:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	1e5a      	subs	r2, r3, #1
 800d94a:	60fa      	str	r2, [r7, #12]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d102      	bne.n	800d956 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d950:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d954:	e01b      	b.n	800d98e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d95a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d962:	2b00      	cmp	r3, #0
 800d964:	d0ef      	beq.n	800d946 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1ea      	bne.n	800d946 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d974:	f003 0304 	and.w	r3, r3, #4
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d004      	beq.n	800d986 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2204      	movs	r2, #4
 800d980:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d982:	2304      	movs	r3, #4
 800d984:	e003      	b.n	800d98e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4a06      	ldr	r2, [pc, #24]	@ (800d9a4 <SDMMC_GetCmdResp3+0x7c>)
 800d98a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d98c:	2300      	movs	r3, #0
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3714      	adds	r7, #20
 800d992:	46bd      	mov	sp, r7
 800d994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop
 800d99c:	24000000 	.word	0x24000000
 800d9a0:	10624dd3 	.word	0x10624dd3
 800d9a4:	002000c5 	.word	0x002000c5

0800d9a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b088      	sub	sp, #32
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d9b6:	4b35      	ldr	r3, [pc, #212]	@ (800da8c <SDMMC_GetCmdResp6+0xe4>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4a35      	ldr	r2, [pc, #212]	@ (800da90 <SDMMC_GetCmdResp6+0xe8>)
 800d9bc:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c0:	0a5b      	lsrs	r3, r3, #9
 800d9c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9c6:	fb02 f303 	mul.w	r3, r2, r3
 800d9ca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	1e5a      	subs	r2, r3, #1
 800d9d0:	61fa      	str	r2, [r7, #28]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d102      	bne.n	800d9dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d9da:	e052      	b.n	800da82 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9e0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d0ef      	beq.n	800d9cc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1ea      	bne.n	800d9cc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9fa:	f003 0304 	and.w	r3, r3, #4
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d004      	beq.n	800da0c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2204      	movs	r2, #4
 800da06:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da08:	2304      	movs	r3, #4
 800da0a:	e03a      	b.n	800da82 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da10:	f003 0301 	and.w	r3, r3, #1
 800da14:	2b00      	cmp	r3, #0
 800da16:	d004      	beq.n	800da22 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2201      	movs	r2, #1
 800da1c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da1e:	2301      	movs	r3, #1
 800da20:	e02f      	b.n	800da82 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f7ff fb7c 	bl	800d120 <SDMMC_GetCommandResponse>
 800da28:	4603      	mov	r3, r0
 800da2a:	461a      	mov	r2, r3
 800da2c:	7afb      	ldrb	r3, [r7, #11]
 800da2e:	4293      	cmp	r3, r2
 800da30:	d001      	beq.n	800da36 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da32:	2301      	movs	r3, #1
 800da34:	e025      	b.n	800da82 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	4a16      	ldr	r2, [pc, #88]	@ (800da94 <SDMMC_GetCmdResp6+0xec>)
 800da3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800da3c:	2100      	movs	r1, #0
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f7ff fb7b 	bl	800d13a <SDMMC_GetResponse>
 800da44:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d106      	bne.n	800da5e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	0c1b      	lsrs	r3, r3, #16
 800da54:	b29a      	uxth	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800da5a:	2300      	movs	r3, #0
 800da5c:	e011      	b.n	800da82 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da64:	2b00      	cmp	r3, #0
 800da66:	d002      	beq.n	800da6e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800da6c:	e009      	b.n	800da82 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da74:	2b00      	cmp	r3, #0
 800da76:	d002      	beq.n	800da7e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da7c:	e001      	b.n	800da82 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800da82:	4618      	mov	r0, r3
 800da84:	3720      	adds	r7, #32
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	24000000 	.word	0x24000000
 800da90:	10624dd3 	.word	0x10624dd3
 800da94:	002000c5 	.word	0x002000c5

0800da98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800daa0:	4b22      	ldr	r3, [pc, #136]	@ (800db2c <SDMMC_GetCmdResp7+0x94>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a22      	ldr	r2, [pc, #136]	@ (800db30 <SDMMC_GetCmdResp7+0x98>)
 800daa6:	fba2 2303 	umull	r2, r3, r2, r3
 800daaa:	0a5b      	lsrs	r3, r3, #9
 800daac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dab0:	fb02 f303 	mul.w	r3, r2, r3
 800dab4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	1e5a      	subs	r2, r3, #1
 800daba:	60fa      	str	r2, [r7, #12]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d102      	bne.n	800dac6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dac0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dac4:	e02c      	b.n	800db20 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d0ef      	beq.n	800dab6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d1ea      	bne.n	800dab6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dae4:	f003 0304 	and.w	r3, r3, #4
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d004      	beq.n	800daf6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2204      	movs	r2, #4
 800daf0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daf2:	2304      	movs	r3, #4
 800daf4:	e014      	b.n	800db20 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dafa:	f003 0301 	and.w	r3, r3, #1
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d004      	beq.n	800db0c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2201      	movs	r2, #1
 800db06:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db08:	2301      	movs	r3, #1
 800db0a:	e009      	b.n	800db20 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db14:	2b00      	cmp	r3, #0
 800db16:	d002      	beq.n	800db1e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2240      	movs	r2, #64	@ 0x40
 800db1c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800db1e:	2300      	movs	r3, #0

}
 800db20:	4618      	mov	r0, r3
 800db22:	3714      	adds	r7, #20
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr
 800db2c:	24000000 	.word	0x24000000
 800db30:	10624dd3 	.word	0x10624dd3

0800db34 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800db34:	b480      	push	{r7}
 800db36:	b085      	sub	sp, #20
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800db3c:	4b11      	ldr	r3, [pc, #68]	@ (800db84 <SDMMC_GetCmdError+0x50>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a11      	ldr	r2, [pc, #68]	@ (800db88 <SDMMC_GetCmdError+0x54>)
 800db42:	fba2 2303 	umull	r2, r3, r2, r3
 800db46:	0a5b      	lsrs	r3, r3, #9
 800db48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db4c:	fb02 f303 	mul.w	r3, r2, r3
 800db50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	1e5a      	subs	r2, r3, #1
 800db56:	60fa      	str	r2, [r7, #12]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d102      	bne.n	800db62 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db60:	e009      	b.n	800db76 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d0f1      	beq.n	800db52 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	4a06      	ldr	r2, [pc, #24]	@ (800db8c <SDMMC_GetCmdError+0x58>)
 800db72:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	24000000 	.word	0x24000000
 800db88:	10624dd3 	.word	0x10624dd3
 800db8c:	002000c5 	.word	0x002000c5

0800db90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800db94:	4904      	ldr	r1, [pc, #16]	@ (800dba8 <MX_FATFS_Init+0x18>)
 800db96:	4805      	ldr	r0, [pc, #20]	@ (800dbac <MX_FATFS_Init+0x1c>)
 800db98:	f003 fa88 	bl	80110ac <FATFS_LinkDriver>
 800db9c:	4603      	mov	r3, r0
 800db9e:	461a      	mov	r2, r3
 800dba0:	4b03      	ldr	r3, [pc, #12]	@ (800dbb0 <MX_FATFS_Init+0x20>)
 800dba2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dba4:	bf00      	nop
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	2400496c 	.word	0x2400496c
 800dbac:	08012558 	.word	0x08012558
 800dbb0:	24004968 	.word	0x24004968

0800dbb4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dbb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dbce:	f000 f879 	bl	800dcc4 <BSP_SD_IsDetected>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d001      	beq.n	800dbdc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800dbd8:	2302      	movs	r3, #2
 800dbda:	e012      	b.n	800dc02 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800dbdc:	480b      	ldr	r0, [pc, #44]	@ (800dc0c <BSP_SD_Init+0x48>)
 800dbde:	f7fc fc29 	bl	800a434 <HAL_SD_Init>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800dbe6:	79fb      	ldrb	r3, [r7, #7]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d109      	bne.n	800dc00 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800dbec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800dbf0:	4806      	ldr	r0, [pc, #24]	@ (800dc0c <BSP_SD_Init+0x48>)
 800dbf2:	f7fd fae5 	bl	800b1c0 <HAL_SD_ConfigWideBusOperation>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d001      	beq.n	800dc00 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800dc00:	79fb      	ldrb	r3, [r7, #7]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	24004850 	.word	0x24004850

0800dc10 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af02      	add	r7, sp, #8
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
 800dc1c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	9300      	str	r3, [sp, #0]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	68f9      	ldr	r1, [r7, #12]
 800dc2c:	4806      	ldr	r0, [pc, #24]	@ (800dc48 <BSP_SD_ReadBlocks+0x38>)
 800dc2e:	f7fc fd21 	bl	800a674 <HAL_SD_ReadBlocks>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dc3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	24004850 	.word	0x24004850

0800dc4c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b088      	sub	sp, #32
 800dc50:	af02      	add	r7, sp, #8
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
 800dc58:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	68f9      	ldr	r1, [r7, #12]
 800dc68:	4806      	ldr	r0, [pc, #24]	@ (800dc84 <BSP_SD_WriteBlocks+0x38>)
 800dc6a:	f7fc fe8d 	bl	800a988 <HAL_SD_WriteBlocks>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dc74:	2301      	movs	r3, #1
 800dc76:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dc78:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	24004850 	.word	0x24004850

0800dc88 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dc8c:	4805      	ldr	r0, [pc, #20]	@ (800dca4 <BSP_SD_GetCardState+0x1c>)
 800dc8e:	f7fd fba9 	bl	800b3e4 <HAL_SD_GetCardState>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b04      	cmp	r3, #4
 800dc96:	bf14      	ite	ne
 800dc98:	2301      	movne	r3, #1
 800dc9a:	2300      	moveq	r3, #0
 800dc9c:	b2db      	uxtb	r3, r3
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	24004850 	.word	0x24004850

0800dca8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dcb0:	6879      	ldr	r1, [r7, #4]
 800dcb2:	4803      	ldr	r0, [pc, #12]	@ (800dcc0 <BSP_SD_GetCardInfo+0x18>)
 800dcb4:	f7fd fa58 	bl	800b168 <HAL_SD_GetCardInfo>
}
 800dcb8:	bf00      	nop
 800dcba:	3708      	adds	r7, #8
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	24004850 	.word	0x24004850

0800dcc4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dcca:	2301      	movs	r3, #1
 800dccc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dcce:	f000 f80b 	bl	800dce8 <BSP_PlatformIsDetected>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d101      	bne.n	800dcdc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dcdc:	79fb      	ldrb	r3, [r7, #7]
 800dcde:	b2db      	uxtb	r3, r3
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dcf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800dcf6:	4806      	ldr	r0, [pc, #24]	@ (800dd10 <BSP_PlatformIsDetected+0x28>)
 800dcf8:	f7f7 f9c8 	bl	800508c <HAL_GPIO_ReadPin>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d001      	beq.n	800dd06 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dd02:	2300      	movs	r3, #0
 800dd04:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dd06:	79fb      	ldrb	r3, [r7, #7]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	58020000 	.word	0x58020000

0800dd14 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dd1e:	4b0b      	ldr	r3, [pc, #44]	@ (800dd4c <SD_CheckStatus+0x38>)
 800dd20:	2201      	movs	r2, #1
 800dd22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dd24:	f7ff ffb0 	bl	800dc88 <BSP_SD_GetCardState>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d107      	bne.n	800dd3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dd2e:	4b07      	ldr	r3, [pc, #28]	@ (800dd4c <SD_CheckStatus+0x38>)
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	f023 0301 	bic.w	r3, r3, #1
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	4b04      	ldr	r3, [pc, #16]	@ (800dd4c <SD_CheckStatus+0x38>)
 800dd3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dd3e:	4b03      	ldr	r3, [pc, #12]	@ (800dd4c <SD_CheckStatus+0x38>)
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	b2db      	uxtb	r3, r3
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	24000081 	.word	0x24000081

0800dd50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	4603      	mov	r3, r0
 800dd58:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dd5a:	4b0b      	ldr	r3, [pc, #44]	@ (800dd88 <SD_initialize+0x38>)
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dd60:	f7ff ff30 	bl	800dbc4 <BSP_SD_Init>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d107      	bne.n	800dd7a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800dd6a:	79fb      	ldrb	r3, [r7, #7]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7ff ffd1 	bl	800dd14 <SD_CheckStatus>
 800dd72:	4603      	mov	r3, r0
 800dd74:	461a      	mov	r2, r3
 800dd76:	4b04      	ldr	r3, [pc, #16]	@ (800dd88 <SD_initialize+0x38>)
 800dd78:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dd7a:	4b03      	ldr	r3, [pc, #12]	@ (800dd88 <SD_initialize+0x38>)
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	b2db      	uxtb	r3, r3
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	24000081 	.word	0x24000081

0800dd8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	4603      	mov	r3, r0
 800dd94:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dd96:	79fb      	ldrb	r3, [r7, #7]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7ff ffbb 	bl	800dd14 <SD_CheckStatus>
 800dd9e:	4603      	mov	r3, r0
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b086      	sub	sp, #24
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60b9      	str	r1, [r7, #8]
 800ddb0:	607a      	str	r2, [r7, #4]
 800ddb2:	603b      	str	r3, [r7, #0]
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ddbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	6879      	ldr	r1, [r7, #4]
 800ddc4:	68b8      	ldr	r0, [r7, #8]
 800ddc6:	f7ff ff23 	bl	800dc10 <BSP_SD_ReadBlocks>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d107      	bne.n	800dde0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ddd0:	bf00      	nop
 800ddd2:	f7ff ff59 	bl	800dc88 <BSP_SD_GetCardState>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1fa      	bne.n	800ddd2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dde0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3718      	adds	r7, #24
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b086      	sub	sp, #24
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
 800ddf4:	603b      	str	r3, [r7, #0]
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ddfe:	f04f 33ff 	mov.w	r3, #4294967295
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	6879      	ldr	r1, [r7, #4]
 800de06:	68b8      	ldr	r0, [r7, #8]
 800de08:	f7ff ff20 	bl	800dc4c <BSP_SD_WriteBlocks>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d107      	bne.n	800de22 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800de12:	bf00      	nop
 800de14:	f7ff ff38 	bl	800dc88 <BSP_SD_GetCardState>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d1fa      	bne.n	800de14 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800de1e:	2300      	movs	r3, #0
 800de20:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800de22:	7dfb      	ldrb	r3, [r7, #23]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3718      	adds	r7, #24
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b08c      	sub	sp, #48	@ 0x30
 800de30:	af00      	add	r7, sp, #0
 800de32:	4603      	mov	r3, r0
 800de34:	603a      	str	r2, [r7, #0]
 800de36:	71fb      	strb	r3, [r7, #7]
 800de38:	460b      	mov	r3, r1
 800de3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800de3c:	2301      	movs	r3, #1
 800de3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800de42:	4b25      	ldr	r3, [pc, #148]	@ (800ded8 <SD_ioctl+0xac>)
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	b2db      	uxtb	r3, r3
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d001      	beq.n	800de54 <SD_ioctl+0x28>
 800de50:	2303      	movs	r3, #3
 800de52:	e03c      	b.n	800dece <SD_ioctl+0xa2>

  switch (cmd)
 800de54:	79bb      	ldrb	r3, [r7, #6]
 800de56:	2b03      	cmp	r3, #3
 800de58:	d834      	bhi.n	800dec4 <SD_ioctl+0x98>
 800de5a:	a201      	add	r2, pc, #4	@ (adr r2, 800de60 <SD_ioctl+0x34>)
 800de5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de60:	0800de71 	.word	0x0800de71
 800de64:	0800de79 	.word	0x0800de79
 800de68:	0800de91 	.word	0x0800de91
 800de6c:	0800deab 	.word	0x0800deab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800de76:	e028      	b.n	800deca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800de78:	f107 0308 	add.w	r3, r7, #8
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7ff ff13 	bl	800dca8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800de82:	6a3a      	ldr	r2, [r7, #32]
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de88:	2300      	movs	r3, #0
 800de8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800de8e:	e01c      	b.n	800deca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de90:	f107 0308 	add.w	r3, r7, #8
 800de94:	4618      	mov	r0, r3
 800de96:	f7ff ff07 	bl	800dca8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800de9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dea2:	2300      	movs	r3, #0
 800dea4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dea8:	e00f      	b.n	800deca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800deaa:	f107 0308 	add.w	r3, r7, #8
 800deae:	4618      	mov	r0, r3
 800deb0:	f7ff fefa 	bl	800dca8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800deb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb6:	0a5a      	lsrs	r2, r3, #9
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800debc:	2300      	movs	r3, #0
 800debe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dec2:	e002      	b.n	800deca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dec4:	2304      	movs	r3, #4
 800dec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800deca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3730      	adds	r7, #48	@ 0x30
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	24000081 	.word	0x24000081

0800dedc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	4603      	mov	r3, r0
 800dee4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dee6:	79fb      	ldrb	r3, [r7, #7]
 800dee8:	4a08      	ldr	r2, [pc, #32]	@ (800df0c <disk_status+0x30>)
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	4413      	add	r3, r2
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	79fa      	ldrb	r2, [r7, #7]
 800def4:	4905      	ldr	r1, [pc, #20]	@ (800df0c <disk_status+0x30>)
 800def6:	440a      	add	r2, r1
 800def8:	7a12      	ldrb	r2, [r2, #8]
 800defa:	4610      	mov	r0, r2
 800defc:	4798      	blx	r3
 800defe:	4603      	mov	r3, r0
 800df00:	73fb      	strb	r3, [r7, #15]
  return stat;
 800df02:	7bfb      	ldrb	r3, [r7, #15]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3710      	adds	r7, #16
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	24004b98 	.word	0x24004b98

0800df10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	4603      	mov	r3, r0
 800df18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800df1a:	2300      	movs	r3, #0
 800df1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800df1e:	79fb      	ldrb	r3, [r7, #7]
 800df20:	4a0e      	ldr	r2, [pc, #56]	@ (800df5c <disk_initialize+0x4c>)
 800df22:	5cd3      	ldrb	r3, [r2, r3]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d114      	bne.n	800df52 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800df28:	79fb      	ldrb	r3, [r7, #7]
 800df2a:	4a0c      	ldr	r2, [pc, #48]	@ (800df5c <disk_initialize+0x4c>)
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	79fa      	ldrb	r2, [r7, #7]
 800df36:	4909      	ldr	r1, [pc, #36]	@ (800df5c <disk_initialize+0x4c>)
 800df38:	440a      	add	r2, r1
 800df3a:	7a12      	ldrb	r2, [r2, #8]
 800df3c:	4610      	mov	r0, r2
 800df3e:	4798      	blx	r3
 800df40:	4603      	mov	r3, r0
 800df42:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800df44:	7bfb      	ldrb	r3, [r7, #15]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d103      	bne.n	800df52 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	4a03      	ldr	r2, [pc, #12]	@ (800df5c <disk_initialize+0x4c>)
 800df4e:	2101      	movs	r1, #1
 800df50:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800df52:	7bfb      	ldrb	r3, [r7, #15]
}
 800df54:	4618      	mov	r0, r3
 800df56:	3710      	adds	r7, #16
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	24004b98 	.word	0x24004b98

0800df60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800df60:	b590      	push	{r4, r7, lr}
 800df62:	b087      	sub	sp, #28
 800df64:	af00      	add	r7, sp, #0
 800df66:	60b9      	str	r1, [r7, #8]
 800df68:	607a      	str	r2, [r7, #4]
 800df6a:	603b      	str	r3, [r7, #0]
 800df6c:	4603      	mov	r3, r0
 800df6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800df70:	7bfb      	ldrb	r3, [r7, #15]
 800df72:	4a0a      	ldr	r2, [pc, #40]	@ (800df9c <disk_read+0x3c>)
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	4413      	add	r3, r2
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	689c      	ldr	r4, [r3, #8]
 800df7c:	7bfb      	ldrb	r3, [r7, #15]
 800df7e:	4a07      	ldr	r2, [pc, #28]	@ (800df9c <disk_read+0x3c>)
 800df80:	4413      	add	r3, r2
 800df82:	7a18      	ldrb	r0, [r3, #8]
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	68b9      	ldr	r1, [r7, #8]
 800df8a:	47a0      	blx	r4
 800df8c:	4603      	mov	r3, r0
 800df8e:	75fb      	strb	r3, [r7, #23]
  return res;
 800df90:	7dfb      	ldrb	r3, [r7, #23]
}
 800df92:	4618      	mov	r0, r3
 800df94:	371c      	adds	r7, #28
 800df96:	46bd      	mov	sp, r7
 800df98:	bd90      	pop	{r4, r7, pc}
 800df9a:	bf00      	nop
 800df9c:	24004b98 	.word	0x24004b98

0800dfa0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dfa0:	b590      	push	{r4, r7, lr}
 800dfa2:	b087      	sub	sp, #28
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60b9      	str	r1, [r7, #8]
 800dfa8:	607a      	str	r2, [r7, #4]
 800dfaa:	603b      	str	r3, [r7, #0]
 800dfac:	4603      	mov	r3, r0
 800dfae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dfb0:	7bfb      	ldrb	r3, [r7, #15]
 800dfb2:	4a0a      	ldr	r2, [pc, #40]	@ (800dfdc <disk_write+0x3c>)
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4413      	add	r3, r2
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	68dc      	ldr	r4, [r3, #12]
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
 800dfbe:	4a07      	ldr	r2, [pc, #28]	@ (800dfdc <disk_write+0x3c>)
 800dfc0:	4413      	add	r3, r2
 800dfc2:	7a18      	ldrb	r0, [r3, #8]
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	68b9      	ldr	r1, [r7, #8]
 800dfca:	47a0      	blx	r4
 800dfcc:	4603      	mov	r3, r0
 800dfce:	75fb      	strb	r3, [r7, #23]
  return res;
 800dfd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	371c      	adds	r7, #28
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd90      	pop	{r4, r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	24004b98 	.word	0x24004b98

0800dfe0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	3301      	adds	r3, #1
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dff0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dff4:	021b      	lsls	r3, r3, #8
 800dff6:	b21a      	sxth	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	b21b      	sxth	r3, r3
 800dffe:	4313      	orrs	r3, r2
 800e000:	b21b      	sxth	r3, r3
 800e002:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e004:	89fb      	ldrh	r3, [r7, #14]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3714      	adds	r7, #20
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr

0800e012 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e012:	b480      	push	{r7}
 800e014:	b085      	sub	sp, #20
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	3303      	adds	r3, #3
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	021b      	lsls	r3, r3, #8
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	3202      	adds	r2, #2
 800e02a:	7812      	ldrb	r2, [r2, #0]
 800e02c:	4313      	orrs	r3, r2
 800e02e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	021b      	lsls	r3, r3, #8
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	3201      	adds	r2, #1
 800e038:	7812      	ldrb	r2, [r2, #0]
 800e03a:	4313      	orrs	r3, r2
 800e03c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	021b      	lsls	r3, r3, #8
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	7812      	ldrb	r2, [r2, #0]
 800e046:	4313      	orrs	r3, r2
 800e048:	60fb      	str	r3, [r7, #12]
	return rv;
 800e04a:	68fb      	ldr	r3, [r7, #12]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3714      	adds	r7, #20
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	1c5a      	adds	r2, r3, #1
 800e068:	607a      	str	r2, [r7, #4]
 800e06a:	887a      	ldrh	r2, [r7, #2]
 800e06c:	b2d2      	uxtb	r2, r2
 800e06e:	701a      	strb	r2, [r3, #0]
 800e070:	887b      	ldrh	r3, [r7, #2]
 800e072:	0a1b      	lsrs	r3, r3, #8
 800e074:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	607a      	str	r2, [r7, #4]
 800e07c:	887a      	ldrh	r2, [r7, #2]
 800e07e:	b2d2      	uxtb	r2, r2
 800e080:	701a      	strb	r2, [r3, #0]
}
 800e082:	bf00      	nop
 800e084:	370c      	adds	r7, #12
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e08e:	b480      	push	{r7}
 800e090:	b083      	sub	sp, #12
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
 800e096:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	1c5a      	adds	r2, r3, #1
 800e09c:	607a      	str	r2, [r7, #4]
 800e09e:	683a      	ldr	r2, [r7, #0]
 800e0a0:	b2d2      	uxtb	r2, r2
 800e0a2:	701a      	strb	r2, [r3, #0]
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	0a1b      	lsrs	r3, r3, #8
 800e0a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	1c5a      	adds	r2, r3, #1
 800e0ae:	607a      	str	r2, [r7, #4]
 800e0b0:	683a      	ldr	r2, [r7, #0]
 800e0b2:	b2d2      	uxtb	r2, r2
 800e0b4:	701a      	strb	r2, [r3, #0]
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	0a1b      	lsrs	r3, r3, #8
 800e0ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	1c5a      	adds	r2, r3, #1
 800e0c0:	607a      	str	r2, [r7, #4]
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	b2d2      	uxtb	r2, r2
 800e0c6:	701a      	strb	r2, [r3, #0]
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	0a1b      	lsrs	r3, r3, #8
 800e0cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	1c5a      	adds	r2, r3, #1
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	683a      	ldr	r2, [r7, #0]
 800e0d6:	b2d2      	uxtb	r2, r2
 800e0d8:	701a      	strb	r2, [r3, #0]
}
 800e0da:	bf00      	nop
 800e0dc:	370c      	adds	r7, #12
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e0e6:	b480      	push	{r7}
 800e0e8:	b087      	sub	sp, #28
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	60f8      	str	r0, [r7, #12]
 800e0ee:	60b9      	str	r1, [r7, #8]
 800e0f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d00d      	beq.n	800e11c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e100:	693a      	ldr	r2, [r7, #16]
 800e102:	1c53      	adds	r3, r2, #1
 800e104:	613b      	str	r3, [r7, #16]
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	1c59      	adds	r1, r3, #1
 800e10a:	6179      	str	r1, [r7, #20]
 800e10c:	7812      	ldrb	r2, [r2, #0]
 800e10e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3b01      	subs	r3, #1
 800e114:	607b      	str	r3, [r7, #4]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d1f1      	bne.n	800e100 <mem_cpy+0x1a>
	}
}
 800e11c:	bf00      	nop
 800e11e:	371c      	adds	r7, #28
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e128:	b480      	push	{r7}
 800e12a:	b087      	sub	sp, #28
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	1c5a      	adds	r2, r3, #1
 800e13c:	617a      	str	r2, [r7, #20]
 800e13e:	68ba      	ldr	r2, [r7, #8]
 800e140:	b2d2      	uxtb	r2, r2
 800e142:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	3b01      	subs	r3, #1
 800e148:	607b      	str	r3, [r7, #4]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d1f3      	bne.n	800e138 <mem_set+0x10>
}
 800e150:	bf00      	nop
 800e152:	bf00      	nop
 800e154:	371c      	adds	r7, #28
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr

0800e15e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e15e:	b480      	push	{r7}
 800e160:	b089      	sub	sp, #36	@ 0x24
 800e162:	af00      	add	r7, sp, #0
 800e164:	60f8      	str	r0, [r7, #12]
 800e166:	60b9      	str	r1, [r7, #8]
 800e168:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	61fb      	str	r3, [r7, #28]
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e172:	2300      	movs	r3, #0
 800e174:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	1c5a      	adds	r2, r3, #1
 800e17a:	61fa      	str	r2, [r7, #28]
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	4619      	mov	r1, r3
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	1c5a      	adds	r2, r3, #1
 800e184:	61ba      	str	r2, [r7, #24]
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	1acb      	subs	r3, r1, r3
 800e18a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	3b01      	subs	r3, #1
 800e190:	607b      	str	r3, [r7, #4]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <mem_cmp+0x40>
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d0eb      	beq.n	800e176 <mem_cmp+0x18>

	return r;
 800e19e:	697b      	ldr	r3, [r7, #20]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3724      	adds	r7, #36	@ 0x24
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e1b6:	e002      	b.n	800e1be <chk_chr+0x12>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	607b      	str	r3, [r7, #4]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d005      	beq.n	800e1d2 <chk_chr+0x26>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d1f2      	bne.n	800e1b8 <chk_chr+0xc>
	return *str;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	370c      	adds	r7, #12
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr
	...

0800e1e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	60bb      	str	r3, [r7, #8]
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	60fb      	str	r3, [r7, #12]
 800e1f6:	e029      	b.n	800e24c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e1f8:	4a27      	ldr	r2, [pc, #156]	@ (800e298 <chk_lock+0xb4>)
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	011b      	lsls	r3, r3, #4
 800e1fe:	4413      	add	r3, r2
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d01d      	beq.n	800e242 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e206:	4a24      	ldr	r2, [pc, #144]	@ (800e298 <chk_lock+0xb4>)
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	011b      	lsls	r3, r3, #4
 800e20c:	4413      	add	r3, r2
 800e20e:	681a      	ldr	r2, [r3, #0]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	429a      	cmp	r2, r3
 800e216:	d116      	bne.n	800e246 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e218:	4a1f      	ldr	r2, [pc, #124]	@ (800e298 <chk_lock+0xb4>)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	011b      	lsls	r3, r3, #4
 800e21e:	4413      	add	r3, r2
 800e220:	3304      	adds	r3, #4
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e228:	429a      	cmp	r2, r3
 800e22a:	d10c      	bne.n	800e246 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e22c:	4a1a      	ldr	r2, [pc, #104]	@ (800e298 <chk_lock+0xb4>)
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	011b      	lsls	r3, r3, #4
 800e232:	4413      	add	r3, r2
 800e234:	3308      	adds	r3, #8
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d102      	bne.n	800e246 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e240:	e007      	b.n	800e252 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e242:	2301      	movs	r3, #1
 800e244:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	3301      	adds	r3, #1
 800e24a:	60fb      	str	r3, [r7, #12]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d9d2      	bls.n	800e1f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2b02      	cmp	r3, #2
 800e256:	d109      	bne.n	800e26c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d102      	bne.n	800e264 <chk_lock+0x80>
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	2b02      	cmp	r3, #2
 800e262:	d101      	bne.n	800e268 <chk_lock+0x84>
 800e264:	2300      	movs	r3, #0
 800e266:	e010      	b.n	800e28a <chk_lock+0xa6>
 800e268:	2312      	movs	r3, #18
 800e26a:	e00e      	b.n	800e28a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d108      	bne.n	800e284 <chk_lock+0xa0>
 800e272:	4a09      	ldr	r2, [pc, #36]	@ (800e298 <chk_lock+0xb4>)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	011b      	lsls	r3, r3, #4
 800e278:	4413      	add	r3, r2
 800e27a:	330c      	adds	r3, #12
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e282:	d101      	bne.n	800e288 <chk_lock+0xa4>
 800e284:	2310      	movs	r3, #16
 800e286:	e000      	b.n	800e28a <chk_lock+0xa6>
 800e288:	2300      	movs	r3, #0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3714      	adds	r7, #20
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop
 800e298:	24004978 	.word	0x24004978

0800e29c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	607b      	str	r3, [r7, #4]
 800e2a6:	e002      	b.n	800e2ae <enq_lock+0x12>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	607b      	str	r3, [r7, #4]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d806      	bhi.n	800e2c2 <enq_lock+0x26>
 800e2b4:	4a09      	ldr	r2, [pc, #36]	@ (800e2dc <enq_lock+0x40>)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	011b      	lsls	r3, r3, #4
 800e2ba:	4413      	add	r3, r2
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1f2      	bne.n	800e2a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2b02      	cmp	r3, #2
 800e2c6:	bf14      	ite	ne
 800e2c8:	2301      	movne	r3, #1
 800e2ca:	2300      	moveq	r3, #0
 800e2cc:	b2db      	uxtb	r3, r3
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	370c      	adds	r7, #12
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	24004978 	.word	0x24004978

0800e2e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b085      	sub	sp, #20
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	60fb      	str	r3, [r7, #12]
 800e2ee:	e01f      	b.n	800e330 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e2f0:	4a41      	ldr	r2, [pc, #260]	@ (800e3f8 <inc_lock+0x118>)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	011b      	lsls	r3, r3, #4
 800e2f6:	4413      	add	r3, r2
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d113      	bne.n	800e32a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e302:	4a3d      	ldr	r2, [pc, #244]	@ (800e3f8 <inc_lock+0x118>)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	011b      	lsls	r3, r3, #4
 800e308:	4413      	add	r3, r2
 800e30a:	3304      	adds	r3, #4
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e312:	429a      	cmp	r2, r3
 800e314:	d109      	bne.n	800e32a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e316:	4a38      	ldr	r2, [pc, #224]	@ (800e3f8 <inc_lock+0x118>)
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	011b      	lsls	r3, r3, #4
 800e31c:	4413      	add	r3, r2
 800e31e:	3308      	adds	r3, #8
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e326:	429a      	cmp	r2, r3
 800e328:	d006      	beq.n	800e338 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3301      	adds	r3, #1
 800e32e:	60fb      	str	r3, [r7, #12]
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2b01      	cmp	r3, #1
 800e334:	d9dc      	bls.n	800e2f0 <inc_lock+0x10>
 800e336:	e000      	b.n	800e33a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e338:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2b02      	cmp	r3, #2
 800e33e:	d132      	bne.n	800e3a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e340:	2300      	movs	r3, #0
 800e342:	60fb      	str	r3, [r7, #12]
 800e344:	e002      	b.n	800e34c <inc_lock+0x6c>
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	3301      	adds	r3, #1
 800e34a:	60fb      	str	r3, [r7, #12]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d806      	bhi.n	800e360 <inc_lock+0x80>
 800e352:	4a29      	ldr	r2, [pc, #164]	@ (800e3f8 <inc_lock+0x118>)
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	011b      	lsls	r3, r3, #4
 800e358:	4413      	add	r3, r2
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d1f2      	bne.n	800e346 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2b02      	cmp	r3, #2
 800e364:	d101      	bne.n	800e36a <inc_lock+0x8a>
 800e366:	2300      	movs	r3, #0
 800e368:	e040      	b.n	800e3ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	4922      	ldr	r1, [pc, #136]	@ (800e3f8 <inc_lock+0x118>)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	011b      	lsls	r3, r3, #4
 800e374:	440b      	add	r3, r1
 800e376:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	689a      	ldr	r2, [r3, #8]
 800e37c:	491e      	ldr	r1, [pc, #120]	@ (800e3f8 <inc_lock+0x118>)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	011b      	lsls	r3, r3, #4
 800e382:	440b      	add	r3, r1
 800e384:	3304      	adds	r3, #4
 800e386:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	695a      	ldr	r2, [r3, #20]
 800e38c:	491a      	ldr	r1, [pc, #104]	@ (800e3f8 <inc_lock+0x118>)
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	011b      	lsls	r3, r3, #4
 800e392:	440b      	add	r3, r1
 800e394:	3308      	adds	r3, #8
 800e396:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e398:	4a17      	ldr	r2, [pc, #92]	@ (800e3f8 <inc_lock+0x118>)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	011b      	lsls	r3, r3, #4
 800e39e:	4413      	add	r3, r2
 800e3a0:	330c      	adds	r3, #12
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d009      	beq.n	800e3c0 <inc_lock+0xe0>
 800e3ac:	4a12      	ldr	r2, [pc, #72]	@ (800e3f8 <inc_lock+0x118>)
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	011b      	lsls	r3, r3, #4
 800e3b2:	4413      	add	r3, r2
 800e3b4:	330c      	adds	r3, #12
 800e3b6:	881b      	ldrh	r3, [r3, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d001      	beq.n	800e3c0 <inc_lock+0xe0>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	e015      	b.n	800e3ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d108      	bne.n	800e3d8 <inc_lock+0xf8>
 800e3c6:	4a0c      	ldr	r2, [pc, #48]	@ (800e3f8 <inc_lock+0x118>)
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	011b      	lsls	r3, r3, #4
 800e3cc:	4413      	add	r3, r2
 800e3ce:	330c      	adds	r3, #12
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	e001      	b.n	800e3dc <inc_lock+0xfc>
 800e3d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e3dc:	4906      	ldr	r1, [pc, #24]	@ (800e3f8 <inc_lock+0x118>)
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	011b      	lsls	r3, r3, #4
 800e3e2:	440b      	add	r3, r1
 800e3e4:	330c      	adds	r3, #12
 800e3e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	3301      	adds	r3, #1
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3714      	adds	r7, #20
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr
 800e3f8:	24004978 	.word	0x24004978

0800e3fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e404:	2300      	movs	r3, #0
 800e406:	60fb      	str	r3, [r7, #12]
 800e408:	e010      	b.n	800e42c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e40a:	4a0d      	ldr	r2, [pc, #52]	@ (800e440 <clear_lock+0x44>)
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	011b      	lsls	r3, r3, #4
 800e410:	4413      	add	r3, r2
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	429a      	cmp	r2, r3
 800e418:	d105      	bne.n	800e426 <clear_lock+0x2a>
 800e41a:	4a09      	ldr	r2, [pc, #36]	@ (800e440 <clear_lock+0x44>)
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	011b      	lsls	r3, r3, #4
 800e420:	4413      	add	r3, r2
 800e422:	2200      	movs	r2, #0
 800e424:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	3301      	adds	r3, #1
 800e42a:	60fb      	str	r3, [r7, #12]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d9eb      	bls.n	800e40a <clear_lock+0xe>
	}
}
 800e432:	bf00      	nop
 800e434:	bf00      	nop
 800e436:	3714      	adds	r7, #20
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr
 800e440:	24004978 	.word	0x24004978

0800e444 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b086      	sub	sp, #24
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e44c:	2300      	movs	r3, #0
 800e44e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	78db      	ldrb	r3, [r3, #3]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d034      	beq.n	800e4c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e45c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	7858      	ldrb	r0, [r3, #1]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e468:	2301      	movs	r3, #1
 800e46a:	697a      	ldr	r2, [r7, #20]
 800e46c:	f7ff fd98 	bl	800dfa0 <disk_write>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d002      	beq.n	800e47c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e476:	2301      	movs	r3, #1
 800e478:	73fb      	strb	r3, [r7, #15]
 800e47a:	e022      	b.n	800e4c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2200      	movs	r2, #0
 800e480:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e486:	697a      	ldr	r2, [r7, #20]
 800e488:	1ad2      	subs	r2, r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	69db      	ldr	r3, [r3, #28]
 800e48e:	429a      	cmp	r2, r3
 800e490:	d217      	bcs.n	800e4c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	789b      	ldrb	r3, [r3, #2]
 800e496:	613b      	str	r3, [r7, #16]
 800e498:	e010      	b.n	800e4bc <sync_window+0x78>
					wsect += fs->fsize;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	69db      	ldr	r3, [r3, #28]
 800e49e:	697a      	ldr	r2, [r7, #20]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	7858      	ldrb	r0, [r3, #1]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	697a      	ldr	r2, [r7, #20]
 800e4b2:	f7ff fd75 	bl	800dfa0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	613b      	str	r3, [r7, #16]
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d8eb      	bhi.n	800e49a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3718      	adds	r7, #24
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4de:	683a      	ldr	r2, [r7, #0]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d01b      	beq.n	800e51c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7ff ffad 	bl	800e444 <sync_window>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e4ee:	7bfb      	ldrb	r3, [r7, #15]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d113      	bne.n	800e51c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	7858      	ldrb	r0, [r3, #1]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e4fe:	2301      	movs	r3, #1
 800e500:	683a      	ldr	r2, [r7, #0]
 800e502:	f7ff fd2d 	bl	800df60 <disk_read>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d004      	beq.n	800e516 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e50c:	f04f 33ff 	mov.w	r3, #4294967295
 800e510:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e512:	2301      	movs	r3, #1
 800e514:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	683a      	ldr	r2, [r7, #0]
 800e51a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800e51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e526:	b480      	push	{r7}
 800e528:	b083      	sub	sp, #12
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
 800e52e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	3b02      	subs	r3, #2
 800e534:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	3b02      	subs	r3, #2
 800e53c:	683a      	ldr	r2, [r7, #0]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d301      	bcc.n	800e546 <clust2sect+0x20>
 800e542:	2300      	movs	r3, #0
 800e544:	e008      	b.n	800e558 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	895b      	ldrh	r3, [r3, #10]
 800e54a:	461a      	mov	r2, r3
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	fb03 f202 	mul.w	r2, r3, r2
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e556:	4413      	add	r3, r2
}
 800e558:	4618      	mov	r0, r3
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d904      	bls.n	800e584 <get_fat+0x20>
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	699b      	ldr	r3, [r3, #24]
 800e57e:	683a      	ldr	r2, [r7, #0]
 800e580:	429a      	cmp	r2, r3
 800e582:	d302      	bcc.n	800e58a <get_fat+0x26>
		val = 1;	/* Internal error */
 800e584:	2301      	movs	r3, #1
 800e586:	617b      	str	r3, [r7, #20]
 800e588:	e08e      	b.n	800e6a8 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e58a:	f04f 33ff 	mov.w	r3, #4294967295
 800e58e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	2b03      	cmp	r3, #3
 800e596:	d061      	beq.n	800e65c <get_fat+0xf8>
 800e598:	2b03      	cmp	r3, #3
 800e59a:	dc7b      	bgt.n	800e694 <get_fat+0x130>
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d002      	beq.n	800e5a6 <get_fat+0x42>
 800e5a0:	2b02      	cmp	r3, #2
 800e5a2:	d041      	beq.n	800e628 <get_fat+0xc4>
 800e5a4:	e076      	b.n	800e694 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	60fb      	str	r3, [r7, #12]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	085b      	lsrs	r3, r3, #1
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	0a5b      	lsrs	r3, r3, #9
 800e5bc:	4413      	add	r3, r2
 800e5be:	4619      	mov	r1, r3
 800e5c0:	6938      	ldr	r0, [r7, #16]
 800e5c2:	f7ff ff83 	bl	800e4cc <move_window>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d166      	bne.n	800e69a <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	1c5a      	adds	r2, r3, #1
 800e5d0:	60fa      	str	r2, [r7, #12]
 800e5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5d6:	693a      	ldr	r2, [r7, #16]
 800e5d8:	4413      	add	r3, r2
 800e5da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e5de:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	0a5b      	lsrs	r3, r3, #9
 800e5e8:	4413      	add	r3, r2
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	6938      	ldr	r0, [r7, #16]
 800e5ee:	f7ff ff6d 	bl	800e4cc <move_window>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d152      	bne.n	800e69e <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5fe:	693a      	ldr	r2, [r7, #16]
 800e600:	4413      	add	r3, r2
 800e602:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e606:	021b      	lsls	r3, r3, #8
 800e608:	68ba      	ldr	r2, [r7, #8]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	2b00      	cmp	r3, #0
 800e616:	d002      	beq.n	800e61e <get_fat+0xba>
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	091b      	lsrs	r3, r3, #4
 800e61c:	e002      	b.n	800e624 <get_fat+0xc0>
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e624:	617b      	str	r3, [r7, #20]
			break;
 800e626:	e03f      	b.n	800e6a8 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	0a1b      	lsrs	r3, r3, #8
 800e630:	4413      	add	r3, r2
 800e632:	4619      	mov	r1, r3
 800e634:	6938      	ldr	r0, [r7, #16]
 800e636:	f7ff ff49 	bl	800e4cc <move_window>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d130      	bne.n	800e6a2 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	005b      	lsls	r3, r3, #1
 800e64a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e64e:	4413      	add	r3, r2
 800e650:	4618      	mov	r0, r3
 800e652:	f7ff fcc5 	bl	800dfe0 <ld_word>
 800e656:	4603      	mov	r3, r0
 800e658:	617b      	str	r3, [r7, #20]
			break;
 800e65a:	e025      	b.n	800e6a8 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	09db      	lsrs	r3, r3, #7
 800e664:	4413      	add	r3, r2
 800e666:	4619      	mov	r1, r3
 800e668:	6938      	ldr	r0, [r7, #16]
 800e66a:	f7ff ff2f 	bl	800e4cc <move_window>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d118      	bne.n	800e6a6 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e682:	4413      	add	r3, r2
 800e684:	4618      	mov	r0, r3
 800e686:	f7ff fcc4 	bl	800e012 <ld_dword>
 800e68a:	4603      	mov	r3, r0
 800e68c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e690:	617b      	str	r3, [r7, #20]
			break;
 800e692:	e009      	b.n	800e6a8 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e694:	2301      	movs	r3, #1
 800e696:	617b      	str	r3, [r7, #20]
 800e698:	e006      	b.n	800e6a8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e69a:	bf00      	nop
 800e69c:	e004      	b.n	800e6a8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e69e:	bf00      	nop
 800e6a0:	e002      	b.n	800e6a8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e6a2:	bf00      	nop
 800e6a4:	e000      	b.n	800e6a8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e6a6:	bf00      	nop
		}
	}

	return val;
 800e6a8:	697b      	ldr	r3, [r7, #20]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3718      	adds	r7, #24
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e6b2:	b590      	push	{r4, r7, lr}
 800e6b4:	b089      	sub	sp, #36	@ 0x24
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	60f8      	str	r0, [r7, #12]
 800e6ba:	60b9      	str	r1, [r7, #8]
 800e6bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e6be:	2302      	movs	r3, #2
 800e6c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	f240 80d9 	bls.w	800e87c <put_fat+0x1ca>
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	68ba      	ldr	r2, [r7, #8]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	f080 80d3 	bcs.w	800e87c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b03      	cmp	r3, #3
 800e6dc:	f000 8096 	beq.w	800e80c <put_fat+0x15a>
 800e6e0:	2b03      	cmp	r3, #3
 800e6e2:	f300 80cb 	bgt.w	800e87c <put_fat+0x1ca>
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d002      	beq.n	800e6f0 <put_fat+0x3e>
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	d06e      	beq.n	800e7cc <put_fat+0x11a>
 800e6ee:	e0c5      	b.n	800e87c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	61bb      	str	r3, [r7, #24]
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	085b      	lsrs	r3, r3, #1
 800e6f8:	69ba      	ldr	r2, [r7, #24]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	0a5b      	lsrs	r3, r3, #9
 800e706:	4413      	add	r3, r2
 800e708:	4619      	mov	r1, r3
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f7ff fede 	bl	800e4cc <move_window>
 800e710:	4603      	mov	r3, r0
 800e712:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e714:	7ffb      	ldrb	r3, [r7, #31]
 800e716:	2b00      	cmp	r3, #0
 800e718:	f040 80a9 	bne.w	800e86e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	1c59      	adds	r1, r3, #1
 800e726:	61b9      	str	r1, [r7, #24]
 800e728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e72c:	4413      	add	r3, r2
 800e72e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	f003 0301 	and.w	r3, r3, #1
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00d      	beq.n	800e756 <put_fat+0xa4>
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	b25b      	sxtb	r3, r3
 800e740:	f003 030f 	and.w	r3, r3, #15
 800e744:	b25a      	sxtb	r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	b25b      	sxtb	r3, r3
 800e74a:	011b      	lsls	r3, r3, #4
 800e74c:	b25b      	sxtb	r3, r3
 800e74e:	4313      	orrs	r3, r2
 800e750:	b25b      	sxtb	r3, r3
 800e752:	b2db      	uxtb	r3, r3
 800e754:	e001      	b.n	800e75a <put_fat+0xa8>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	697a      	ldr	r2, [r7, #20]
 800e75c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2201      	movs	r2, #1
 800e762:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	0a5b      	lsrs	r3, r3, #9
 800e76c:	4413      	add	r3, r2
 800e76e:	4619      	mov	r1, r3
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	f7ff feab 	bl	800e4cc <move_window>
 800e776:	4603      	mov	r3, r0
 800e778:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e77a:	7ffb      	ldrb	r3, [r7, #31]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d178      	bne.n	800e872 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e78c:	4413      	add	r3, r2
 800e78e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	f003 0301 	and.w	r3, r3, #1
 800e796:	2b00      	cmp	r3, #0
 800e798:	d003      	beq.n	800e7a2 <put_fat+0xf0>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	091b      	lsrs	r3, r3, #4
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	e00e      	b.n	800e7c0 <put_fat+0x10e>
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	b25b      	sxtb	r3, r3
 800e7a8:	f023 030f 	bic.w	r3, r3, #15
 800e7ac:	b25a      	sxtb	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	0a1b      	lsrs	r3, r3, #8
 800e7b2:	b25b      	sxtb	r3, r3
 800e7b4:	f003 030f 	and.w	r3, r3, #15
 800e7b8:	b25b      	sxtb	r3, r3
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	b25b      	sxtb	r3, r3
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	697a      	ldr	r2, [r7, #20]
 800e7c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	70da      	strb	r2, [r3, #3]
			break;
 800e7ca:	e057      	b.n	800e87c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	0a1b      	lsrs	r3, r3, #8
 800e7d4:	4413      	add	r3, r2
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f7ff fe77 	bl	800e4cc <move_window>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7e2:	7ffb      	ldrb	r3, [r7, #31]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d146      	bne.n	800e876 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	005b      	lsls	r3, r3, #1
 800e7f2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e7f6:	4413      	add	r3, r2
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	b292      	uxth	r2, r2
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7ff fc2a 	bl	800e058 <st_word>
			fs->wflag = 1;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2201      	movs	r2, #1
 800e808:	70da      	strb	r2, [r3, #3]
			break;
 800e80a:	e037      	b.n	800e87c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	09db      	lsrs	r3, r3, #7
 800e814:	4413      	add	r3, r2
 800e816:	4619      	mov	r1, r3
 800e818:	68f8      	ldr	r0, [r7, #12]
 800e81a:	f7ff fe57 	bl	800e4cc <move_window>
 800e81e:	4603      	mov	r3, r0
 800e820:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e822:	7ffb      	ldrb	r3, [r7, #31]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d128      	bne.n	800e87a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e83c:	4413      	add	r3, r2
 800e83e:	4618      	mov	r0, r3
 800e840:	f7ff fbe7 	bl	800e012 <ld_dword>
 800e844:	4603      	mov	r3, r0
 800e846:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e84a:	4323      	orrs	r3, r4
 800e84c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e85c:	4413      	add	r3, r2
 800e85e:	6879      	ldr	r1, [r7, #4]
 800e860:	4618      	mov	r0, r3
 800e862:	f7ff fc14 	bl	800e08e <st_dword>
			fs->wflag = 1;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2201      	movs	r2, #1
 800e86a:	70da      	strb	r2, [r3, #3]
			break;
 800e86c:	e006      	b.n	800e87c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e86e:	bf00      	nop
 800e870:	e004      	b.n	800e87c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e872:	bf00      	nop
 800e874:	e002      	b.n	800e87c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e876:	bf00      	nop
 800e878:	e000      	b.n	800e87c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e87a:	bf00      	nop
		}
	}
	return res;
 800e87c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3724      	adds	r7, #36	@ 0x24
 800e882:	46bd      	mov	sp, r7
 800e884:	bd90      	pop	{r4, r7, pc}

0800e886 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b088      	sub	sp, #32
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	60f8      	str	r0, [r7, #12]
 800e88e:	60b9      	str	r1, [r7, #8]
 800e890:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e892:	2300      	movs	r3, #0
 800e894:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d904      	bls.n	800e8ac <remove_chain+0x26>
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	699b      	ldr	r3, [r3, #24]
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d301      	bcc.n	800e8b0 <remove_chain+0x2a>
 800e8ac:	2302      	movs	r3, #2
 800e8ae:	e04b      	b.n	800e948 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d00c      	beq.n	800e8d0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ba:	6879      	ldr	r1, [r7, #4]
 800e8bc:	69b8      	ldr	r0, [r7, #24]
 800e8be:	f7ff fef8 	bl	800e6b2 <put_fat>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e8c6:	7ffb      	ldrb	r3, [r7, #31]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <remove_chain+0x4a>
 800e8cc:	7ffb      	ldrb	r3, [r7, #31]
 800e8ce:	e03b      	b.n	800e948 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e8d0:	68b9      	ldr	r1, [r7, #8]
 800e8d2:	68f8      	ldr	r0, [r7, #12]
 800e8d4:	f7ff fe46 	bl	800e564 <get_fat>
 800e8d8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d031      	beq.n	800e944 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d101      	bne.n	800e8ea <remove_chain+0x64>
 800e8e6:	2302      	movs	r3, #2
 800e8e8:	e02e      	b.n	800e948 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f0:	d101      	bne.n	800e8f6 <remove_chain+0x70>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e028      	b.n	800e948 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	68b9      	ldr	r1, [r7, #8]
 800e8fa:	69b8      	ldr	r0, [r7, #24]
 800e8fc:	f7ff fed9 	bl	800e6b2 <put_fat>
 800e900:	4603      	mov	r3, r0
 800e902:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e904:	7ffb      	ldrb	r3, [r7, #31]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d001      	beq.n	800e90e <remove_chain+0x88>
 800e90a:	7ffb      	ldrb	r3, [r7, #31]
 800e90c:	e01c      	b.n	800e948 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	695a      	ldr	r2, [r3, #20]
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	3b02      	subs	r3, #2
 800e918:	429a      	cmp	r2, r3
 800e91a:	d20b      	bcs.n	800e934 <remove_chain+0xae>
			fs->free_clst++;
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	695b      	ldr	r3, [r3, #20]
 800e920:	1c5a      	adds	r2, r3, #1
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	791b      	ldrb	r3, [r3, #4]
 800e92a:	f043 0301 	orr.w	r3, r3, #1
 800e92e:	b2da      	uxtb	r2, r3
 800e930:	69bb      	ldr	r3, [r7, #24]
 800e932:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e938:	69bb      	ldr	r3, [r7, #24]
 800e93a:	699b      	ldr	r3, [r3, #24]
 800e93c:	68ba      	ldr	r2, [r7, #8]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d3c6      	bcc.n	800e8d0 <remove_chain+0x4a>
 800e942:	e000      	b.n	800e946 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e944:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3720      	adds	r7, #32
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b088      	sub	sp, #32
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d10d      	bne.n	800e982 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	691b      	ldr	r3, [r3, #16]
 800e96a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e96c:	69bb      	ldr	r3, [r7, #24]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d004      	beq.n	800e97c <create_chain+0x2c>
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	699b      	ldr	r3, [r3, #24]
 800e976:	69ba      	ldr	r2, [r7, #24]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d31b      	bcc.n	800e9b4 <create_chain+0x64>
 800e97c:	2301      	movs	r3, #1
 800e97e:	61bb      	str	r3, [r7, #24]
 800e980:	e018      	b.n	800e9b4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e982:	6839      	ldr	r1, [r7, #0]
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7ff fded 	bl	800e564 <get_fat>
 800e98a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d801      	bhi.n	800e996 <create_chain+0x46>
 800e992:	2301      	movs	r3, #1
 800e994:	e070      	b.n	800ea78 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e99c:	d101      	bne.n	800e9a2 <create_chain+0x52>
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	e06a      	b.n	800ea78 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	699b      	ldr	r3, [r3, #24]
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d201      	bcs.n	800e9b0 <create_chain+0x60>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	e063      	b.n	800ea78 <create_chain+0x128>
		scl = clst;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	69fa      	ldr	r2, [r7, #28]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d307      	bcc.n	800e9d8 <create_chain+0x88>
				ncl = 2;
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e9cc:	69fa      	ldr	r2, [r7, #28]
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d901      	bls.n	800e9d8 <create_chain+0x88>
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	e04f      	b.n	800ea78 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e9d8:	69f9      	ldr	r1, [r7, #28]
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f7ff fdc2 	bl	800e564 <get_fat>
 800e9e0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d00e      	beq.n	800ea06 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d003      	beq.n	800e9f6 <create_chain+0xa6>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9f4:	d101      	bne.n	800e9fa <create_chain+0xaa>
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	e03e      	b.n	800ea78 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e9fa:	69fa      	ldr	r2, [r7, #28]
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d1da      	bne.n	800e9b8 <create_chain+0x68>
 800ea02:	2300      	movs	r3, #0
 800ea04:	e038      	b.n	800ea78 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ea06:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ea08:	f04f 32ff 	mov.w	r2, #4294967295
 800ea0c:	69f9      	ldr	r1, [r7, #28]
 800ea0e:	6938      	ldr	r0, [r7, #16]
 800ea10:	f7ff fe4f 	bl	800e6b2 <put_fat>
 800ea14:	4603      	mov	r3, r0
 800ea16:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ea18:	7dfb      	ldrb	r3, [r7, #23]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d109      	bne.n	800ea32 <create_chain+0xe2>
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d006      	beq.n	800ea32 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ea24:	69fa      	ldr	r2, [r7, #28]
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	6938      	ldr	r0, [r7, #16]
 800ea2a:	f7ff fe42 	bl	800e6b2 <put_fat>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ea32:	7dfb      	ldrb	r3, [r7, #23]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d116      	bne.n	800ea66 <create_chain+0x116>
		fs->last_clst = ncl;
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	69fa      	ldr	r2, [r7, #28]
 800ea3c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	695a      	ldr	r2, [r3, #20]
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	699b      	ldr	r3, [r3, #24]
 800ea46:	3b02      	subs	r3, #2
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d804      	bhi.n	800ea56 <create_chain+0x106>
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	695b      	ldr	r3, [r3, #20]
 800ea50:	1e5a      	subs	r2, r3, #1
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	791b      	ldrb	r3, [r3, #4]
 800ea5a:	f043 0301 	orr.w	r3, r3, #1
 800ea5e:	b2da      	uxtb	r2, r3
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	711a      	strb	r2, [r3, #4]
 800ea64:	e007      	b.n	800ea76 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ea66:	7dfb      	ldrb	r3, [r7, #23]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d102      	bne.n	800ea72 <create_chain+0x122>
 800ea6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea70:	e000      	b.n	800ea74 <create_chain+0x124>
 800ea72:	2301      	movs	r3, #1
 800ea74:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ea76:	69fb      	ldr	r3, [r7, #28]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3720      	adds	r7, #32
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b087      	sub	sp, #28
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea94:	3304      	adds	r3, #4
 800ea96:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	0a5b      	lsrs	r3, r3, #9
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	8952      	ldrh	r2, [r2, #10]
 800eaa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800eaa4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	1d1a      	adds	r2, r3, #4
 800eaaa:	613a      	str	r2, [r7, #16]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d101      	bne.n	800eaba <clmt_clust+0x3a>
 800eab6:	2300      	movs	r3, #0
 800eab8:	e010      	b.n	800eadc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800eaba:	697a      	ldr	r2, [r7, #20]
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d307      	bcc.n	800ead2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800eac2:	697a      	ldr	r2, [r7, #20]
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	617b      	str	r3, [r7, #20]
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	3304      	adds	r3, #4
 800eace:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ead0:	e7e9      	b.n	800eaa6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ead2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	4413      	add	r3, r2
}
 800eadc:	4618      	mov	r0, r3
 800eade:	371c      	adds	r7, #28
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b086      	sub	sp, #24
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eafe:	d204      	bcs.n	800eb0a <dir_sdi+0x22>
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	f003 031f 	and.w	r3, r3, #31
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d001      	beq.n	800eb0e <dir_sdi+0x26>
		return FR_INT_ERR;
 800eb0a:	2302      	movs	r3, #2
 800eb0c:	e063      	b.n	800ebd6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	683a      	ldr	r2, [r7, #0]
 800eb12:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d106      	bne.n	800eb2e <dir_sdi+0x46>
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	d902      	bls.n	800eb2e <dir_sdi+0x46>
		clst = fs->dirbase;
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb2c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10c      	bne.n	800eb4e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	095b      	lsrs	r3, r3, #5
 800eb38:	693a      	ldr	r2, [r7, #16]
 800eb3a:	8912      	ldrh	r2, [r2, #8]
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d301      	bcc.n	800eb44 <dir_sdi+0x5c>
 800eb40:	2302      	movs	r3, #2
 800eb42:	e048      	b.n	800ebd6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	61da      	str	r2, [r3, #28]
 800eb4c:	e029      	b.n	800eba2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	895b      	ldrh	r3, [r3, #10]
 800eb52:	025b      	lsls	r3, r3, #9
 800eb54:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eb56:	e019      	b.n	800eb8c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6979      	ldr	r1, [r7, #20]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7ff fd01 	bl	800e564 <get_fat>
 800eb62:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb6a:	d101      	bne.n	800eb70 <dir_sdi+0x88>
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e032      	b.n	800ebd6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d904      	bls.n	800eb80 <dir_sdi+0x98>
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	697a      	ldr	r2, [r7, #20]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d301      	bcc.n	800eb84 <dir_sdi+0x9c>
 800eb80:	2302      	movs	r3, #2
 800eb82:	e028      	b.n	800ebd6 <dir_sdi+0xee>
			ofs -= csz;
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eb8c:	683a      	ldr	r2, [r7, #0]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d2e1      	bcs.n	800eb58 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800eb94:	6979      	ldr	r1, [r7, #20]
 800eb96:	6938      	ldr	r0, [r7, #16]
 800eb98:	f7ff fcc5 	bl	800e526 <clust2sect>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	697a      	ldr	r2, [r7, #20]
 800eba6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	69db      	ldr	r3, [r3, #28]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d101      	bne.n	800ebb4 <dir_sdi+0xcc>
 800ebb0:	2302      	movs	r3, #2
 800ebb2:	e010      	b.n	800ebd6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	69da      	ldr	r2, [r3, #28]
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	0a5b      	lsrs	r3, r3, #9
 800ebbc:	441a      	add	r2, r3
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebce:	441a      	add	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b086      	sub	sp, #24
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
 800ebe6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	695b      	ldr	r3, [r3, #20]
 800ebf2:	3320      	adds	r3, #32
 800ebf4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	69db      	ldr	r3, [r3, #28]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d003      	beq.n	800ec06 <dir_next+0x28>
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ec04:	d301      	bcc.n	800ec0a <dir_next+0x2c>
 800ec06:	2304      	movs	r3, #4
 800ec08:	e0aa      	b.n	800ed60 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f040 8098 	bne.w	800ed46 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	69db      	ldr	r3, [r3, #28]
 800ec1a:	1c5a      	adds	r2, r3, #1
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	699b      	ldr	r3, [r3, #24]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d10b      	bne.n	800ec40 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	095b      	lsrs	r3, r3, #5
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	8912      	ldrh	r2, [r2, #8]
 800ec30:	4293      	cmp	r3, r2
 800ec32:	f0c0 8088 	bcc.w	800ed46 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	61da      	str	r2, [r3, #28]
 800ec3c:	2304      	movs	r3, #4
 800ec3e:	e08f      	b.n	800ed60 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	0a5b      	lsrs	r3, r3, #9
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	8952      	ldrh	r2, [r2, #10]
 800ec48:	3a01      	subs	r2, #1
 800ec4a:	4013      	ands	r3, r2
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d17a      	bne.n	800ed46 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	699b      	ldr	r3, [r3, #24]
 800ec56:	4619      	mov	r1, r3
 800ec58:	4610      	mov	r0, r2
 800ec5a:	f7ff fc83 	bl	800e564 <get_fat>
 800ec5e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d801      	bhi.n	800ec6a <dir_next+0x8c>
 800ec66:	2302      	movs	r3, #2
 800ec68:	e07a      	b.n	800ed60 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec70:	d101      	bne.n	800ec76 <dir_next+0x98>
 800ec72:	2301      	movs	r3, #1
 800ec74:	e074      	b.n	800ed60 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	699b      	ldr	r3, [r3, #24]
 800ec7a:	697a      	ldr	r2, [r7, #20]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d358      	bcc.n	800ed32 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d104      	bne.n	800ec90 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	61da      	str	r2, [r3, #28]
 800ec8c:	2304      	movs	r3, #4
 800ec8e:	e067      	b.n	800ed60 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	699b      	ldr	r3, [r3, #24]
 800ec96:	4619      	mov	r1, r3
 800ec98:	4610      	mov	r0, r2
 800ec9a:	f7ff fe59 	bl	800e950 <create_chain>
 800ec9e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d101      	bne.n	800ecaa <dir_next+0xcc>
 800eca6:	2307      	movs	r3, #7
 800eca8:	e05a      	b.n	800ed60 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d101      	bne.n	800ecb4 <dir_next+0xd6>
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	e055      	b.n	800ed60 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecba:	d101      	bne.n	800ecc0 <dir_next+0xe2>
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e04f      	b.n	800ed60 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f7ff fbbf 	bl	800e444 <sync_window>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d001      	beq.n	800ecd0 <dir_next+0xf2>
 800eccc:	2301      	movs	r3, #1
 800ecce:	e047      	b.n	800ed60 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	3334      	adds	r3, #52	@ 0x34
 800ecd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecd8:	2100      	movs	r1, #0
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7ff fa24 	bl	800e128 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ece0:	2300      	movs	r3, #0
 800ece2:	613b      	str	r3, [r7, #16]
 800ece4:	6979      	ldr	r1, [r7, #20]
 800ece6:	68f8      	ldr	r0, [r7, #12]
 800ece8:	f7ff fc1d 	bl	800e526 <clust2sect>
 800ecec:	4602      	mov	r2, r0
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	631a      	str	r2, [r3, #48]	@ 0x30
 800ecf2:	e012      	b.n	800ed1a <dir_next+0x13c>
						fs->wflag = 1;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f7ff fba2 	bl	800e444 <sync_window>
 800ed00:	4603      	mov	r3, r0
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d001      	beq.n	800ed0a <dir_next+0x12c>
 800ed06:	2301      	movs	r3, #1
 800ed08:	e02a      	b.n	800ed60 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	613b      	str	r3, [r7, #16]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed14:	1c5a      	adds	r2, r3, #1
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	631a      	str	r2, [r3, #48]	@ 0x30
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	895b      	ldrh	r3, [r3, #10]
 800ed1e:	461a      	mov	r2, r3
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d3e6      	bcc.n	800ecf4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	1ad2      	subs	r2, r2, r3
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	697a      	ldr	r2, [r7, #20]
 800ed36:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ed38:	6979      	ldr	r1, [r7, #20]
 800ed3a:	68f8      	ldr	r0, [r7, #12]
 800ed3c:	f7ff fbf3 	bl	800e526 <clust2sect>
 800ed40:	4602      	mov	r2, r0
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed58:	441a      	add	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ed5e:	2300      	movs	r3, #0
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3718      	adds	r7, #24
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ed78:	2100      	movs	r1, #0
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f7ff feb4 	bl	800eae8 <dir_sdi>
 800ed80:	4603      	mov	r3, r0
 800ed82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ed84:	7dfb      	ldrb	r3, [r7, #23]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d12b      	bne.n	800ede2 <dir_alloc+0x7a>
		n = 0;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	69db      	ldr	r3, [r3, #28]
 800ed92:	4619      	mov	r1, r3
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f7ff fb99 	bl	800e4cc <move_window>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ed9e:	7dfb      	ldrb	r3, [r7, #23]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d11d      	bne.n	800ede0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6a1b      	ldr	r3, [r3, #32]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	2be5      	cmp	r3, #229	@ 0xe5
 800edac:	d004      	beq.n	800edb8 <dir_alloc+0x50>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6a1b      	ldr	r3, [r3, #32]
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d107      	bne.n	800edc8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	3301      	adds	r3, #1
 800edbc:	613b      	str	r3, [r7, #16]
 800edbe:	693a      	ldr	r2, [r7, #16]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d102      	bne.n	800edcc <dir_alloc+0x64>
 800edc6:	e00c      	b.n	800ede2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800edc8:	2300      	movs	r3, #0
 800edca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800edcc:	2101      	movs	r1, #1
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7ff ff05 	bl	800ebde <dir_next>
 800edd4:	4603      	mov	r3, r0
 800edd6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800edd8:	7dfb      	ldrb	r3, [r7, #23]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d0d7      	beq.n	800ed8e <dir_alloc+0x26>
 800edde:	e000      	b.n	800ede2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ede0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ede2:	7dfb      	ldrb	r3, [r7, #23]
 800ede4:	2b04      	cmp	r3, #4
 800ede6:	d101      	bne.n	800edec <dir_alloc+0x84>
 800ede8:	2307      	movs	r3, #7
 800edea:	75fb      	strb	r3, [r7, #23]
	return res;
 800edec:	7dfb      	ldrb	r3, [r7, #23]
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3718      	adds	r7, #24
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b084      	sub	sp, #16
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
 800edfe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	331a      	adds	r3, #26
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff f8eb 	bl	800dfe0 <ld_word>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	2b03      	cmp	r3, #3
 800ee14:	d109      	bne.n	800ee2a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	3314      	adds	r3, #20
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff f8e0 	bl	800dfe0 <ld_word>
 800ee20:	4603      	mov	r3, r0
 800ee22:	041b      	lsls	r3, r3, #16
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	4313      	orrs	r3, r2
 800ee28:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	331a      	adds	r3, #26
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	b292      	uxth	r2, r2
 800ee48:	4611      	mov	r1, r2
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7ff f904 	bl	800e058 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	2b03      	cmp	r3, #3
 800ee56:	d109      	bne.n	800ee6c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	f103 0214 	add.w	r2, r3, #20
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	0c1b      	lsrs	r3, r3, #16
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	4619      	mov	r1, r3
 800ee66:	4610      	mov	r0, r2
 800ee68:	f7ff f8f6 	bl	800e058 <st_word>
	}
}
 800ee6c:	bf00      	nop
 800ee6e:	3710      	adds	r7, #16
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ee74:	b590      	push	{r4, r7, lr}
 800ee76:	b087      	sub	sp, #28
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	331a      	adds	r3, #26
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7ff f8ac 	bl	800dfe0 <ld_word>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d001      	beq.n	800ee92 <cmp_lfn+0x1e>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	e059      	b.n	800ef46 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee9a:	1e5a      	subs	r2, r3, #1
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	005b      	lsls	r3, r3, #1
 800eea0:	4413      	add	r3, r2
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	4413      	add	r3, r2
 800eea6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800eea8:	2301      	movs	r3, #1
 800eeaa:	81fb      	strh	r3, [r7, #14]
 800eeac:	2300      	movs	r3, #0
 800eeae:	613b      	str	r3, [r7, #16]
 800eeb0:	e033      	b.n	800ef1a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800eeb2:	4a27      	ldr	r2, [pc, #156]	@ (800ef50 <cmp_lfn+0xdc>)
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	461a      	mov	r2, r3
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	4413      	add	r3, r2
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7ff f88d 	bl	800dfe0 <ld_word>
 800eec6:	4603      	mov	r3, r0
 800eec8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800eeca:	89fb      	ldrh	r3, [r7, #14]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d01a      	beq.n	800ef06 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	2bfe      	cmp	r3, #254	@ 0xfe
 800eed4:	d812      	bhi.n	800eefc <cmp_lfn+0x88>
 800eed6:	89bb      	ldrh	r3, [r7, #12]
 800eed8:	4618      	mov	r0, r3
 800eeda:	f002 f955 	bl	8011188 <ff_wtoupper>
 800eede:	4603      	mov	r3, r0
 800eee0:	461c      	mov	r4, r3
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	1c5a      	adds	r2, r3, #1
 800eee6:	617a      	str	r2, [r7, #20]
 800eee8:	005b      	lsls	r3, r3, #1
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	4413      	add	r3, r2
 800eeee:	881b      	ldrh	r3, [r3, #0]
 800eef0:	4618      	mov	r0, r3
 800eef2:	f002 f949 	bl	8011188 <ff_wtoupper>
 800eef6:	4603      	mov	r3, r0
 800eef8:	429c      	cmp	r4, r3
 800eefa:	d001      	beq.n	800ef00 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800eefc:	2300      	movs	r3, #0
 800eefe:	e022      	b.n	800ef46 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ef00:	89bb      	ldrh	r3, [r7, #12]
 800ef02:	81fb      	strh	r3, [r7, #14]
 800ef04:	e006      	b.n	800ef14 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ef06:	89bb      	ldrh	r3, [r7, #12]
 800ef08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d001      	beq.n	800ef14 <cmp_lfn+0xa0>
 800ef10:	2300      	movs	r3, #0
 800ef12:	e018      	b.n	800ef46 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	3301      	adds	r3, #1
 800ef18:	613b      	str	r3, [r7, #16]
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	2b0c      	cmp	r3, #12
 800ef1e:	d9c8      	bls.n	800eeb2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00b      	beq.n	800ef44 <cmp_lfn+0xd0>
 800ef2c:	89fb      	ldrh	r3, [r7, #14]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d008      	beq.n	800ef44 <cmp_lfn+0xd0>
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	005b      	lsls	r3, r3, #1
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	4413      	add	r3, r2
 800ef3a:	881b      	ldrh	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d001      	beq.n	800ef44 <cmp_lfn+0xd0>
 800ef40:	2300      	movs	r3, #0
 800ef42:	e000      	b.n	800ef46 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ef44:	2301      	movs	r3, #1
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	371c      	adds	r7, #28
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd90      	pop	{r4, r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	0801256c 	.word	0x0801256c

0800ef54 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	331a      	adds	r3, #26
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7ff f83c 	bl	800dfe0 <ld_word>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d001      	beq.n	800ef72 <pick_lfn+0x1e>
 800ef6e:	2300      	movs	r3, #0
 800ef70:	e04d      	b.n	800f00e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef7a:	1e5a      	subs	r2, r3, #1
 800ef7c:	4613      	mov	r3, r2
 800ef7e:	005b      	lsls	r3, r3, #1
 800ef80:	4413      	add	r3, r2
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	4413      	add	r3, r2
 800ef86:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef88:	2301      	movs	r3, #1
 800ef8a:	81fb      	strh	r3, [r7, #14]
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	613b      	str	r3, [r7, #16]
 800ef90:	e028      	b.n	800efe4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ef92:	4a21      	ldr	r2, [pc, #132]	@ (800f018 <pick_lfn+0xc4>)
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	4413      	add	r3, r2
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	4413      	add	r3, r2
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7ff f81d 	bl	800dfe0 <ld_word>
 800efa6:	4603      	mov	r3, r0
 800efa8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800efaa:	89fb      	ldrh	r3, [r7, #14]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d00f      	beq.n	800efd0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	2bfe      	cmp	r3, #254	@ 0xfe
 800efb4:	d901      	bls.n	800efba <pick_lfn+0x66>
 800efb6:	2300      	movs	r3, #0
 800efb8:	e029      	b.n	800f00e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800efba:	89bb      	ldrh	r3, [r7, #12]
 800efbc:	81fb      	strh	r3, [r7, #14]
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	1c5a      	adds	r2, r3, #1
 800efc2:	617a      	str	r2, [r7, #20]
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	4413      	add	r3, r2
 800efca:	89fa      	ldrh	r2, [r7, #14]
 800efcc:	801a      	strh	r2, [r3, #0]
 800efce:	e006      	b.n	800efde <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800efd0:	89bb      	ldrh	r3, [r7, #12]
 800efd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d001      	beq.n	800efde <pick_lfn+0x8a>
 800efda:	2300      	movs	r3, #0
 800efdc:	e017      	b.n	800f00e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	3301      	adds	r3, #1
 800efe2:	613b      	str	r3, [r7, #16]
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	2b0c      	cmp	r3, #12
 800efe8:	d9d3      	bls.n	800ef92 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d00a      	beq.n	800f00c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	2bfe      	cmp	r3, #254	@ 0xfe
 800effa:	d901      	bls.n	800f000 <pick_lfn+0xac>
 800effc:	2300      	movs	r3, #0
 800effe:	e006      	b.n	800f00e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	005b      	lsls	r3, r3, #1
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	4413      	add	r3, r2
 800f008:	2200      	movs	r2, #0
 800f00a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800f00c:	2301      	movs	r3, #1
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3718      	adds	r7, #24
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	0801256c 	.word	0x0801256c

0800f01c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b088      	sub	sp, #32
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	60b9      	str	r1, [r7, #8]
 800f026:	4611      	mov	r1, r2
 800f028:	461a      	mov	r2, r3
 800f02a:	460b      	mov	r3, r1
 800f02c:	71fb      	strb	r3, [r7, #7]
 800f02e:	4613      	mov	r3, r2
 800f030:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	330d      	adds	r3, #13
 800f036:	79ba      	ldrb	r2, [r7, #6]
 800f038:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	330b      	adds	r3, #11
 800f03e:	220f      	movs	r2, #15
 800f040:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	330c      	adds	r3, #12
 800f046:	2200      	movs	r2, #0
 800f048:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	331a      	adds	r3, #26
 800f04e:	2100      	movs	r1, #0
 800f050:	4618      	mov	r0, r3
 800f052:	f7ff f801 	bl	800e058 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f056:	79fb      	ldrb	r3, [r7, #7]
 800f058:	1e5a      	subs	r2, r3, #1
 800f05a:	4613      	mov	r3, r2
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	4413      	add	r3, r2
 800f060:	009b      	lsls	r3, r3, #2
 800f062:	4413      	add	r3, r2
 800f064:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f066:	2300      	movs	r3, #0
 800f068:	82fb      	strh	r3, [r7, #22]
 800f06a:	2300      	movs	r3, #0
 800f06c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f06e:	8afb      	ldrh	r3, [r7, #22]
 800f070:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f074:	4293      	cmp	r3, r2
 800f076:	d007      	beq.n	800f088 <put_lfn+0x6c>
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	1c5a      	adds	r2, r3, #1
 800f07c:	61fa      	str	r2, [r7, #28]
 800f07e:	005b      	lsls	r3, r3, #1
 800f080:	68fa      	ldr	r2, [r7, #12]
 800f082:	4413      	add	r3, r2
 800f084:	881b      	ldrh	r3, [r3, #0]
 800f086:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f088:	4a17      	ldr	r2, [pc, #92]	@ (800f0e8 <put_lfn+0xcc>)
 800f08a:	69bb      	ldr	r3, [r7, #24]
 800f08c:	4413      	add	r3, r2
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	461a      	mov	r2, r3
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	4413      	add	r3, r2
 800f096:	8afa      	ldrh	r2, [r7, #22]
 800f098:	4611      	mov	r1, r2
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fe ffdc 	bl	800e058 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f0a0:	8afb      	ldrh	r3, [r7, #22]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d102      	bne.n	800f0ac <put_lfn+0x90>
 800f0a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f0aa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	61bb      	str	r3, [r7, #24]
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	2b0c      	cmp	r3, #12
 800f0b6:	d9da      	bls.n	800f06e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f0b8:	8afb      	ldrh	r3, [r7, #22]
 800f0ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d006      	beq.n	800f0d0 <put_lfn+0xb4>
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	005b      	lsls	r3, r3, #1
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	881b      	ldrh	r3, [r3, #0]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d103      	bne.n	800f0d8 <put_lfn+0xbc>
 800f0d0:	79fb      	ldrb	r3, [r7, #7]
 800f0d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0d6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	79fa      	ldrb	r2, [r7, #7]
 800f0dc:	701a      	strb	r2, [r3, #0]
}
 800f0de:	bf00      	nop
 800f0e0:	3720      	adds	r7, #32
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	0801256c 	.word	0x0801256c

0800f0ec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b08c      	sub	sp, #48	@ 0x30
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
 800f0f8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f0fa:	220b      	movs	r2, #11
 800f0fc:	68b9      	ldr	r1, [r7, #8]
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7fe fff1 	bl	800e0e6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	2b05      	cmp	r3, #5
 800f108:	d929      	bls.n	800f15e <gen_numname+0x72>
		sr = seq;
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f10e:	e020      	b.n	800f152 <gen_numname+0x66>
			wc = *lfn++;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	1c9a      	adds	r2, r3, #2
 800f114:	607a      	str	r2, [r7, #4]
 800f116:	881b      	ldrh	r3, [r3, #0]
 800f118:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800f11a:	2300      	movs	r3, #0
 800f11c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f11e:	e015      	b.n	800f14c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	005a      	lsls	r2, r3, #1
 800f124:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f126:	f003 0301 	and.w	r3, r3, #1
 800f12a:	4413      	add	r3, r2
 800f12c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f12e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f130:	085b      	lsrs	r3, r3, #1
 800f132:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f134:	69fb      	ldr	r3, [r7, #28]
 800f136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d003      	beq.n	800f146 <gen_numname+0x5a>
 800f13e:	69fa      	ldr	r2, [r7, #28]
 800f140:	4b3b      	ldr	r3, [pc, #236]	@ (800f230 <gen_numname+0x144>)
 800f142:	4053      	eors	r3, r2
 800f144:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f148:	3301      	adds	r3, #1
 800f14a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f14e:	2b0f      	cmp	r3, #15
 800f150:	d9e6      	bls.n	800f120 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	881b      	ldrh	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d1da      	bne.n	800f110 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f15e:	2307      	movs	r3, #7
 800f160:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	b2db      	uxtb	r3, r3
 800f166:	f003 030f 	and.w	r3, r3, #15
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	3330      	adds	r3, #48	@ 0x30
 800f16e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800f172:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f176:	2b39      	cmp	r3, #57	@ 0x39
 800f178:	d904      	bls.n	800f184 <gen_numname+0x98>
 800f17a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f17e:	3307      	adds	r3, #7
 800f180:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800f184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f186:	1e5a      	subs	r2, r3, #1
 800f188:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f18a:	3330      	adds	r3, #48	@ 0x30
 800f18c:	443b      	add	r3, r7
 800f18e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f192:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	091b      	lsrs	r3, r3, #4
 800f19a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1df      	bne.n	800f162 <gen_numname+0x76>
	ns[i] = '~';
 800f1a2:	f107 0214 	add.w	r2, r7, #20
 800f1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1a8:	4413      	add	r3, r2
 800f1aa:	227e      	movs	r2, #126	@ 0x7e
 800f1ac:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1b2:	e016      	b.n	800f1e2 <gen_numname+0xf6>
		if (IsDBCS1(dst[j])) {
 800f1b4:	68fa      	ldr	r2, [r7, #12]
 800f1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b8:	4413      	add	r3, r2
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	2b80      	cmp	r3, #128	@ 0x80
 800f1be:	d90d      	bls.n	800f1dc <gen_numname+0xf0>
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c4:	4413      	add	r3, r2
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	2bff      	cmp	r3, #255	@ 0xff
 800f1ca:	d007      	beq.n	800f1dc <gen_numname+0xf0>
			if (j == i - 1) break;
 800f1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d010      	beq.n	800f1f8 <gen_numname+0x10c>
			j++;
 800f1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1d8:	3301      	adds	r3, #1
 800f1da:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1de:	3301      	adds	r3, #1
 800f1e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d207      	bcs.n	800f1fa <gen_numname+0x10e>
 800f1ea:	68fa      	ldr	r2, [r7, #12]
 800f1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ee:	4413      	add	r3, r2
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	2b20      	cmp	r3, #32
 800f1f4:	d1de      	bne.n	800f1b4 <gen_numname+0xc8>
 800f1f6:	e000      	b.n	800f1fa <gen_numname+0x10e>
			if (j == i - 1) break;
 800f1f8:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1fc:	2b07      	cmp	r3, #7
 800f1fe:	d807      	bhi.n	800f210 <gen_numname+0x124>
 800f200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f202:	1c5a      	adds	r2, r3, #1
 800f204:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f206:	3330      	adds	r3, #48	@ 0x30
 800f208:	443b      	add	r3, r7
 800f20a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f20e:	e000      	b.n	800f212 <gen_numname+0x126>
 800f210:	2120      	movs	r1, #32
 800f212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f214:	1c5a      	adds	r2, r3, #1
 800f216:	627a      	str	r2, [r7, #36]	@ 0x24
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	4413      	add	r3, r2
 800f21c:	460a      	mov	r2, r1
 800f21e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f222:	2b07      	cmp	r3, #7
 800f224:	d9e9      	bls.n	800f1fa <gen_numname+0x10e>
}
 800f226:	bf00      	nop
 800f228:	bf00      	nop
 800f22a:	3730      	adds	r7, #48	@ 0x30
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	00011021 	.word	0x00011021

0800f234 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f234:	b480      	push	{r7}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f240:	230b      	movs	r3, #11
 800f242:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f244:	7bfb      	ldrb	r3, [r7, #15]
 800f246:	b2da      	uxtb	r2, r3
 800f248:	0852      	lsrs	r2, r2, #1
 800f24a:	01db      	lsls	r3, r3, #7
 800f24c:	4313      	orrs	r3, r2
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	1c59      	adds	r1, r3, #1
 800f254:	6079      	str	r1, [r7, #4]
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	4413      	add	r3, r2
 800f25a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	3b01      	subs	r3, #1
 800f260:	60bb      	str	r3, [r7, #8]
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d1ed      	bne.n	800f244 <sum_sfn+0x10>
	return sum;
 800f268:	7bfb      	ldrb	r3, [r7, #15]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3714      	adds	r7, #20
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f276:	b580      	push	{r7, lr}
 800f278:	b086      	sub	sp, #24
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
 800f27e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f280:	2304      	movs	r3, #4
 800f282:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f28a:	23ff      	movs	r3, #255	@ 0xff
 800f28c:	757b      	strb	r3, [r7, #21]
 800f28e:	23ff      	movs	r3, #255	@ 0xff
 800f290:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f292:	e081      	b.n	800f398 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	69db      	ldr	r3, [r3, #28]
 800f298:	4619      	mov	r1, r3
 800f29a:	6938      	ldr	r0, [r7, #16]
 800f29c:	f7ff f916 	bl	800e4cc <move_window>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f2a4:	7dfb      	ldrb	r3, [r7, #23]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d17c      	bne.n	800f3a4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6a1b      	ldr	r3, [r3, #32]
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f2b2:	7dbb      	ldrb	r3, [r7, #22]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d102      	bne.n	800f2be <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f2b8:	2304      	movs	r3, #4
 800f2ba:	75fb      	strb	r3, [r7, #23]
 800f2bc:	e077      	b.n	800f3ae <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a1b      	ldr	r3, [r3, #32]
 800f2c2:	330b      	adds	r3, #11
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f2ca:	73fb      	strb	r3, [r7, #15]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	7bfa      	ldrb	r2, [r7, #15]
 800f2d0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f2d2:	7dbb      	ldrb	r3, [r7, #22]
 800f2d4:	2be5      	cmp	r3, #229	@ 0xe5
 800f2d6:	d00e      	beq.n	800f2f6 <dir_read+0x80>
 800f2d8:	7dbb      	ldrb	r3, [r7, #22]
 800f2da:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2dc:	d00b      	beq.n	800f2f6 <dir_read+0x80>
 800f2de:	7bfb      	ldrb	r3, [r7, #15]
 800f2e0:	f023 0320 	bic.w	r3, r3, #32
 800f2e4:	2b08      	cmp	r3, #8
 800f2e6:	bf0c      	ite	eq
 800f2e8:	2301      	moveq	r3, #1
 800f2ea:	2300      	movne	r3, #0
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d002      	beq.n	800f2fc <dir_read+0x86>
				ord = 0xFF;
 800f2f6:	23ff      	movs	r3, #255	@ 0xff
 800f2f8:	757b      	strb	r3, [r7, #21]
 800f2fa:	e044      	b.n	800f386 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f2fc:	7bfb      	ldrb	r3, [r7, #15]
 800f2fe:	2b0f      	cmp	r3, #15
 800f300:	d12f      	bne.n	800f362 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f302:	7dbb      	ldrb	r3, [r7, #22]
 800f304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d00d      	beq.n	800f328 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6a1b      	ldr	r3, [r3, #32]
 800f310:	7b5b      	ldrb	r3, [r3, #13]
 800f312:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f314:	7dbb      	ldrb	r3, [r7, #22]
 800f316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f31a:	75bb      	strb	r3, [r7, #22]
 800f31c:	7dbb      	ldrb	r3, [r7, #22]
 800f31e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	695a      	ldr	r2, [r3, #20]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f328:	7dba      	ldrb	r2, [r7, #22]
 800f32a:	7d7b      	ldrb	r3, [r7, #21]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d115      	bne.n	800f35c <dir_read+0xe6>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6a1b      	ldr	r3, [r3, #32]
 800f334:	330d      	adds	r3, #13
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	7d3a      	ldrb	r2, [r7, #20]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d10e      	bne.n	800f35c <dir_read+0xe6>
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	68da      	ldr	r2, [r3, #12]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a1b      	ldr	r3, [r3, #32]
 800f346:	4619      	mov	r1, r3
 800f348:	4610      	mov	r0, r2
 800f34a:	f7ff fe03 	bl	800ef54 <pick_lfn>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d003      	beq.n	800f35c <dir_read+0xe6>
 800f354:	7d7b      	ldrb	r3, [r7, #21]
 800f356:	3b01      	subs	r3, #1
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	e000      	b.n	800f35e <dir_read+0xe8>
 800f35c:	23ff      	movs	r3, #255	@ 0xff
 800f35e:	757b      	strb	r3, [r7, #21]
 800f360:	e011      	b.n	800f386 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f362:	7d7b      	ldrb	r3, [r7, #21]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d109      	bne.n	800f37c <dir_read+0x106>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6a1b      	ldr	r3, [r3, #32]
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7ff ff61 	bl	800f234 <sum_sfn>
 800f372:	4603      	mov	r3, r0
 800f374:	461a      	mov	r2, r3
 800f376:	7d3b      	ldrb	r3, [r7, #20]
 800f378:	4293      	cmp	r3, r2
 800f37a:	d015      	beq.n	800f3a8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f04f 32ff 	mov.w	r2, #4294967295
 800f382:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800f384:	e010      	b.n	800f3a8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f386:	2100      	movs	r1, #0
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7ff fc28 	bl	800ebde <dir_next>
 800f38e:	4603      	mov	r3, r0
 800f390:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f392:	7dfb      	ldrb	r3, [r7, #23]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d109      	bne.n	800f3ac <dir_read+0x136>
	while (dp->sect) {
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	69db      	ldr	r3, [r3, #28]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f47f af79 	bne.w	800f294 <dir_read+0x1e>
 800f3a2:	e004      	b.n	800f3ae <dir_read+0x138>
		if (res != FR_OK) break;
 800f3a4:	bf00      	nop
 800f3a6:	e002      	b.n	800f3ae <dir_read+0x138>
					break;
 800f3a8:	bf00      	nop
 800f3aa:	e000      	b.n	800f3ae <dir_read+0x138>
		if (res != FR_OK) break;
 800f3ac:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f3ae:	7dfb      	ldrb	r3, [r7, #23]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <dir_read+0x144>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	61da      	str	r2, [r3, #28]
	return res;
 800f3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3718      	adds	r7, #24
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b086      	sub	sp, #24
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f3d2:	2100      	movs	r1, #0
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7ff fb87 	bl	800eae8 <dir_sdi>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f3de:	7dfb      	ldrb	r3, [r7, #23]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d001      	beq.n	800f3e8 <dir_find+0x24>
 800f3e4:	7dfb      	ldrb	r3, [r7, #23]
 800f3e6:	e0a9      	b.n	800f53c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f3e8:	23ff      	movs	r3, #255	@ 0xff
 800f3ea:	753b      	strb	r3, [r7, #20]
 800f3ec:	7d3b      	ldrb	r3, [r7, #20]
 800f3ee:	757b      	strb	r3, [r7, #21]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f3f6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	69db      	ldr	r3, [r3, #28]
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6938      	ldr	r0, [r7, #16]
 800f400:	f7ff f864 	bl	800e4cc <move_window>
 800f404:	4603      	mov	r3, r0
 800f406:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f408:	7dfb      	ldrb	r3, [r7, #23]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f040 8090 	bne.w	800f530 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6a1b      	ldr	r3, [r3, #32]
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f418:	7dbb      	ldrb	r3, [r7, #22]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d102      	bne.n	800f424 <dir_find+0x60>
 800f41e:	2304      	movs	r3, #4
 800f420:	75fb      	strb	r3, [r7, #23]
 800f422:	e08a      	b.n	800f53a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6a1b      	ldr	r3, [r3, #32]
 800f428:	330b      	adds	r3, #11
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f430:	73fb      	strb	r3, [r7, #15]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	7bfa      	ldrb	r2, [r7, #15]
 800f436:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f438:	7dbb      	ldrb	r3, [r7, #22]
 800f43a:	2be5      	cmp	r3, #229	@ 0xe5
 800f43c:	d007      	beq.n	800f44e <dir_find+0x8a>
 800f43e:	7bfb      	ldrb	r3, [r7, #15]
 800f440:	f003 0308 	and.w	r3, r3, #8
 800f444:	2b00      	cmp	r3, #0
 800f446:	d009      	beq.n	800f45c <dir_find+0x98>
 800f448:	7bfb      	ldrb	r3, [r7, #15]
 800f44a:	2b0f      	cmp	r3, #15
 800f44c:	d006      	beq.n	800f45c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f44e:	23ff      	movs	r3, #255	@ 0xff
 800f450:	757b      	strb	r3, [r7, #21]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f04f 32ff 	mov.w	r2, #4294967295
 800f458:	631a      	str	r2, [r3, #48]	@ 0x30
 800f45a:	e05e      	b.n	800f51a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f45c:	7bfb      	ldrb	r3, [r7, #15]
 800f45e:	2b0f      	cmp	r3, #15
 800f460:	d136      	bne.n	800f4d0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d154      	bne.n	800f51a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f470:	7dbb      	ldrb	r3, [r7, #22]
 800f472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00d      	beq.n	800f496 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6a1b      	ldr	r3, [r3, #32]
 800f47e:	7b5b      	ldrb	r3, [r3, #13]
 800f480:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f482:	7dbb      	ldrb	r3, [r7, #22]
 800f484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f488:	75bb      	strb	r3, [r7, #22]
 800f48a:	7dbb      	ldrb	r3, [r7, #22]
 800f48c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	695a      	ldr	r2, [r3, #20]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f496:	7dba      	ldrb	r2, [r7, #22]
 800f498:	7d7b      	ldrb	r3, [r7, #21]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d115      	bne.n	800f4ca <dir_find+0x106>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6a1b      	ldr	r3, [r3, #32]
 800f4a2:	330d      	adds	r3, #13
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	7d3a      	ldrb	r2, [r7, #20]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d10e      	bne.n	800f4ca <dir_find+0x106>
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	68da      	ldr	r2, [r3, #12]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6a1b      	ldr	r3, [r3, #32]
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	4610      	mov	r0, r2
 800f4b8:	f7ff fcdc 	bl	800ee74 <cmp_lfn>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d003      	beq.n	800f4ca <dir_find+0x106>
 800f4c2:	7d7b      	ldrb	r3, [r7, #21]
 800f4c4:	3b01      	subs	r3, #1
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	e000      	b.n	800f4cc <dir_find+0x108>
 800f4ca:	23ff      	movs	r3, #255	@ 0xff
 800f4cc:	757b      	strb	r3, [r7, #21]
 800f4ce:	e024      	b.n	800f51a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f4d0:	7d7b      	ldrb	r3, [r7, #21]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d109      	bne.n	800f4ea <dir_find+0x126>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6a1b      	ldr	r3, [r3, #32]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7ff feaa 	bl	800f234 <sum_sfn>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	7d3b      	ldrb	r3, [r7, #20]
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d024      	beq.n	800f534 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f4f0:	f003 0301 	and.w	r3, r3, #1
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10a      	bne.n	800f50e <dir_find+0x14a>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6a18      	ldr	r0, [r3, #32]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	3324      	adds	r3, #36	@ 0x24
 800f500:	220b      	movs	r2, #11
 800f502:	4619      	mov	r1, r3
 800f504:	f7fe fe2b 	bl	800e15e <mem_cmp>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d014      	beq.n	800f538 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f50e:	23ff      	movs	r3, #255	@ 0xff
 800f510:	757b      	strb	r3, [r7, #21]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f04f 32ff 	mov.w	r2, #4294967295
 800f518:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f51a:	2100      	movs	r1, #0
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7ff fb5e 	bl	800ebde <dir_next>
 800f522:	4603      	mov	r3, r0
 800f524:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f526:	7dfb      	ldrb	r3, [r7, #23]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f43f af65 	beq.w	800f3f8 <dir_find+0x34>
 800f52e:	e004      	b.n	800f53a <dir_find+0x176>
		if (res != FR_OK) break;
 800f530:	bf00      	nop
 800f532:	e002      	b.n	800f53a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f534:	bf00      	nop
 800f536:	e000      	b.n	800f53a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f538:	bf00      	nop

	return res;
 800f53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3718      	adds	r7, #24
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b08c      	sub	sp, #48	@ 0x30
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f558:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d001      	beq.n	800f564 <dir_register+0x20>
 800f560:	2306      	movs	r3, #6
 800f562:	e0e0      	b.n	800f726 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f564:	2300      	movs	r3, #0
 800f566:	627b      	str	r3, [r7, #36]	@ 0x24
 800f568:	e002      	b.n	800f570 <dir_register+0x2c>
 800f56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f56c:	3301      	adds	r3, #1
 800f56e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f570:	69fb      	ldr	r3, [r7, #28]
 800f572:	68da      	ldr	r2, [r3, #12]
 800f574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f576:	005b      	lsls	r3, r3, #1
 800f578:	4413      	add	r3, r2
 800f57a:	881b      	ldrh	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1f4      	bne.n	800f56a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800f586:	f107 030c 	add.w	r3, r7, #12
 800f58a:	220c      	movs	r2, #12
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7fe fdaa 	bl	800e0e6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f592:	7dfb      	ldrb	r3, [r7, #23]
 800f594:	f003 0301 	and.w	r3, r3, #1
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d032      	beq.n	800f602 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2240      	movs	r2, #64	@ 0x40
 800f5a0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f5a8:	e016      	b.n	800f5d8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	68da      	ldr	r2, [r3, #12]
 800f5b4:	f107 010c 	add.w	r1, r7, #12
 800f5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ba:	f7ff fd97 	bl	800f0ec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f7ff ff00 	bl	800f3c4 <dir_find>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800f5ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d106      	bne.n	800f5e0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5da:	2b63      	cmp	r3, #99	@ 0x63
 800f5dc:	d9e5      	bls.n	800f5aa <dir_register+0x66>
 800f5de:	e000      	b.n	800f5e2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f5e0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e4:	2b64      	cmp	r3, #100	@ 0x64
 800f5e6:	d101      	bne.n	800f5ec <dir_register+0xa8>
 800f5e8:	2307      	movs	r3, #7
 800f5ea:	e09c      	b.n	800f726 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f5ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5f0:	2b04      	cmp	r3, #4
 800f5f2:	d002      	beq.n	800f5fa <dir_register+0xb6>
 800f5f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5f8:	e095      	b.n	800f726 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f5fa:	7dfa      	ldrb	r2, [r7, #23]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f602:	7dfb      	ldrb	r3, [r7, #23]
 800f604:	f003 0302 	and.w	r3, r3, #2
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d007      	beq.n	800f61c <dir_register+0xd8>
 800f60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f60e:	330c      	adds	r3, #12
 800f610:	4a47      	ldr	r2, [pc, #284]	@ (800f730 <dir_register+0x1ec>)
 800f612:	fba2 2303 	umull	r2, r3, r2, r3
 800f616:	089b      	lsrs	r3, r3, #2
 800f618:	3301      	adds	r3, #1
 800f61a:	e000      	b.n	800f61e <dir_register+0xda>
 800f61c:	2301      	movs	r3, #1
 800f61e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f620:	6a39      	ldr	r1, [r7, #32]
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7ff fba0 	bl	800ed68 <dir_alloc>
 800f628:	4603      	mov	r3, r0
 800f62a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f62e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f632:	2b00      	cmp	r3, #0
 800f634:	d148      	bne.n	800f6c8 <dir_register+0x184>
 800f636:	6a3b      	ldr	r3, [r7, #32]
 800f638:	3b01      	subs	r3, #1
 800f63a:	623b      	str	r3, [r7, #32]
 800f63c:	6a3b      	ldr	r3, [r7, #32]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d042      	beq.n	800f6c8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	695a      	ldr	r2, [r3, #20]
 800f646:	6a3b      	ldr	r3, [r7, #32]
 800f648:	015b      	lsls	r3, r3, #5
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	4619      	mov	r1, r3
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f7ff fa4a 	bl	800eae8 <dir_sdi>
 800f654:	4603      	mov	r3, r0
 800f656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f65a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d132      	bne.n	800f6c8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	3324      	adds	r3, #36	@ 0x24
 800f666:	4618      	mov	r0, r3
 800f668:	f7ff fde4 	bl	800f234 <sum_sfn>
 800f66c:	4603      	mov	r3, r0
 800f66e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	69db      	ldr	r3, [r3, #28]
 800f674:	4619      	mov	r1, r3
 800f676:	69f8      	ldr	r0, [r7, #28]
 800f678:	f7fe ff28 	bl	800e4cc <move_window>
 800f67c:	4603      	mov	r3, r0
 800f67e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800f682:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f686:	2b00      	cmp	r3, #0
 800f688:	d11d      	bne.n	800f6c6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	68d8      	ldr	r0, [r3, #12]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6a19      	ldr	r1, [r3, #32]
 800f692:	6a3b      	ldr	r3, [r7, #32]
 800f694:	b2da      	uxtb	r2, r3
 800f696:	7efb      	ldrb	r3, [r7, #27]
 800f698:	f7ff fcc0 	bl	800f01c <put_lfn>
				fs->wflag = 1;
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f7ff fa9a 	bl	800ebde <dir_next>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800f6b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d107      	bne.n	800f6c8 <dir_register+0x184>
 800f6b8:	6a3b      	ldr	r3, [r7, #32]
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	623b      	str	r3, [r7, #32]
 800f6be:	6a3b      	ldr	r3, [r7, #32]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d1d5      	bne.n	800f670 <dir_register+0x12c>
 800f6c4:	e000      	b.n	800f6c8 <dir_register+0x184>
				if (res != FR_OK) break;
 800f6c6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f6c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d128      	bne.n	800f722 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	69db      	ldr	r3, [r3, #28]
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	69f8      	ldr	r0, [r7, #28]
 800f6d8:	f7fe fef8 	bl	800e4cc <move_window>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f6e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d11b      	bne.n	800f722 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a1b      	ldr	r3, [r3, #32]
 800f6ee:	2220      	movs	r2, #32
 800f6f0:	2100      	movs	r1, #0
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fe fd18 	bl	800e128 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6a18      	ldr	r0, [r3, #32]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	3324      	adds	r3, #36	@ 0x24
 800f700:	220b      	movs	r2, #11
 800f702:	4619      	mov	r1, r3
 800f704:	f7fe fcef 	bl	800e0e6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	330c      	adds	r3, #12
 800f714:	f002 0218 	and.w	r2, r2, #24
 800f718:	b2d2      	uxtb	r2, r2
 800f71a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	2201      	movs	r2, #1
 800f720:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f722:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f726:	4618      	mov	r0, r3
 800f728:	3730      	adds	r7, #48	@ 0x30
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	4ec4ec4f 	.word	0x4ec4ec4f

0800f734 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b088      	sub	sp, #32
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	2200      	movs	r2, #0
 800f748:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	69db      	ldr	r3, [r3, #28]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f000 80d8 	beq.w	800f904 <get_fileinfo+0x1d0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f75c:	d040      	beq.n	800f7e0 <get_fileinfo+0xac>
			i = j = 0;
 800f75e:	2300      	movs	r3, #0
 800f760:	61bb      	str	r3, [r7, #24]
 800f762:	69bb      	ldr	r3, [r7, #24]
 800f764:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f766:	e029      	b.n	800f7bc <get_fileinfo+0x88>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800f768:	89fb      	ldrh	r3, [r7, #14]
 800f76a:	2100      	movs	r1, #0
 800f76c:	4618      	mov	r0, r3
 800f76e:	f001 fcad 	bl	80110cc <ff_convert>
 800f772:	4603      	mov	r3, r0
 800f774:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800f776:	89fb      	ldrh	r3, [r7, #14]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d102      	bne.n	800f782 <get_fileinfo+0x4e>
 800f77c:	2300      	movs	r3, #0
 800f77e:	61fb      	str	r3, [r7, #28]
 800f780:	e028      	b.n	800f7d4 <get_fileinfo+0xa0>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
 800f782:	89fb      	ldrh	r3, [r7, #14]
 800f784:	2bff      	cmp	r3, #255	@ 0xff
 800f786:	d90a      	bls.n	800f79e <get_fileinfo+0x6a>
					fno->fname[i++] = (char)(w >> 8);
 800f788:	89fb      	ldrh	r3, [r7, #14]
 800f78a:	0a1b      	lsrs	r3, r3, #8
 800f78c:	b299      	uxth	r1, r3
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	1c5a      	adds	r2, r3, #1
 800f792:	61fa      	str	r2, [r7, #28]
 800f794:	b2c9      	uxtb	r1, r1
 800f796:	683a      	ldr	r2, [r7, #0]
 800f798:	4413      	add	r3, r2
 800f79a:	460a      	mov	r2, r1
 800f79c:	759a      	strb	r2, [r3, #22]
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	2bfe      	cmp	r3, #254	@ 0xfe
 800f7a2:	d902      	bls.n	800f7aa <get_fileinfo+0x76>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	61fb      	str	r3, [r7, #28]
 800f7a8:	e014      	b.n	800f7d4 <get_fileinfo+0xa0>
				fno->fname[i++] = (TCHAR)w;
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	1c5a      	adds	r2, r3, #1
 800f7ae:	61fa      	str	r2, [r7, #28]
 800f7b0:	89fa      	ldrh	r2, [r7, #14]
 800f7b2:	b2d1      	uxtb	r1, r2
 800f7b4:	683a      	ldr	r2, [r7, #0]
 800f7b6:	4413      	add	r3, r2
 800f7b8:	460a      	mov	r2, r1
 800f7ba:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	68da      	ldr	r2, [r3, #12]
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	1c59      	adds	r1, r3, #1
 800f7c4:	61b9      	str	r1, [r7, #24]
 800f7c6:	005b      	lsls	r3, r3, #1
 800f7c8:	4413      	add	r3, r2
 800f7ca:	881b      	ldrh	r3, [r3, #0]
 800f7cc:	81fb      	strh	r3, [r7, #14]
 800f7ce:	89fb      	ldrh	r3, [r7, #14]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d1c9      	bne.n	800f768 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800f7d4:	683a      	ldr	r2, [r7, #0]
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	4413      	add	r3, r2
 800f7da:	3316      	adds	r3, #22
 800f7dc:	2200      	movs	r2, #0
 800f7de:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	61bb      	str	r3, [r7, #24]
 800f7e4:	69bb      	ldr	r3, [r7, #24]
 800f7e6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800f7e8:	683a      	ldr	r2, [r7, #0]
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	3316      	adds	r3, #22
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800f7f4:	e04d      	b.n	800f892 <get_fileinfo+0x15e>
		c = (TCHAR)dp->dir[i++];
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6a1a      	ldr	r2, [r3, #32]
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	1c59      	adds	r1, r3, #1
 800f7fe:	61f9      	str	r1, [r7, #28]
 800f800:	4413      	add	r3, r2
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f806:	7dfb      	ldrb	r3, [r7, #23]
 800f808:	2b20      	cmp	r3, #32
 800f80a:	d041      	beq.n	800f890 <get_fileinfo+0x15c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f80c:	7dfb      	ldrb	r3, [r7, #23]
 800f80e:	2b05      	cmp	r3, #5
 800f810:	d101      	bne.n	800f816 <get_fileinfo+0xe2>
 800f812:	23e5      	movs	r3, #229	@ 0xe5
 800f814:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	2b09      	cmp	r3, #9
 800f81a:	d10f      	bne.n	800f83c <get_fileinfo+0x108>
			if (!lfv) fno->fname[j] = '.';
 800f81c:	89bb      	ldrh	r3, [r7, #12]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d105      	bne.n	800f82e <get_fileinfo+0xfa>
 800f822:	683a      	ldr	r2, [r7, #0]
 800f824:	69bb      	ldr	r3, [r7, #24]
 800f826:	4413      	add	r3, r2
 800f828:	3316      	adds	r3, #22
 800f82a:	222e      	movs	r2, #46	@ 0x2e
 800f82c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800f82e:	69bb      	ldr	r3, [r7, #24]
 800f830:	1c5a      	adds	r2, r3, #1
 800f832:	61ba      	str	r2, [r7, #24]
 800f834:	683a      	ldr	r2, [r7, #0]
 800f836:	4413      	add	r3, r2
 800f838:	222e      	movs	r2, #46	@ 0x2e
 800f83a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800f83c:	683a      	ldr	r2, [r7, #0]
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	4413      	add	r3, r2
 800f842:	3309      	adds	r3, #9
 800f844:	7dfa      	ldrb	r2, [r7, #23]
 800f846:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800f848:	89bb      	ldrh	r3, [r7, #12]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d11c      	bne.n	800f888 <get_fileinfo+0x154>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800f84e:	7dfb      	ldrb	r3, [r7, #23]
 800f850:	2b40      	cmp	r3, #64	@ 0x40
 800f852:	d913      	bls.n	800f87c <get_fileinfo+0x148>
 800f854:	7dfb      	ldrb	r3, [r7, #23]
 800f856:	2b5a      	cmp	r3, #90	@ 0x5a
 800f858:	d810      	bhi.n	800f87c <get_fileinfo+0x148>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a1b      	ldr	r3, [r3, #32]
 800f85e:	330c      	adds	r3, #12
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	461a      	mov	r2, r3
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	2b08      	cmp	r3, #8
 800f868:	d901      	bls.n	800f86e <get_fileinfo+0x13a>
 800f86a:	2310      	movs	r3, #16
 800f86c:	e000      	b.n	800f870 <get_fileinfo+0x13c>
 800f86e:	2308      	movs	r3, #8
 800f870:	4013      	ands	r3, r2
 800f872:	2b00      	cmp	r3, #0
 800f874:	d002      	beq.n	800f87c <get_fileinfo+0x148>
				c += 0x20;			/* To lower */
 800f876:	7dfb      	ldrb	r3, [r7, #23]
 800f878:	3320      	adds	r3, #32
 800f87a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800f87c:	683a      	ldr	r2, [r7, #0]
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	4413      	add	r3, r2
 800f882:	3316      	adds	r3, #22
 800f884:	7dfa      	ldrb	r2, [r7, #23]
 800f886:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800f888:	69bb      	ldr	r3, [r7, #24]
 800f88a:	3301      	adds	r3, #1
 800f88c:	61bb      	str	r3, [r7, #24]
 800f88e:	e000      	b.n	800f892 <get_fileinfo+0x15e>
		if (c == ' ') continue;				/* Skip padding spaces */
 800f890:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	2b0a      	cmp	r3, #10
 800f896:	d9ae      	bls.n	800f7f6 <get_fileinfo+0xc2>
	}
	if (!lfv) {
 800f898:	89bb      	ldrh	r3, [r7, #12]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d10d      	bne.n	800f8ba <get_fileinfo+0x186>
		fno->fname[j] = 0;
 800f89e:	683a      	ldr	r2, [r7, #0]
 800f8a0:	69bb      	ldr	r3, [r7, #24]
 800f8a2:	4413      	add	r3, r2
 800f8a4:	3316      	adds	r3, #22
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6a1b      	ldr	r3, [r3, #32]
 800f8ae:	330c      	adds	r3, #12
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d101      	bne.n	800f8ba <get_fileinfo+0x186>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800f8ba:	683a      	ldr	r2, [r7, #0]
 800f8bc:	69bb      	ldr	r3, [r7, #24]
 800f8be:	4413      	add	r3, r2
 800f8c0:	3309      	adds	r3, #9
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6a1b      	ldr	r3, [r3, #32]
 800f8ca:	7ada      	ldrb	r2, [r3, #11]
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6a1b      	ldr	r3, [r3, #32]
 800f8d4:	331c      	adds	r3, #28
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fe fb9b 	bl	800e012 <ld_dword>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6a1b      	ldr	r3, [r3, #32]
 800f8e6:	3316      	adds	r3, #22
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7fe fb92 	bl	800e012 <ld_dword>
 800f8ee:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	80da      	strh	r2, [r3, #6]
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	0c1b      	lsrs	r3, r3, #16
 800f8fc:	b29a      	uxth	r2, r3
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	809a      	strh	r2, [r3, #4]
 800f902:	e000      	b.n	800f906 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f904:	bf00      	nop
}
 800f906:	3720      	adds	r7, #32
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b08a      	sub	sp, #40	@ 0x28
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	613b      	str	r3, [r7, #16]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68db      	ldr	r3, [r3, #12]
 800f922:	60fb      	str	r3, [r7, #12]
 800f924:	2300      	movs	r3, #0
 800f926:	617b      	str	r3, [r7, #20]
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	1c5a      	adds	r2, r3, #1
 800f930:	61ba      	str	r2, [r7, #24]
 800f932:	693a      	ldr	r2, [r7, #16]
 800f934:	4413      	add	r3, r2
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f93a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f93c:	2b1f      	cmp	r3, #31
 800f93e:	d96a      	bls.n	800fa16 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f940:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f942:	2b2f      	cmp	r3, #47	@ 0x2f
 800f944:	d006      	beq.n	800f954 <create_name+0x48>
 800f946:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f948:	2b5c      	cmp	r3, #92	@ 0x5c
 800f94a:	d110      	bne.n	800f96e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f94c:	e002      	b.n	800f954 <create_name+0x48>
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	3301      	adds	r3, #1
 800f952:	61bb      	str	r3, [r7, #24]
 800f954:	693a      	ldr	r2, [r7, #16]
 800f956:	69bb      	ldr	r3, [r7, #24]
 800f958:	4413      	add	r3, r2
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f95e:	d0f6      	beq.n	800f94e <create_name+0x42>
 800f960:	693a      	ldr	r2, [r7, #16]
 800f962:	69bb      	ldr	r3, [r7, #24]
 800f964:	4413      	add	r3, r2
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	2b5c      	cmp	r3, #92	@ 0x5c
 800f96a:	d0f0      	beq.n	800f94e <create_name+0x42>
			break;
 800f96c:	e054      	b.n	800fa18 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	2bfe      	cmp	r3, #254	@ 0xfe
 800f972:	d901      	bls.n	800f978 <create_name+0x6c>
 800f974:	2306      	movs	r3, #6
 800f976:	e1bf      	b.n	800fcf8 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f978:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800f97e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f980:	b2db      	uxtb	r3, r3
 800f982:	2b80      	cmp	r3, #128	@ 0x80
 800f984:	d925      	bls.n	800f9d2 <create_name+0xc6>
 800f986:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	2bff      	cmp	r3, #255	@ 0xff
 800f98c:	d021      	beq.n	800f9d2 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800f98e:	69bb      	ldr	r3, [r7, #24]
 800f990:	1c5a      	adds	r2, r3, #1
 800f992:	61ba      	str	r2, [r7, #24]
 800f994:	693a      	ldr	r2, [r7, #16]
 800f996:	4413      	add	r3, r2
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800f99e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9a0:	021b      	lsls	r3, r3, #8
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	4413      	add	r3, r2
 800f9ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800f9ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f9b2:	2b3f      	cmp	r3, #63	@ 0x3f
 800f9b4:	d903      	bls.n	800f9be <create_name+0xb2>
 800f9b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f9ba:	2b7e      	cmp	r3, #126	@ 0x7e
 800f9bc:	d909      	bls.n	800f9d2 <create_name+0xc6>
 800f9be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	da03      	bge.n	800f9ce <create_name+0xc2>
 800f9c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f9ca:	2bff      	cmp	r3, #255	@ 0xff
 800f9cc:	d101      	bne.n	800f9d2 <create_name+0xc6>
 800f9ce:	2306      	movs	r3, #6
 800f9d0:	e192      	b.n	800fcf8 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f9d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9d4:	2101      	movs	r1, #1
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f001 fb78 	bl	80110cc <ff_convert>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f9e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d101      	bne.n	800f9ea <create_name+0xde>
 800f9e6:	2306      	movs	r3, #6
 800f9e8:	e186      	b.n	800fcf8 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f9ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9ec:	2b7f      	cmp	r3, #127	@ 0x7f
 800f9ee:	d809      	bhi.n	800fa04 <create_name+0xf8>
 800f9f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	489a      	ldr	r0, [pc, #616]	@ (800fc60 <create_name+0x354>)
 800f9f6:	f7fe fbd9 	bl	800e1ac <chk_chr>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d001      	beq.n	800fa04 <create_name+0xf8>
 800fa00:	2306      	movs	r3, #6
 800fa02:	e179      	b.n	800fcf8 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	1c5a      	adds	r2, r3, #1
 800fa08:	617a      	str	r2, [r7, #20]
 800fa0a:	005b      	lsls	r3, r3, #1
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	4413      	add	r3, r2
 800fa10:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fa12:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fa14:	e78a      	b.n	800f92c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fa16:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fa18:	693a      	ldr	r2, [r7, #16]
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	441a      	add	r2, r3
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fa22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa24:	2b1f      	cmp	r3, #31
 800fa26:	d801      	bhi.n	800fa2c <create_name+0x120>
 800fa28:	2304      	movs	r3, #4
 800fa2a:	e000      	b.n	800fa2e <create_name+0x122>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fa32:	e011      	b.n	800fa58 <create_name+0x14c>
		w = lfn[di - 1];
 800fa34:	697a      	ldr	r2, [r7, #20]
 800fa36:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fa3a:	4413      	add	r3, r2
 800fa3c:	005b      	lsls	r3, r3, #1
 800fa3e:	68fa      	ldr	r2, [r7, #12]
 800fa40:	4413      	add	r3, r2
 800fa42:	881b      	ldrh	r3, [r3, #0]
 800fa44:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800fa46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa48:	2b20      	cmp	r3, #32
 800fa4a:	d002      	beq.n	800fa52 <create_name+0x146>
 800fa4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa50:	d106      	bne.n	800fa60 <create_name+0x154>
		di--;
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	3b01      	subs	r3, #1
 800fa56:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1ea      	bne.n	800fa34 <create_name+0x128>
 800fa5e:	e000      	b.n	800fa62 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800fa60:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	005b      	lsls	r3, r3, #1
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	4413      	add	r3, r2
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <create_name+0x16c>
 800fa74:	2306      	movs	r3, #6
 800fa76:	e13f      	b.n	800fcf8 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	3324      	adds	r3, #36	@ 0x24
 800fa7c:	220b      	movs	r2, #11
 800fa7e:	2120      	movs	r1, #32
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7fe fb51 	bl	800e128 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fa86:	2300      	movs	r3, #0
 800fa88:	61bb      	str	r3, [r7, #24]
 800fa8a:	e002      	b.n	800fa92 <create_name+0x186>
 800fa8c:	69bb      	ldr	r3, [r7, #24]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	61bb      	str	r3, [r7, #24]
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	005b      	lsls	r3, r3, #1
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	4413      	add	r3, r2
 800fa9a:	881b      	ldrh	r3, [r3, #0]
 800fa9c:	2b20      	cmp	r3, #32
 800fa9e:	d0f5      	beq.n	800fa8c <create_name+0x180>
 800faa0:	69bb      	ldr	r3, [r7, #24]
 800faa2:	005b      	lsls	r3, r3, #1
 800faa4:	68fa      	ldr	r2, [r7, #12]
 800faa6:	4413      	add	r3, r2
 800faa8:	881b      	ldrh	r3, [r3, #0]
 800faaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800faac:	d0ee      	beq.n	800fa8c <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d009      	beq.n	800fac8 <create_name+0x1bc>
 800fab4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fab8:	f043 0303 	orr.w	r3, r3, #3
 800fabc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fac0:	e002      	b.n	800fac8 <create_name+0x1bc>
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	3b01      	subs	r3, #1
 800fac6:	617b      	str	r3, [r7, #20]
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d009      	beq.n	800fae2 <create_name+0x1d6>
 800face:	697a      	ldr	r2, [r7, #20]
 800fad0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fad4:	4413      	add	r3, r2
 800fad6:	005b      	lsls	r3, r3, #1
 800fad8:	68fa      	ldr	r2, [r7, #12]
 800fada:	4413      	add	r3, r2
 800fadc:	881b      	ldrh	r3, [r3, #0]
 800fade:	2b2e      	cmp	r3, #46	@ 0x2e
 800fae0:	d1ef      	bne.n	800fac2 <create_name+0x1b6>

	i = b = 0; ni = 8;
 800fae2:	2300      	movs	r3, #0
 800fae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fae8:	2300      	movs	r3, #0
 800faea:	623b      	str	r3, [r7, #32]
 800faec:	2308      	movs	r3, #8
 800faee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	1c5a      	adds	r2, r3, #1
 800faf4:	61ba      	str	r2, [r7, #24]
 800faf6:	005b      	lsls	r3, r3, #1
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	4413      	add	r3, r2
 800fafc:	881b      	ldrh	r3, [r3, #0]
 800fafe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fb00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f000 80aa 	beq.w	800fc5c <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fb08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb0a:	2b20      	cmp	r3, #32
 800fb0c:	d006      	beq.n	800fb1c <create_name+0x210>
 800fb0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb10:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb12:	d10a      	bne.n	800fb2a <create_name+0x21e>
 800fb14:	69ba      	ldr	r2, [r7, #24]
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d006      	beq.n	800fb2a <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800fb1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fb20:	f043 0303 	orr.w	r3, r3, #3
 800fb24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800fb28:	e097      	b.n	800fc5a <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fb2a:	6a3a      	ldr	r2, [r7, #32]
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d203      	bcs.n	800fb3a <create_name+0x22e>
 800fb32:	69ba      	ldr	r2, [r7, #24]
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d123      	bne.n	800fb82 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	2b0b      	cmp	r3, #11
 800fb3e:	d106      	bne.n	800fb4e <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800fb40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fb44:	f043 0303 	orr.w	r3, r3, #3
 800fb48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800fb4c:	e08d      	b.n	800fc6a <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fb4e:	69ba      	ldr	r2, [r7, #24]
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d005      	beq.n	800fb62 <create_name+0x256>
 800fb56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fb5a:	f043 0303 	orr.w	r3, r3, #3
 800fb5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;			/* No extension */
 800fb62:	69ba      	ldr	r2, [r7, #24]
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d87e      	bhi.n	800fc68 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	61bb      	str	r3, [r7, #24]
 800fb6e:	2308      	movs	r3, #8
 800fb70:	623b      	str	r3, [r7, #32]
 800fb72:	230b      	movs	r3, #11
 800fb74:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800fb76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fb80:	e06b      	b.n	800fc5a <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fb82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb84:	2b7f      	cmp	r3, #127	@ 0x7f
 800fb86:	d910      	bls.n	800fbaa <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800fb88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f001 fafc 	bl	8011188 <ff_wtoupper>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2100      	movs	r1, #0
 800fb94:	4618      	mov	r0, r3
 800fb96:	f001 fa99 	bl	80110cc <ff_convert>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800fb9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fba2:	f043 0302 	orr.w	r3, r3, #2
 800fba6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800fbaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fbac:	2bff      	cmp	r3, #255	@ 0xff
 800fbae:	d91a      	bls.n	800fbe6 <create_name+0x2da>
			if (i >= ni - 1) {
 800fbb0:	69fb      	ldr	r3, [r7, #28]
 800fbb2:	3b01      	subs	r3, #1
 800fbb4:	6a3a      	ldr	r2, [r7, #32]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d308      	bcc.n	800fbcc <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800fbba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fbbe:	f043 0303 	orr.w	r3, r3, #3
 800fbc2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	623b      	str	r3, [r7, #32]
 800fbca:	e046      	b.n	800fc5a <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800fbcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fbce:	0a1b      	lsrs	r3, r3, #8
 800fbd0:	b299      	uxth	r1, r3
 800fbd2:	6a3b      	ldr	r3, [r7, #32]
 800fbd4:	1c5a      	adds	r2, r3, #1
 800fbd6:	623a      	str	r2, [r7, #32]
 800fbd8:	b2c9      	uxtb	r1, r1
 800fbda:	687a      	ldr	r2, [r7, #4]
 800fbdc:	4413      	add	r3, r2
 800fbde:	460a      	mov	r2, r1
 800fbe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800fbe4:	e02f      	b.n	800fc46 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800fbe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d007      	beq.n	800fbfc <create_name+0x2f0>
 800fbec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fbee:	4619      	mov	r1, r3
 800fbf0:	481c      	ldr	r0, [pc, #112]	@ (800fc64 <create_name+0x358>)
 800fbf2:	f7fe fadb 	bl	800e1ac <chk_chr>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d008      	beq.n	800fc0e <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fbfc:	235f      	movs	r3, #95	@ 0x5f
 800fbfe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800fc00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fc04:	f043 0303 	orr.w	r3, r3, #3
 800fc08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800fc0c:	e01b      	b.n	800fc46 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fc0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc10:	2b40      	cmp	r3, #64	@ 0x40
 800fc12:	d909      	bls.n	800fc28 <create_name+0x31c>
 800fc14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc16:	2b5a      	cmp	r3, #90	@ 0x5a
 800fc18:	d806      	bhi.n	800fc28 <create_name+0x31c>
					b |= 2;
 800fc1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc1e:	f043 0302 	orr.w	r3, r3, #2
 800fc22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fc26:	e00e      	b.n	800fc46 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fc28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc2a:	2b60      	cmp	r3, #96	@ 0x60
 800fc2c:	d90b      	bls.n	800fc46 <create_name+0x33a>
 800fc2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc30:	2b7a      	cmp	r3, #122	@ 0x7a
 800fc32:	d808      	bhi.n	800fc46 <create_name+0x33a>
						b |= 1; w -= 0x20;
 800fc34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc38:	f043 0301 	orr.w	r3, r3, #1
 800fc3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fc40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc42:	3b20      	subs	r3, #32
 800fc44:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fc46:	6a3b      	ldr	r3, [r7, #32]
 800fc48:	1c5a      	adds	r2, r3, #1
 800fc4a:	623a      	str	r2, [r7, #32]
 800fc4c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fc4e:	b2d1      	uxtb	r1, r2
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	4413      	add	r3, r2
 800fc54:	460a      	mov	r2, r1
 800fc56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800fc5a:	e749      	b.n	800faf0 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800fc5c:	bf00      	nop
 800fc5e:	e004      	b.n	800fc6a <create_name+0x35e>
 800fc60:	080124d0 	.word	0x080124d0
 800fc64:	080124dc 	.word	0x080124dc
			if (si > di) break;			/* No extension */
 800fc68:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800fc70:	2be5      	cmp	r3, #229	@ 0xe5
 800fc72:	d103      	bne.n	800fc7c <create_name+0x370>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2205      	movs	r2, #5
 800fc78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	2b08      	cmp	r3, #8
 800fc80:	d104      	bne.n	800fc8c <create_name+0x380>
 800fc82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fc8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc90:	f003 030c 	and.w	r3, r3, #12
 800fc94:	2b0c      	cmp	r3, #12
 800fc96:	d005      	beq.n	800fca4 <create_name+0x398>
 800fc98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc9c:	f003 0303 	and.w	r3, r3, #3
 800fca0:	2b03      	cmp	r3, #3
 800fca2:	d105      	bne.n	800fcb0 <create_name+0x3a4>
 800fca4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fca8:	f043 0302 	orr.w	r3, r3, #2
 800fcac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fcb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fcb4:	f003 0302 	and.w	r3, r3, #2
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d117      	bne.n	800fcec <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fcbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fcc0:	f003 0303 	and.w	r3, r3, #3
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d105      	bne.n	800fcd4 <create_name+0x3c8>
 800fcc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fccc:	f043 0310 	orr.w	r3, r3, #16
 800fcd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fcd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fcd8:	f003 030c 	and.w	r3, r3, #12
 800fcdc:	2b04      	cmp	r3, #4
 800fcde:	d105      	bne.n	800fcec <create_name+0x3e0>
 800fce0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fce4:	f043 0308 	orr.w	r3, r3, #8
 800fce8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fcf2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800fcf6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3728      	adds	r7, #40	@ 0x28
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b086      	sub	sp, #24
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fd14:	e002      	b.n	800fd1c <follow_path+0x1c>
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	603b      	str	r3, [r7, #0]
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b2f      	cmp	r3, #47	@ 0x2f
 800fd22:	d0f8      	beq.n	800fd16 <follow_path+0x16>
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	2b5c      	cmp	r3, #92	@ 0x5c
 800fd2a:	d0f4      	beq.n	800fd16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	2b1f      	cmp	r3, #31
 800fd38:	d80a      	bhi.n	800fd50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2280      	movs	r2, #128	@ 0x80
 800fd3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800fd42:	2100      	movs	r1, #0
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f7fe fecf 	bl	800eae8 <dir_sdi>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	75fb      	strb	r3, [r7, #23]
 800fd4e:	e043      	b.n	800fdd8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fd50:	463b      	mov	r3, r7
 800fd52:	4619      	mov	r1, r3
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7ff fdd9 	bl	800f90c <create_name>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fd5e:	7dfb      	ldrb	r3, [r7, #23]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d134      	bne.n	800fdce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f7ff fb2d 	bl	800f3c4 <dir_find>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fd74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fd76:	7dfb      	ldrb	r3, [r7, #23]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00a      	beq.n	800fd92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fd7c:	7dfb      	ldrb	r3, [r7, #23]
 800fd7e:	2b04      	cmp	r3, #4
 800fd80:	d127      	bne.n	800fdd2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fd82:	7afb      	ldrb	r3, [r7, #11]
 800fd84:	f003 0304 	and.w	r3, r3, #4
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d122      	bne.n	800fdd2 <follow_path+0xd2>
 800fd8c:	2305      	movs	r3, #5
 800fd8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fd90:	e01f      	b.n	800fdd2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fd92:	7afb      	ldrb	r3, [r7, #11]
 800fd94:	f003 0304 	and.w	r3, r3, #4
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d11c      	bne.n	800fdd6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	799b      	ldrb	r3, [r3, #6]
 800fda0:	f003 0310 	and.w	r3, r3, #16
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d102      	bne.n	800fdae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fda8:	2305      	movs	r3, #5
 800fdaa:	75fb      	strb	r3, [r7, #23]
 800fdac:	e014      	b.n	800fdd8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	695b      	ldr	r3, [r3, #20]
 800fdb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdbc:	4413      	add	r3, r2
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	68f8      	ldr	r0, [r7, #12]
 800fdc2:	f7ff f818 	bl	800edf6 <ld_clust>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fdcc:	e7c0      	b.n	800fd50 <follow_path+0x50>
			if (res != FR_OK) break;
 800fdce:	bf00      	nop
 800fdd0:	e002      	b.n	800fdd8 <follow_path+0xd8>
				break;
 800fdd2:	bf00      	nop
 800fdd4:	e000      	b.n	800fdd8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fdd6:	bf00      	nop
			}
		}
	}

	return res;
 800fdd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3718      	adds	r7, #24
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fde2:	b480      	push	{r7}
 800fde4:	b087      	sub	sp, #28
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fdea:	f04f 33ff 	mov.w	r3, #4294967295
 800fdee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d031      	beq.n	800fe5c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	617b      	str	r3, [r7, #20]
 800fdfe:	e002      	b.n	800fe06 <get_ldnumber+0x24>
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	3301      	adds	r3, #1
 800fe04:	617b      	str	r3, [r7, #20]
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	2b1f      	cmp	r3, #31
 800fe0c:	d903      	bls.n	800fe16 <get_ldnumber+0x34>
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	2b3a      	cmp	r3, #58	@ 0x3a
 800fe14:	d1f4      	bne.n	800fe00 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	2b3a      	cmp	r3, #58	@ 0x3a
 800fe1c:	d11c      	bne.n	800fe58 <get_ldnumber+0x76>
			tp = *path;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	1c5a      	adds	r2, r3, #1
 800fe28:	60fa      	str	r2, [r7, #12]
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	3b30      	subs	r3, #48	@ 0x30
 800fe2e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	2b09      	cmp	r3, #9
 800fe34:	d80e      	bhi.n	800fe54 <get_ldnumber+0x72>
 800fe36:	68fa      	ldr	r2, [r7, #12]
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d10a      	bne.n	800fe54 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d107      	bne.n	800fe54 <get_ldnumber+0x72>
					vol = (int)i;
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	617b      	str	r3, [r7, #20]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	697a      	ldr	r2, [r7, #20]
 800fe52:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	e002      	b.n	800fe5e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fe58:	2300      	movs	r3, #0
 800fe5a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fe5c:	693b      	ldr	r3, [r7, #16]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	371c      	adds	r7, #28
 800fe62:	46bd      	mov	sp, r7
 800fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe68:	4770      	bx	lr
	...

0800fe6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	70da      	strb	r2, [r3, #3]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe82:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fe84:	6839      	ldr	r1, [r7, #0]
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7fe fb20 	bl	800e4cc <move_window>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d001      	beq.n	800fe96 <check_fs+0x2a>
 800fe92:	2304      	movs	r3, #4
 800fe94:	e038      	b.n	800ff08 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	3334      	adds	r3, #52	@ 0x34
 800fe9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fe f89e 	bl	800dfe0 <ld_word>
 800fea4:	4603      	mov	r3, r0
 800fea6:	461a      	mov	r2, r3
 800fea8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800feac:	429a      	cmp	r2, r3
 800feae:	d001      	beq.n	800feb4 <check_fs+0x48>
 800feb0:	2303      	movs	r3, #3
 800feb2:	e029      	b.n	800ff08 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800feba:	2be9      	cmp	r3, #233	@ 0xe9
 800febc:	d009      	beq.n	800fed2 <check_fs+0x66>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fec4:	2beb      	cmp	r3, #235	@ 0xeb
 800fec6:	d11e      	bne.n	800ff06 <check_fs+0x9a>
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800fece:	2b90      	cmp	r3, #144	@ 0x90
 800fed0:	d119      	bne.n	800ff06 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	3334      	adds	r3, #52	@ 0x34
 800fed6:	3336      	adds	r3, #54	@ 0x36
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fe f89a 	bl	800e012 <ld_dword>
 800fede:	4603      	mov	r3, r0
 800fee0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800fee4:	4a0a      	ldr	r2, [pc, #40]	@ (800ff10 <check_fs+0xa4>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d101      	bne.n	800feee <check_fs+0x82>
 800feea:	2300      	movs	r3, #0
 800feec:	e00c      	b.n	800ff08 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	3334      	adds	r3, #52	@ 0x34
 800fef2:	3352      	adds	r3, #82	@ 0x52
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7fe f88c 	bl	800e012 <ld_dword>
 800fefa:	4603      	mov	r3, r0
 800fefc:	4a05      	ldr	r2, [pc, #20]	@ (800ff14 <check_fs+0xa8>)
 800fefe:	4293      	cmp	r3, r2
 800ff00:	d101      	bne.n	800ff06 <check_fs+0x9a>
 800ff02:	2300      	movs	r3, #0
 800ff04:	e000      	b.n	800ff08 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ff06:	2302      	movs	r3, #2
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3708      	adds	r7, #8
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}
 800ff10:	00544146 	.word	0x00544146
 800ff14:	33544146 	.word	0x33544146

0800ff18 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b096      	sub	sp, #88	@ 0x58
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	60f8      	str	r0, [r7, #12]
 800ff20:	60b9      	str	r1, [r7, #8]
 800ff22:	4613      	mov	r3, r2
 800ff24:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ff2c:	68f8      	ldr	r0, [r7, #12]
 800ff2e:	f7ff ff58 	bl	800fde2 <get_ldnumber>
 800ff32:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ff34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	da01      	bge.n	800ff3e <find_volume+0x26>
 800ff3a:	230b      	movs	r3, #11
 800ff3c:	e230      	b.n	80103a0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ff3e:	4aa1      	ldr	r2, [pc, #644]	@ (80101c4 <find_volume+0x2ac>)
 800ff40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff46:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ff48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d101      	bne.n	800ff52 <find_volume+0x3a>
 800ff4e:	230c      	movs	r3, #12
 800ff50:	e226      	b.n	80103a0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ff58:	79fb      	ldrb	r3, [r7, #7]
 800ff5a:	f023 0301 	bic.w	r3, r3, #1
 800ff5e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ff60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d01a      	beq.n	800ff9e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ff68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff6a:	785b      	ldrb	r3, [r3, #1]
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7fd ffb5 	bl	800dedc <disk_status>
 800ff72:	4603      	mov	r3, r0
 800ff74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ff78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff7c:	f003 0301 	and.w	r3, r3, #1
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d10c      	bne.n	800ff9e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ff84:	79fb      	ldrb	r3, [r7, #7]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d007      	beq.n	800ff9a <find_volume+0x82>
 800ff8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff8e:	f003 0304 	and.w	r3, r3, #4
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d001      	beq.n	800ff9a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ff96:	230a      	movs	r3, #10
 800ff98:	e202      	b.n	80103a0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	e200      	b.n	80103a0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ff9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ffa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffa6:	b2da      	uxtb	r2, r3
 800ffa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffaa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ffac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffae:	785b      	ldrb	r3, [r3, #1]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fd ffad 	bl	800df10 <disk_initialize>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ffbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ffc0:	f003 0301 	and.w	r3, r3, #1
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d001      	beq.n	800ffcc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ffc8:	2303      	movs	r3, #3
 800ffca:	e1e9      	b.n	80103a0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ffcc:	79fb      	ldrb	r3, [r7, #7]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d007      	beq.n	800ffe2 <find_volume+0xca>
 800ffd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ffd6:	f003 0304 	and.w	r3, r3, #4
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d001      	beq.n	800ffe2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ffde:	230a      	movs	r3, #10
 800ffe0:	e1de      	b.n	80103a0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ffe6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ffe8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ffea:	f7ff ff3f 	bl	800fe6c <check_fs>
 800ffee:	4603      	mov	r3, r0
 800fff0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fff4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fff8:	2b02      	cmp	r3, #2
 800fffa:	d149      	bne.n	8010090 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fffc:	2300      	movs	r3, #0
 800fffe:	643b      	str	r3, [r7, #64]	@ 0x40
 8010000:	e01e      	b.n	8010040 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010004:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801000a:	011b      	lsls	r3, r3, #4
 801000c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010010:	4413      	add	r3, r2
 8010012:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010016:	3304      	adds	r3, #4
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d006      	beq.n	801002c <find_volume+0x114>
 801001e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010020:	3308      	adds	r3, #8
 8010022:	4618      	mov	r0, r3
 8010024:	f7fd fff5 	bl	800e012 <ld_dword>
 8010028:	4602      	mov	r2, r0
 801002a:	e000      	b.n	801002e <find_volume+0x116>
 801002c:	2200      	movs	r2, #0
 801002e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	3358      	adds	r3, #88	@ 0x58
 8010034:	443b      	add	r3, r7
 8010036:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801003a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801003c:	3301      	adds	r3, #1
 801003e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010042:	2b03      	cmp	r3, #3
 8010044:	d9dd      	bls.n	8010002 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010046:	2300      	movs	r3, #0
 8010048:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801004a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801004c:	2b00      	cmp	r3, #0
 801004e:	d002      	beq.n	8010056 <find_volume+0x13e>
 8010050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010052:	3b01      	subs	r3, #1
 8010054:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	3358      	adds	r3, #88	@ 0x58
 801005c:	443b      	add	r3, r7
 801005e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010062:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010066:	2b00      	cmp	r3, #0
 8010068:	d005      	beq.n	8010076 <find_volume+0x15e>
 801006a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801006c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801006e:	f7ff fefd 	bl	800fe6c <check_fs>
 8010072:	4603      	mov	r3, r0
 8010074:	e000      	b.n	8010078 <find_volume+0x160>
 8010076:	2303      	movs	r3, #3
 8010078:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801007c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010080:	2b01      	cmp	r3, #1
 8010082:	d905      	bls.n	8010090 <find_volume+0x178>
 8010084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010086:	3301      	adds	r3, #1
 8010088:	643b      	str	r3, [r7, #64]	@ 0x40
 801008a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801008c:	2b03      	cmp	r3, #3
 801008e:	d9e2      	bls.n	8010056 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010090:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010094:	2b04      	cmp	r3, #4
 8010096:	d101      	bne.n	801009c <find_volume+0x184>
 8010098:	2301      	movs	r3, #1
 801009a:	e181      	b.n	80103a0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801009c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d901      	bls.n	80100a8 <find_volume+0x190>
 80100a4:	230d      	movs	r3, #13
 80100a6:	e17b      	b.n	80103a0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80100a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100aa:	3334      	adds	r3, #52	@ 0x34
 80100ac:	330b      	adds	r3, #11
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7fd ff96 	bl	800dfe0 <ld_word>
 80100b4:	4603      	mov	r3, r0
 80100b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80100ba:	d001      	beq.n	80100c0 <find_volume+0x1a8>
 80100bc:	230d      	movs	r3, #13
 80100be:	e16f      	b.n	80103a0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80100c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100c2:	3334      	adds	r3, #52	@ 0x34
 80100c4:	3316      	adds	r3, #22
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fd ff8a 	bl	800dfe0 <ld_word>
 80100cc:	4603      	mov	r3, r0
 80100ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80100d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d106      	bne.n	80100e4 <find_volume+0x1cc>
 80100d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100d8:	3334      	adds	r3, #52	@ 0x34
 80100da:	3324      	adds	r3, #36	@ 0x24
 80100dc:	4618      	mov	r0, r3
 80100de:	f7fd ff98 	bl	800e012 <ld_dword>
 80100e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80100e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80100e8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80100ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ec:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80100f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80100f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100f6:	789b      	ldrb	r3, [r3, #2]
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d005      	beq.n	8010108 <find_volume+0x1f0>
 80100fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100fe:	789b      	ldrb	r3, [r3, #2]
 8010100:	2b02      	cmp	r3, #2
 8010102:	d001      	beq.n	8010108 <find_volume+0x1f0>
 8010104:	230d      	movs	r3, #13
 8010106:	e14b      	b.n	80103a0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801010a:	789b      	ldrb	r3, [r3, #2]
 801010c:	461a      	mov	r2, r3
 801010e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010110:	fb02 f303 	mul.w	r3, r2, r3
 8010114:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801011c:	461a      	mov	r2, r3
 801011e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010120:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010124:	895b      	ldrh	r3, [r3, #10]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d008      	beq.n	801013c <find_volume+0x224>
 801012a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801012c:	895b      	ldrh	r3, [r3, #10]
 801012e:	461a      	mov	r2, r3
 8010130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010132:	895b      	ldrh	r3, [r3, #10]
 8010134:	3b01      	subs	r3, #1
 8010136:	4013      	ands	r3, r2
 8010138:	2b00      	cmp	r3, #0
 801013a:	d001      	beq.n	8010140 <find_volume+0x228>
 801013c:	230d      	movs	r3, #13
 801013e:	e12f      	b.n	80103a0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010142:	3334      	adds	r3, #52	@ 0x34
 8010144:	3311      	adds	r3, #17
 8010146:	4618      	mov	r0, r3
 8010148:	f7fd ff4a 	bl	800dfe0 <ld_word>
 801014c:	4603      	mov	r3, r0
 801014e:	461a      	mov	r2, r3
 8010150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010152:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010156:	891b      	ldrh	r3, [r3, #8]
 8010158:	f003 030f 	and.w	r3, r3, #15
 801015c:	b29b      	uxth	r3, r3
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <find_volume+0x24e>
 8010162:	230d      	movs	r3, #13
 8010164:	e11c      	b.n	80103a0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010168:	3334      	adds	r3, #52	@ 0x34
 801016a:	3313      	adds	r3, #19
 801016c:	4618      	mov	r0, r3
 801016e:	f7fd ff37 	bl	800dfe0 <ld_word>
 8010172:	4603      	mov	r3, r0
 8010174:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010178:	2b00      	cmp	r3, #0
 801017a:	d106      	bne.n	801018a <find_volume+0x272>
 801017c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801017e:	3334      	adds	r3, #52	@ 0x34
 8010180:	3320      	adds	r3, #32
 8010182:	4618      	mov	r0, r3
 8010184:	f7fd ff45 	bl	800e012 <ld_dword>
 8010188:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801018a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801018c:	3334      	adds	r3, #52	@ 0x34
 801018e:	330e      	adds	r3, #14
 8010190:	4618      	mov	r0, r3
 8010192:	f7fd ff25 	bl	800dfe0 <ld_word>
 8010196:	4603      	mov	r3, r0
 8010198:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801019a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801019c:	2b00      	cmp	r3, #0
 801019e:	d101      	bne.n	80101a4 <find_volume+0x28c>
 80101a0:	230d      	movs	r3, #13
 80101a2:	e0fd      	b.n	80103a0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80101a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80101a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101a8:	4413      	add	r3, r2
 80101aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101ac:	8912      	ldrh	r2, [r2, #8]
 80101ae:	0912      	lsrs	r2, r2, #4
 80101b0:	b292      	uxth	r2, r2
 80101b2:	4413      	add	r3, r2
 80101b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80101b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d204      	bcs.n	80101c8 <find_volume+0x2b0>
 80101be:	230d      	movs	r3, #13
 80101c0:	e0ee      	b.n	80103a0 <find_volume+0x488>
 80101c2:	bf00      	nop
 80101c4:	24004970 	.word	0x24004970
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80101c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101cc:	1ad3      	subs	r3, r2, r3
 80101ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101d0:	8952      	ldrh	r2, [r2, #10]
 80101d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80101d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80101d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d101      	bne.n	80101e2 <find_volume+0x2ca>
 80101de:	230d      	movs	r3, #13
 80101e0:	e0de      	b.n	80103a0 <find_volume+0x488>
		fmt = FS_FAT32;
 80101e2:	2303      	movs	r3, #3
 80101e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80101e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80101ee:	4293      	cmp	r3, r2
 80101f0:	d802      	bhi.n	80101f8 <find_volume+0x2e0>
 80101f2:	2302      	movs	r3, #2
 80101f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80101f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80101fe:	4293      	cmp	r3, r2
 8010200:	d802      	bhi.n	8010208 <find_volume+0x2f0>
 8010202:	2301      	movs	r3, #1
 8010204:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801020a:	1c9a      	adds	r2, r3, #2
 801020c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801020e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010212:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010214:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010216:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801021a:	441a      	add	r2, r3
 801021c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801021e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010220:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010224:	441a      	add	r2, r3
 8010226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010228:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801022a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801022e:	2b03      	cmp	r3, #3
 8010230:	d11e      	bne.n	8010270 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010234:	3334      	adds	r3, #52	@ 0x34
 8010236:	332a      	adds	r3, #42	@ 0x2a
 8010238:	4618      	mov	r0, r3
 801023a:	f7fd fed1 	bl	800dfe0 <ld_word>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d001      	beq.n	8010248 <find_volume+0x330>
 8010244:	230d      	movs	r3, #13
 8010246:	e0ab      	b.n	80103a0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801024a:	891b      	ldrh	r3, [r3, #8]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d001      	beq.n	8010254 <find_volume+0x33c>
 8010250:	230d      	movs	r3, #13
 8010252:	e0a5      	b.n	80103a0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010256:	3334      	adds	r3, #52	@ 0x34
 8010258:	332c      	adds	r3, #44	@ 0x2c
 801025a:	4618      	mov	r0, r3
 801025c:	f7fd fed9 	bl	800e012 <ld_dword>
 8010260:	4602      	mov	r2, r0
 8010262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010264:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010268:	699b      	ldr	r3, [r3, #24]
 801026a:	009b      	lsls	r3, r3, #2
 801026c:	647b      	str	r3, [r7, #68]	@ 0x44
 801026e:	e01f      	b.n	80102b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010272:	891b      	ldrh	r3, [r3, #8]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d101      	bne.n	801027c <find_volume+0x364>
 8010278:	230d      	movs	r3, #13
 801027a:	e091      	b.n	80103a0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801027c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010282:	441a      	add	r2, r3
 8010284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010286:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010288:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801028c:	2b02      	cmp	r3, #2
 801028e:	d103      	bne.n	8010298 <find_volume+0x380>
 8010290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010292:	699b      	ldr	r3, [r3, #24]
 8010294:	005b      	lsls	r3, r3, #1
 8010296:	e00a      	b.n	80102ae <find_volume+0x396>
 8010298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801029a:	699a      	ldr	r2, [r3, #24]
 801029c:	4613      	mov	r3, r2
 801029e:	005b      	lsls	r3, r3, #1
 80102a0:	4413      	add	r3, r2
 80102a2:	085a      	lsrs	r2, r3, #1
 80102a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a6:	699b      	ldr	r3, [r3, #24]
 80102a8:	f003 0301 	and.w	r3, r3, #1
 80102ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80102ae:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80102b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b2:	69da      	ldr	r2, [r3, #28]
 80102b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102b6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80102ba:	0a5b      	lsrs	r3, r3, #9
 80102bc:	429a      	cmp	r2, r3
 80102be:	d201      	bcs.n	80102c4 <find_volume+0x3ac>
 80102c0:	230d      	movs	r3, #13
 80102c2:	e06d      	b.n	80103a0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80102c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c6:	f04f 32ff 	mov.w	r2, #4294967295
 80102ca:	615a      	str	r2, [r3, #20]
 80102cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ce:	695a      	ldr	r2, [r3, #20]
 80102d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80102d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d6:	2280      	movs	r2, #128	@ 0x80
 80102d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80102da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80102de:	2b03      	cmp	r3, #3
 80102e0:	d149      	bne.n	8010376 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80102e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102e4:	3334      	adds	r3, #52	@ 0x34
 80102e6:	3330      	adds	r3, #48	@ 0x30
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fd fe79 	bl	800dfe0 <ld_word>
 80102ee:	4603      	mov	r3, r0
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d140      	bne.n	8010376 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80102f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102f6:	3301      	adds	r3, #1
 80102f8:	4619      	mov	r1, r3
 80102fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80102fc:	f7fe f8e6 	bl	800e4cc <move_window>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	d137      	bne.n	8010376 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8010306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010308:	2200      	movs	r2, #0
 801030a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801030c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801030e:	3334      	adds	r3, #52	@ 0x34
 8010310:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010314:	4618      	mov	r0, r3
 8010316:	f7fd fe63 	bl	800dfe0 <ld_word>
 801031a:	4603      	mov	r3, r0
 801031c:	461a      	mov	r2, r3
 801031e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010322:	429a      	cmp	r2, r3
 8010324:	d127      	bne.n	8010376 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010328:	3334      	adds	r3, #52	@ 0x34
 801032a:	4618      	mov	r0, r3
 801032c:	f7fd fe71 	bl	800e012 <ld_dword>
 8010330:	4603      	mov	r3, r0
 8010332:	4a1d      	ldr	r2, [pc, #116]	@ (80103a8 <find_volume+0x490>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d11e      	bne.n	8010376 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801033a:	3334      	adds	r3, #52	@ 0x34
 801033c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010340:	4618      	mov	r0, r3
 8010342:	f7fd fe66 	bl	800e012 <ld_dword>
 8010346:	4603      	mov	r3, r0
 8010348:	4a18      	ldr	r2, [pc, #96]	@ (80103ac <find_volume+0x494>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d113      	bne.n	8010376 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801034e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010350:	3334      	adds	r3, #52	@ 0x34
 8010352:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010356:	4618      	mov	r0, r3
 8010358:	f7fd fe5b 	bl	800e012 <ld_dword>
 801035c:	4602      	mov	r2, r0
 801035e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010360:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010364:	3334      	adds	r3, #52	@ 0x34
 8010366:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801036a:	4618      	mov	r0, r3
 801036c:	f7fd fe51 	bl	800e012 <ld_dword>
 8010370:	4602      	mov	r2, r0
 8010372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010374:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010378:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801037c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801037e:	4b0c      	ldr	r3, [pc, #48]	@ (80103b0 <find_volume+0x498>)
 8010380:	881b      	ldrh	r3, [r3, #0]
 8010382:	3301      	adds	r3, #1
 8010384:	b29a      	uxth	r2, r3
 8010386:	4b0a      	ldr	r3, [pc, #40]	@ (80103b0 <find_volume+0x498>)
 8010388:	801a      	strh	r2, [r3, #0]
 801038a:	4b09      	ldr	r3, [pc, #36]	@ (80103b0 <find_volume+0x498>)
 801038c:	881a      	ldrh	r2, [r3, #0]
 801038e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010390:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010394:	4a07      	ldr	r2, [pc, #28]	@ (80103b4 <find_volume+0x49c>)
 8010396:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010398:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801039a:	f7fe f82f 	bl	800e3fc <clear_lock>
#endif
	return FR_OK;
 801039e:	2300      	movs	r3, #0
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3758      	adds	r7, #88	@ 0x58
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	41615252 	.word	0x41615252
 80103ac:	61417272 	.word	0x61417272
 80103b0:	24004974 	.word	0x24004974
 80103b4:	24004998 	.word	0x24004998

080103b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80103c2:	2309      	movs	r3, #9
 80103c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d01c      	beq.n	8010406 <validate+0x4e>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d018      	beq.n	8010406 <validate+0x4e>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d013      	beq.n	8010406 <validate+0x4e>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	889a      	ldrh	r2, [r3, #4]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	88db      	ldrh	r3, [r3, #6]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d10c      	bne.n	8010406 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	785b      	ldrb	r3, [r3, #1]
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7fd fd72 	bl	800dedc <disk_status>
 80103f8:	4603      	mov	r3, r0
 80103fa:	f003 0301 	and.w	r3, r3, #1
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d101      	bne.n	8010406 <validate+0x4e>
			res = FR_OK;
 8010402:	2300      	movs	r3, #0
 8010404:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010406:	7bfb      	ldrb	r3, [r7, #15]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d102      	bne.n	8010412 <validate+0x5a>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	e000      	b.n	8010414 <validate+0x5c>
 8010412:	2300      	movs	r3, #0
 8010414:	683a      	ldr	r2, [r7, #0]
 8010416:	6013      	str	r3, [r2, #0]
	return res;
 8010418:	7bfb      	ldrb	r3, [r7, #15]
}
 801041a:	4618      	mov	r0, r3
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
	...

08010424 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b088      	sub	sp, #32
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	4613      	mov	r3, r2
 8010430:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010436:	f107 0310 	add.w	r3, r7, #16
 801043a:	4618      	mov	r0, r3
 801043c:	f7ff fcd1 	bl	800fde2 <get_ldnumber>
 8010440:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	2b00      	cmp	r3, #0
 8010446:	da01      	bge.n	801044c <f_mount+0x28>
 8010448:	230b      	movs	r3, #11
 801044a:	e02b      	b.n	80104a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801044c:	4a17      	ldr	r2, [pc, #92]	@ (80104ac <f_mount+0x88>)
 801044e:	69fb      	ldr	r3, [r7, #28]
 8010450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010454:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d005      	beq.n	8010468 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801045c:	69b8      	ldr	r0, [r7, #24]
 801045e:	f7fd ffcd 	bl	800e3fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010462:	69bb      	ldr	r3, [r7, #24]
 8010464:	2200      	movs	r2, #0
 8010466:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d002      	beq.n	8010474 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2200      	movs	r2, #0
 8010472:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010474:	68fa      	ldr	r2, [r7, #12]
 8010476:	490d      	ldr	r1, [pc, #52]	@ (80104ac <f_mount+0x88>)
 8010478:	69fb      	ldr	r3, [r7, #28]
 801047a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d002      	beq.n	801048a <f_mount+0x66>
 8010484:	79fb      	ldrb	r3, [r7, #7]
 8010486:	2b01      	cmp	r3, #1
 8010488:	d001      	beq.n	801048e <f_mount+0x6a>
 801048a:	2300      	movs	r3, #0
 801048c:	e00a      	b.n	80104a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801048e:	f107 010c 	add.w	r1, r7, #12
 8010492:	f107 0308 	add.w	r3, r7, #8
 8010496:	2200      	movs	r2, #0
 8010498:	4618      	mov	r0, r3
 801049a:	f7ff fd3d 	bl	800ff18 <find_volume>
 801049e:	4603      	mov	r3, r0
 80104a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80104a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3720      	adds	r7, #32
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	24004970 	.word	0x24004970

080104b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b09a      	sub	sp, #104	@ 0x68
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	4613      	mov	r3, r2
 80104bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d101      	bne.n	80104c8 <f_open+0x18>
 80104c4:	2309      	movs	r3, #9
 80104c6:	e1a9      	b.n	801081c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80104c8:	79fb      	ldrb	r3, [r7, #7]
 80104ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80104ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80104d0:	79fa      	ldrb	r2, [r7, #7]
 80104d2:	f107 0114 	add.w	r1, r7, #20
 80104d6:	f107 0308 	add.w	r3, r7, #8
 80104da:	4618      	mov	r0, r3
 80104dc:	f7ff fd1c 	bl	800ff18 <find_volume>
 80104e0:	4603      	mov	r3, r0
 80104e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80104e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f040 818d 	bne.w	801080a <f_open+0x35a>
		dj.obj.fs = fs;
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80104f4:	68ba      	ldr	r2, [r7, #8]
 80104f6:	f107 0318 	add.w	r3, r7, #24
 80104fa:	4611      	mov	r1, r2
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7ff fbff 	bl	800fd00 <follow_path>
 8010502:	4603      	mov	r3, r0
 8010504:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010508:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801050c:	2b00      	cmp	r3, #0
 801050e:	d118      	bne.n	8010542 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010510:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010514:	b25b      	sxtb	r3, r3
 8010516:	2b00      	cmp	r3, #0
 8010518:	da03      	bge.n	8010522 <f_open+0x72>
				res = FR_INVALID_NAME;
 801051a:	2306      	movs	r3, #6
 801051c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010520:	e00f      	b.n	8010542 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010522:	79fb      	ldrb	r3, [r7, #7]
 8010524:	2b01      	cmp	r3, #1
 8010526:	bf8c      	ite	hi
 8010528:	2301      	movhi	r3, #1
 801052a:	2300      	movls	r3, #0
 801052c:	b2db      	uxtb	r3, r3
 801052e:	461a      	mov	r2, r3
 8010530:	f107 0318 	add.w	r3, r7, #24
 8010534:	4611      	mov	r1, r2
 8010536:	4618      	mov	r0, r3
 8010538:	f7fd fe54 	bl	800e1e4 <chk_lock>
 801053c:	4603      	mov	r3, r0
 801053e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010542:	79fb      	ldrb	r3, [r7, #7]
 8010544:	f003 031c 	and.w	r3, r3, #28
 8010548:	2b00      	cmp	r3, #0
 801054a:	d07f      	beq.n	801064c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801054c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010550:	2b00      	cmp	r3, #0
 8010552:	d017      	beq.n	8010584 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010554:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010558:	2b04      	cmp	r3, #4
 801055a:	d10e      	bne.n	801057a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801055c:	f7fd fe9e 	bl	800e29c <enq_lock>
 8010560:	4603      	mov	r3, r0
 8010562:	2b00      	cmp	r3, #0
 8010564:	d006      	beq.n	8010574 <f_open+0xc4>
 8010566:	f107 0318 	add.w	r3, r7, #24
 801056a:	4618      	mov	r0, r3
 801056c:	f7fe ffea 	bl	800f544 <dir_register>
 8010570:	4603      	mov	r3, r0
 8010572:	e000      	b.n	8010576 <f_open+0xc6>
 8010574:	2312      	movs	r3, #18
 8010576:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801057a:	79fb      	ldrb	r3, [r7, #7]
 801057c:	f043 0308 	orr.w	r3, r3, #8
 8010580:	71fb      	strb	r3, [r7, #7]
 8010582:	e010      	b.n	80105a6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010584:	7fbb      	ldrb	r3, [r7, #30]
 8010586:	f003 0311 	and.w	r3, r3, #17
 801058a:	2b00      	cmp	r3, #0
 801058c:	d003      	beq.n	8010596 <f_open+0xe6>
					res = FR_DENIED;
 801058e:	2307      	movs	r3, #7
 8010590:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010594:	e007      	b.n	80105a6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010596:	79fb      	ldrb	r3, [r7, #7]
 8010598:	f003 0304 	and.w	r3, r3, #4
 801059c:	2b00      	cmp	r3, #0
 801059e:	d002      	beq.n	80105a6 <f_open+0xf6>
 80105a0:	2308      	movs	r3, #8
 80105a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80105a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d168      	bne.n	8010680 <f_open+0x1d0>
 80105ae:	79fb      	ldrb	r3, [r7, #7]
 80105b0:	f003 0308 	and.w	r3, r3, #8
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d063      	beq.n	8010680 <f_open+0x1d0>
				dw = GET_FATTIME();
 80105b8:	f7fd fafc 	bl	800dbb4 <get_fattime>
 80105bc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80105be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c0:	330e      	adds	r3, #14
 80105c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7fd fd62 	bl	800e08e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80105ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105cc:	3316      	adds	r3, #22
 80105ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7fd fd5c 	bl	800e08e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80105d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d8:	330b      	adds	r3, #11
 80105da:	2220      	movs	r2, #32
 80105dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80105e2:	4611      	mov	r1, r2
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7fe fc06 	bl	800edf6 <ld_clust>
 80105ea:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80105f0:	2200      	movs	r2, #0
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fe fc1e 	bl	800ee34 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80105f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105fa:	331c      	adds	r3, #28
 80105fc:	2100      	movs	r1, #0
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fd fd45 	bl	800e08e <st_dword>
					fs->wflag = 1;
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	2201      	movs	r2, #1
 8010608:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801060a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801060c:	2b00      	cmp	r3, #0
 801060e:	d037      	beq.n	8010680 <f_open+0x1d0>
						dw = fs->winsect;
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010614:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8010616:	f107 0318 	add.w	r3, r7, #24
 801061a:	2200      	movs	r2, #0
 801061c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801061e:	4618      	mov	r0, r3
 8010620:	f7fe f931 	bl	800e886 <remove_chain>
 8010624:	4603      	mov	r3, r0
 8010626:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801062a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801062e:	2b00      	cmp	r3, #0
 8010630:	d126      	bne.n	8010680 <f_open+0x1d0>
							res = move_window(fs, dw);
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010636:	4618      	mov	r0, r3
 8010638:	f7fd ff48 	bl	800e4cc <move_window>
 801063c:	4603      	mov	r3, r0
 801063e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010646:	3a01      	subs	r2, #1
 8010648:	611a      	str	r2, [r3, #16]
 801064a:	e019      	b.n	8010680 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801064c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010650:	2b00      	cmp	r3, #0
 8010652:	d115      	bne.n	8010680 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010654:	7fbb      	ldrb	r3, [r7, #30]
 8010656:	f003 0310 	and.w	r3, r3, #16
 801065a:	2b00      	cmp	r3, #0
 801065c:	d003      	beq.n	8010666 <f_open+0x1b6>
					res = FR_NO_FILE;
 801065e:	2304      	movs	r3, #4
 8010660:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010664:	e00c      	b.n	8010680 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010666:	79fb      	ldrb	r3, [r7, #7]
 8010668:	f003 0302 	and.w	r3, r3, #2
 801066c:	2b00      	cmp	r3, #0
 801066e:	d007      	beq.n	8010680 <f_open+0x1d0>
 8010670:	7fbb      	ldrb	r3, [r7, #30]
 8010672:	f003 0301 	and.w	r3, r3, #1
 8010676:	2b00      	cmp	r3, #0
 8010678:	d002      	beq.n	8010680 <f_open+0x1d0>
						res = FR_DENIED;
 801067a:	2307      	movs	r3, #7
 801067c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010680:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010684:	2b00      	cmp	r3, #0
 8010686:	d126      	bne.n	80106d6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010688:	79fb      	ldrb	r3, [r7, #7]
 801068a:	f003 0308 	and.w	r3, r3, #8
 801068e:	2b00      	cmp	r3, #0
 8010690:	d003      	beq.n	801069a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8010692:	79fb      	ldrb	r3, [r7, #7]
 8010694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010698:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80106a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80106a8:	79fb      	ldrb	r3, [r7, #7]
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	bf8c      	ite	hi
 80106ae:	2301      	movhi	r3, #1
 80106b0:	2300      	movls	r3, #0
 80106b2:	b2db      	uxtb	r3, r3
 80106b4:	461a      	mov	r2, r3
 80106b6:	f107 0318 	add.w	r3, r7, #24
 80106ba:	4611      	mov	r1, r2
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fd fe0f 	bl	800e2e0 <inc_lock>
 80106c2:	4602      	mov	r2, r0
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	691b      	ldr	r3, [r3, #16]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d102      	bne.n	80106d6 <f_open+0x226>
 80106d0:	2302      	movs	r3, #2
 80106d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80106d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80106da:	2b00      	cmp	r3, #0
 80106dc:	f040 8095 	bne.w	801080a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80106e4:	4611      	mov	r1, r2
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fe fb85 	bl	800edf6 <ld_clust>
 80106ec:	4602      	mov	r2, r0
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80106f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106f4:	331c      	adds	r3, #28
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fd fc8b 	bl	800e012 <ld_dword>
 80106fc:	4602      	mov	r2, r0
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	2200      	movs	r2, #0
 8010706:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010708:	697a      	ldr	r2, [r7, #20]
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	88da      	ldrh	r2, [r3, #6]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	79fa      	ldrb	r2, [r7, #7]
 801071a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2200      	movs	r2, #0
 8010720:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2200      	movs	r2, #0
 8010726:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2200      	movs	r2, #0
 801072c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	3330      	adds	r3, #48	@ 0x30
 8010732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010736:	2100      	movs	r1, #0
 8010738:	4618      	mov	r0, r3
 801073a:	f7fd fcf5 	bl	800e128 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801073e:	79fb      	ldrb	r3, [r7, #7]
 8010740:	f003 0320 	and.w	r3, r3, #32
 8010744:	2b00      	cmp	r3, #0
 8010746:	d060      	beq.n	801080a <f_open+0x35a>
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	68db      	ldr	r3, [r3, #12]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d05c      	beq.n	801080a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	68da      	ldr	r2, [r3, #12]
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	895b      	ldrh	r3, [r3, #10]
 801075c:	025b      	lsls	r3, r3, #9
 801075e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	689b      	ldr	r3, [r3, #8]
 8010764:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	68db      	ldr	r3, [r3, #12]
 801076a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801076c:	e016      	b.n	801079c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010772:	4618      	mov	r0, r3
 8010774:	f7fd fef6 	bl	800e564 <get_fat>
 8010778:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801077a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801077c:	2b01      	cmp	r3, #1
 801077e:	d802      	bhi.n	8010786 <f_open+0x2d6>
 8010780:	2302      	movs	r3, #2
 8010782:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801078c:	d102      	bne.n	8010794 <f_open+0x2e4>
 801078e:	2301      	movs	r3, #1
 8010790:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010794:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010798:	1ad3      	subs	r3, r2, r3
 801079a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801079c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d103      	bne.n	80107ac <f_open+0x2fc>
 80107a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80107a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d8e0      	bhi.n	801076e <f_open+0x2be>
				}
				fp->clust = clst;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80107b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80107b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d127      	bne.n	801080a <f_open+0x35a>
 80107ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80107bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d022      	beq.n	801080a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fd feac 	bl	800e526 <clust2sect>
 80107ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80107d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d103      	bne.n	80107de <f_open+0x32e>
						res = FR_INT_ERR;
 80107d6:	2302      	movs	r3, #2
 80107d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80107dc:	e015      	b.n	801080a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80107de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80107e0:	0a5a      	lsrs	r2, r3, #9
 80107e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107e4:	441a      	add	r2, r3
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	7858      	ldrb	r0, [r3, #1]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6a1a      	ldr	r2, [r3, #32]
 80107f8:	2301      	movs	r3, #1
 80107fa:	f7fd fbb1 	bl	800df60 <disk_read>
 80107fe:	4603      	mov	r3, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d002      	beq.n	801080a <f_open+0x35a>
 8010804:	2301      	movs	r3, #1
 8010806:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801080a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801080e:	2b00      	cmp	r3, #0
 8010810:	d002      	beq.n	8010818 <f_open+0x368>
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2200      	movs	r2, #0
 8010816:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010818:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801081c:	4618      	mov	r0, r3
 801081e:	3768      	adds	r7, #104	@ 0x68
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b08e      	sub	sp, #56	@ 0x38
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
 8010830:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	2200      	movs	r2, #0
 801083a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f107 0214 	add.w	r2, r7, #20
 8010842:	4611      	mov	r1, r2
 8010844:	4618      	mov	r0, r3
 8010846:	f7ff fdb7 	bl	80103b8 <validate>
 801084a:	4603      	mov	r3, r0
 801084c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010850:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010854:	2b00      	cmp	r3, #0
 8010856:	d107      	bne.n	8010868 <f_read+0x44>
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	7d5b      	ldrb	r3, [r3, #21]
 801085c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010860:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010864:	2b00      	cmp	r3, #0
 8010866:	d002      	beq.n	801086e <f_read+0x4a>
 8010868:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801086c:	e115      	b.n	8010a9a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	7d1b      	ldrb	r3, [r3, #20]
 8010872:	f003 0301 	and.w	r3, r3, #1
 8010876:	2b00      	cmp	r3, #0
 8010878:	d101      	bne.n	801087e <f_read+0x5a>
 801087a:	2307      	movs	r3, #7
 801087c:	e10d      	b.n	8010a9a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	68da      	ldr	r2, [r3, #12]
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	699b      	ldr	r3, [r3, #24]
 8010886:	1ad3      	subs	r3, r2, r3
 8010888:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	6a3b      	ldr	r3, [r7, #32]
 801088e:	429a      	cmp	r2, r3
 8010890:	f240 80fe 	bls.w	8010a90 <f_read+0x26c>
 8010894:	6a3b      	ldr	r3, [r7, #32]
 8010896:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010898:	e0fa      	b.n	8010a90 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	699b      	ldr	r3, [r3, #24]
 801089e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f040 80c6 	bne.w	8010a34 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	699b      	ldr	r3, [r3, #24]
 80108ac:	0a5b      	lsrs	r3, r3, #9
 80108ae:	697a      	ldr	r2, [r7, #20]
 80108b0:	8952      	ldrh	r2, [r2, #10]
 80108b2:	3a01      	subs	r2, #1
 80108b4:	4013      	ands	r3, r2
 80108b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d12f      	bne.n	801091e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	699b      	ldr	r3, [r3, #24]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d103      	bne.n	80108ce <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	689b      	ldr	r3, [r3, #8]
 80108ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80108cc:	e013      	b.n	80108f6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d007      	beq.n	80108e6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	699b      	ldr	r3, [r3, #24]
 80108da:	4619      	mov	r1, r3
 80108dc:	68f8      	ldr	r0, [r7, #12]
 80108de:	f7fe f8cf 	bl	800ea80 <clmt_clust>
 80108e2:	6338      	str	r0, [r7, #48]	@ 0x30
 80108e4:	e007      	b.n	80108f6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80108e6:	68fa      	ldr	r2, [r7, #12]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	69db      	ldr	r3, [r3, #28]
 80108ec:	4619      	mov	r1, r3
 80108ee:	4610      	mov	r0, r2
 80108f0:	f7fd fe38 	bl	800e564 <get_fat>
 80108f4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80108f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d804      	bhi.n	8010906 <f_read+0xe2>
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2202      	movs	r2, #2
 8010900:	755a      	strb	r2, [r3, #21]
 8010902:	2302      	movs	r3, #2
 8010904:	e0c9      	b.n	8010a9a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801090c:	d104      	bne.n	8010918 <f_read+0xf4>
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	2201      	movs	r2, #1
 8010912:	755a      	strb	r2, [r3, #21]
 8010914:	2301      	movs	r3, #1
 8010916:	e0c0      	b.n	8010a9a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801091c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801091e:	697a      	ldr	r2, [r7, #20]
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	69db      	ldr	r3, [r3, #28]
 8010924:	4619      	mov	r1, r3
 8010926:	4610      	mov	r0, r2
 8010928:	f7fd fdfd 	bl	800e526 <clust2sect>
 801092c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d104      	bne.n	801093e <f_read+0x11a>
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2202      	movs	r2, #2
 8010938:	755a      	strb	r2, [r3, #21]
 801093a:	2302      	movs	r3, #2
 801093c:	e0ad      	b.n	8010a9a <f_read+0x276>
			sect += csect;
 801093e:	69ba      	ldr	r2, [r7, #24]
 8010940:	69fb      	ldr	r3, [r7, #28]
 8010942:	4413      	add	r3, r2
 8010944:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	0a5b      	lsrs	r3, r3, #9
 801094a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801094c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801094e:	2b00      	cmp	r3, #0
 8010950:	d039      	beq.n	80109c6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010952:	69fa      	ldr	r2, [r7, #28]
 8010954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010956:	4413      	add	r3, r2
 8010958:	697a      	ldr	r2, [r7, #20]
 801095a:	8952      	ldrh	r2, [r2, #10]
 801095c:	4293      	cmp	r3, r2
 801095e:	d905      	bls.n	801096c <f_read+0x148>
					cc = fs->csize - csect;
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	895b      	ldrh	r3, [r3, #10]
 8010964:	461a      	mov	r2, r3
 8010966:	69fb      	ldr	r3, [r7, #28]
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	7858      	ldrb	r0, [r3, #1]
 8010970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010972:	69ba      	ldr	r2, [r7, #24]
 8010974:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010976:	f7fd faf3 	bl	800df60 <disk_read>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d004      	beq.n	801098a <f_read+0x166>
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2201      	movs	r2, #1
 8010984:	755a      	strb	r2, [r3, #21]
 8010986:	2301      	movs	r3, #1
 8010988:	e087      	b.n	8010a9a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	7d1b      	ldrb	r3, [r3, #20]
 801098e:	b25b      	sxtb	r3, r3
 8010990:	2b00      	cmp	r3, #0
 8010992:	da14      	bge.n	80109be <f_read+0x19a>
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	6a1a      	ldr	r2, [r3, #32]
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	1ad3      	subs	r3, r2, r3
 801099c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801099e:	429a      	cmp	r2, r3
 80109a0:	d90d      	bls.n	80109be <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	6a1a      	ldr	r2, [r3, #32]
 80109a6:	69bb      	ldr	r3, [r7, #24]
 80109a8:	1ad3      	subs	r3, r2, r3
 80109aa:	025b      	lsls	r3, r3, #9
 80109ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109ae:	18d0      	adds	r0, r2, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	3330      	adds	r3, #48	@ 0x30
 80109b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109b8:	4619      	mov	r1, r3
 80109ba:	f7fd fb94 	bl	800e0e6 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80109be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109c0:	025b      	lsls	r3, r3, #9
 80109c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80109c4:	e050      	b.n	8010a68 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	6a1b      	ldr	r3, [r3, #32]
 80109ca:	69ba      	ldr	r2, [r7, #24]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d02e      	beq.n	8010a2e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	7d1b      	ldrb	r3, [r3, #20]
 80109d4:	b25b      	sxtb	r3, r3
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	da18      	bge.n	8010a0c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	7858      	ldrb	r0, [r3, #1]
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6a1a      	ldr	r2, [r3, #32]
 80109e8:	2301      	movs	r3, #1
 80109ea:	f7fd fad9 	bl	800dfa0 <disk_write>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d004      	beq.n	80109fe <f_read+0x1da>
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2201      	movs	r2, #1
 80109f8:	755a      	strb	r2, [r3, #21]
 80109fa:	2301      	movs	r3, #1
 80109fc:	e04d      	b.n	8010a9a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	7d1b      	ldrb	r3, [r3, #20]
 8010a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a06:	b2da      	uxtb	r2, r3
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	7858      	ldrb	r0, [r3, #1]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010a16:	2301      	movs	r3, #1
 8010a18:	69ba      	ldr	r2, [r7, #24]
 8010a1a:	f7fd faa1 	bl	800df60 <disk_read>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d004      	beq.n	8010a2e <f_read+0x20a>
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2201      	movs	r2, #1
 8010a28:	755a      	strb	r2, [r3, #21]
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	e035      	b.n	8010a9a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	69ba      	ldr	r2, [r7, #24]
 8010a32:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	699b      	ldr	r3, [r3, #24]
 8010a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a3c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d901      	bls.n	8010a4e <f_read+0x22a>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	699b      	ldr	r3, [r3, #24]
 8010a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a5c:	4413      	add	r3, r2
 8010a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a60:	4619      	mov	r1, r3
 8010a62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010a64:	f7fd fb3f 	bl	800e0e6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a6c:	4413      	add	r3, r2
 8010a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	699a      	ldr	r2, [r3, #24]
 8010a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a76:	441a      	add	r2, r3
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	619a      	str	r2, [r3, #24]
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a82:	441a      	add	r2, r3
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	601a      	str	r2, [r3, #0]
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a8c:	1ad3      	subs	r3, r2, r3
 8010a8e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f47f af01 	bne.w	801089a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010a98:	2300      	movs	r3, #0
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3738      	adds	r7, #56	@ 0x38
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010aa2:	b580      	push	{r7, lr}
 8010aa4:	b090      	sub	sp, #64	@ 0x40
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
 8010aaa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f107 0208 	add.w	r2, r7, #8
 8010ab2:	4611      	mov	r1, r2
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7ff fc7f 	bl	80103b8 <validate>
 8010aba:	4603      	mov	r3, r0
 8010abc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010ac0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d103      	bne.n	8010ad0 <f_lseek+0x2e>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	7d5b      	ldrb	r3, [r3, #21]
 8010acc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010ad0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d002      	beq.n	8010ade <f_lseek+0x3c>
 8010ad8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010adc:	e1e6      	b.n	8010eac <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	f000 80d1 	beq.w	8010c8a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aee:	d15a      	bne.n	8010ba6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010af4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af8:	1d1a      	adds	r2, r3, #4
 8010afa:	627a      	str	r2, [r7, #36]	@ 0x24
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	617b      	str	r3, [r7, #20]
 8010b00:	2302      	movs	r3, #2
 8010b02:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	689b      	ldr	r3, [r3, #8]
 8010b08:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d03a      	beq.n	8010b86 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b12:	613b      	str	r3, [r7, #16]
 8010b14:	2300      	movs	r3, #0
 8010b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b1a:	3302      	adds	r3, #2
 8010b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8010b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b20:	60fb      	str	r3, [r7, #12]
 8010b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b24:	3301      	adds	r3, #1
 8010b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7fd fd19 	bl	800e564 <get_fat>
 8010b32:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d804      	bhi.n	8010b44 <f_lseek+0xa2>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2202      	movs	r2, #2
 8010b3e:	755a      	strb	r2, [r3, #21]
 8010b40:	2302      	movs	r3, #2
 8010b42:	e1b3      	b.n	8010eac <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b4a:	d104      	bne.n	8010b56 <f_lseek+0xb4>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2201      	movs	r2, #1
 8010b50:	755a      	strb	r2, [r3, #21]
 8010b52:	2301      	movs	r3, #1
 8010b54:	e1aa      	b.n	8010eac <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	3301      	adds	r3, #1
 8010b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d0de      	beq.n	8010b1e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010b60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d809      	bhi.n	8010b7c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b6a:	1d1a      	adds	r2, r3, #4
 8010b6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8010b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b70:	601a      	str	r2, [r3, #0]
 8010b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b74:	1d1a      	adds	r2, r3, #4
 8010b76:	627a      	str	r2, [r7, #36]	@ 0x24
 8010b78:	693a      	ldr	r2, [r7, #16]
 8010b7a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	699b      	ldr	r3, [r3, #24]
 8010b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d3c4      	bcc.n	8010b10 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b8c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010b8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d803      	bhi.n	8010b9e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b98:	2200      	movs	r2, #0
 8010b9a:	601a      	str	r2, [r3, #0]
 8010b9c:	e184      	b.n	8010ea8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010b9e:	2311      	movs	r3, #17
 8010ba0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010ba4:	e180      	b.n	8010ea8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	68db      	ldr	r3, [r3, #12]
 8010baa:	683a      	ldr	r2, [r7, #0]
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d902      	bls.n	8010bb6 <f_lseek+0x114>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	683a      	ldr	r2, [r7, #0]
 8010bba:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f000 8172 	beq.w	8010ea8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	3b01      	subs	r3, #1
 8010bc8:	4619      	mov	r1, r3
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f7fd ff58 	bl	800ea80 <clmt_clust>
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010bd6:	68ba      	ldr	r2, [r7, #8]
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	69db      	ldr	r3, [r3, #28]
 8010bdc:	4619      	mov	r1, r3
 8010bde:	4610      	mov	r0, r2
 8010be0:	f7fd fca1 	bl	800e526 <clust2sect>
 8010be4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010be6:	69bb      	ldr	r3, [r7, #24]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d104      	bne.n	8010bf6 <f_lseek+0x154>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2202      	movs	r2, #2
 8010bf0:	755a      	strb	r2, [r3, #21]
 8010bf2:	2302      	movs	r3, #2
 8010bf4:	e15a      	b.n	8010eac <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	0a5b      	lsrs	r3, r3, #9
 8010bfc:	68ba      	ldr	r2, [r7, #8]
 8010bfe:	8952      	ldrh	r2, [r2, #10]
 8010c00:	3a01      	subs	r2, #1
 8010c02:	4013      	ands	r3, r2
 8010c04:	69ba      	ldr	r2, [r7, #24]
 8010c06:	4413      	add	r3, r2
 8010c08:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	699b      	ldr	r3, [r3, #24]
 8010c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	f000 8148 	beq.w	8010ea8 <f_lseek+0x406>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6a1b      	ldr	r3, [r3, #32]
 8010c1c:	69ba      	ldr	r2, [r7, #24]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	f000 8142 	beq.w	8010ea8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	7d1b      	ldrb	r3, [r3, #20]
 8010c28:	b25b      	sxtb	r3, r3
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	da18      	bge.n	8010c60 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	7858      	ldrb	r0, [r3, #1]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6a1a      	ldr	r2, [r3, #32]
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	f7fd f9af 	bl	800dfa0 <disk_write>
 8010c42:	4603      	mov	r3, r0
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d004      	beq.n	8010c52 <f_lseek+0x1b0>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	755a      	strb	r2, [r3, #21]
 8010c4e:	2301      	movs	r3, #1
 8010c50:	e12c      	b.n	8010eac <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	7d1b      	ldrb	r3, [r3, #20]
 8010c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c5a:	b2da      	uxtb	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	7858      	ldrb	r0, [r3, #1]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	69ba      	ldr	r2, [r7, #24]
 8010c6e:	f7fd f977 	bl	800df60 <disk_read>
 8010c72:	4603      	mov	r3, r0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d004      	beq.n	8010c82 <f_lseek+0x1e0>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	755a      	strb	r2, [r3, #21]
 8010c7e:	2301      	movs	r3, #1
 8010c80:	e114      	b.n	8010eac <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	69ba      	ldr	r2, [r7, #24]
 8010c86:	621a      	str	r2, [r3, #32]
 8010c88:	e10e      	b.n	8010ea8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	683a      	ldr	r2, [r7, #0]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d908      	bls.n	8010ca6 <f_lseek+0x204>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	7d1b      	ldrb	r3, [r3, #20]
 8010c98:	f003 0302 	and.w	r3, r3, #2
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d102      	bne.n	8010ca6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	699b      	ldr	r3, [r3, #24]
 8010caa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010cac:	2300      	movs	r3, #0
 8010cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cb4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	f000 80a7 	beq.w	8010e0c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	895b      	ldrh	r3, [r3, #10]
 8010cc2:	025b      	lsls	r3, r3, #9
 8010cc4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010cc6:	6a3b      	ldr	r3, [r7, #32]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d01b      	beq.n	8010d04 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	1e5a      	subs	r2, r3, #1
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8010cd6:	6a3b      	ldr	r3, [r7, #32]
 8010cd8:	1e59      	subs	r1, r3, #1
 8010cda:	69fb      	ldr	r3, [r7, #28]
 8010cdc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d30f      	bcc.n	8010d04 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010ce4:	6a3b      	ldr	r3, [r7, #32]
 8010ce6:	1e5a      	subs	r2, r3, #1
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	425b      	negs	r3, r3
 8010cec:	401a      	ands	r2, r3
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	699b      	ldr	r3, [r3, #24]
 8010cf6:	683a      	ldr	r2, [r7, #0]
 8010cf8:	1ad3      	subs	r3, r2, r3
 8010cfa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	69db      	ldr	r3, [r3, #28]
 8010d00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010d02:	e022      	b.n	8010d4a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	689b      	ldr	r3, [r3, #8]
 8010d08:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d119      	bne.n	8010d44 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2100      	movs	r1, #0
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7fd fe1b 	bl	800e950 <create_chain>
 8010d1a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	d104      	bne.n	8010d2c <f_lseek+0x28a>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2202      	movs	r2, #2
 8010d26:	755a      	strb	r2, [r3, #21]
 8010d28:	2302      	movs	r3, #2
 8010d2a:	e0bf      	b.n	8010eac <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d32:	d104      	bne.n	8010d3e <f_lseek+0x29c>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2201      	movs	r2, #1
 8010d38:	755a      	strb	r2, [r3, #21]
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	e0b6      	b.n	8010eac <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d42:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d48:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d05d      	beq.n	8010e0c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010d50:	e03a      	b.n	8010dc8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8010d52:	683a      	ldr	r2, [r7, #0]
 8010d54:	69fb      	ldr	r3, [r7, #28]
 8010d56:	1ad3      	subs	r3, r2, r3
 8010d58:	603b      	str	r3, [r7, #0]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	699a      	ldr	r2, [r3, #24]
 8010d5e:	69fb      	ldr	r3, [r7, #28]
 8010d60:	441a      	add	r2, r3
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	7d1b      	ldrb	r3, [r3, #20]
 8010d6a:	f003 0302 	and.w	r3, r3, #2
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d00b      	beq.n	8010d8a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fd fdea 	bl	800e950 <create_chain>
 8010d7c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d108      	bne.n	8010d96 <f_lseek+0x2f4>
							ofs = 0; break;
 8010d84:	2300      	movs	r3, #0
 8010d86:	603b      	str	r3, [r7, #0]
 8010d88:	e022      	b.n	8010dd0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fd fbe8 	bl	800e564 <get_fat>
 8010d94:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d9c:	d104      	bne.n	8010da8 <f_lseek+0x306>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2201      	movs	r2, #1
 8010da2:	755a      	strb	r2, [r3, #21]
 8010da4:	2301      	movs	r3, #1
 8010da6:	e081      	b.n	8010eac <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d904      	bls.n	8010db8 <f_lseek+0x316>
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	699b      	ldr	r3, [r3, #24]
 8010db2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d304      	bcc.n	8010dc2 <f_lseek+0x320>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2202      	movs	r2, #2
 8010dbc:	755a      	strb	r2, [r3, #21]
 8010dbe:	2302      	movs	r3, #2
 8010dc0:	e074      	b.n	8010eac <f_lseek+0x40a>
					fp->clust = clst;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010dc6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010dc8:	683a      	ldr	r2, [r7, #0]
 8010dca:	69fb      	ldr	r3, [r7, #28]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d8c0      	bhi.n	8010d52 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	699a      	ldr	r2, [r3, #24]
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	441a      	add	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d012      	beq.n	8010e0c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7fd fb9b 	bl	800e526 <clust2sect>
 8010df0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d104      	bne.n	8010e02 <f_lseek+0x360>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	755a      	strb	r2, [r3, #21]
 8010dfe:	2302      	movs	r3, #2
 8010e00:	e054      	b.n	8010eac <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	0a5b      	lsrs	r3, r3, #9
 8010e06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e08:	4413      	add	r3, r2
 8010e0a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	699a      	ldr	r2, [r3, #24]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d90a      	bls.n	8010e2e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	699a      	ldr	r2, [r3, #24]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	7d1b      	ldrb	r3, [r3, #20]
 8010e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e28:	b2da      	uxtb	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	699b      	ldr	r3, [r3, #24]
 8010e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d036      	beq.n	8010ea8 <f_lseek+0x406>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6a1b      	ldr	r3, [r3, #32]
 8010e3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d031      	beq.n	8010ea8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	7d1b      	ldrb	r3, [r3, #20]
 8010e48:	b25b      	sxtb	r3, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	da18      	bge.n	8010e80 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	7858      	ldrb	r0, [r3, #1]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6a1a      	ldr	r2, [r3, #32]
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	f7fd f89f 	bl	800dfa0 <disk_write>
 8010e62:	4603      	mov	r3, r0
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d004      	beq.n	8010e72 <f_lseek+0x3d0>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	755a      	strb	r2, [r3, #21]
 8010e6e:	2301      	movs	r3, #1
 8010e70:	e01c      	b.n	8010eac <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	7d1b      	ldrb	r3, [r3, #20]
 8010e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e7a:	b2da      	uxtb	r2, r3
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	7858      	ldrb	r0, [r3, #1]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e8e:	f7fd f867 	bl	800df60 <disk_read>
 8010e92:	4603      	mov	r3, r0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d004      	beq.n	8010ea2 <f_lseek+0x400>
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2201      	movs	r2, #1
 8010e9c:	755a      	strb	r2, [r3, #21]
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	e004      	b.n	8010eac <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ea6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010ea8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3740      	adds	r7, #64	@ 0x40
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b086      	sub	sp, #24
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d101      	bne.n	8010ec8 <f_opendir+0x14>
 8010ec4:	2309      	movs	r3, #9
 8010ec6:	e064      	b.n	8010f92 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010ecc:	f107 010c 	add.w	r1, r7, #12
 8010ed0:	463b      	mov	r3, r7
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff f81f 	bl	800ff18 <find_volume>
 8010eda:	4603      	mov	r3, r0
 8010edc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010ede:	7dfb      	ldrb	r3, [r7, #23]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d14f      	bne.n	8010f84 <f_opendir+0xd0>
		obj->fs = fs;
 8010ee4:	68fa      	ldr	r2, [r7, #12]
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	4619      	mov	r1, r3
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f7fe ff06 	bl	800fd00 <follow_path>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010ef8:	7dfb      	ldrb	r3, [r7, #23]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d13d      	bne.n	8010f7a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010f04:	b25b      	sxtb	r3, r3
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	db12      	blt.n	8010f30 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	799b      	ldrb	r3, [r3, #6]
 8010f0e:	f003 0310 	and.w	r3, r3, #16
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d00a      	beq.n	8010f2c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6a1b      	ldr	r3, [r3, #32]
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	4610      	mov	r0, r2
 8010f20:	f7fd ff69 	bl	800edf6 <ld_clust>
 8010f24:	4602      	mov	r2, r0
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	609a      	str	r2, [r3, #8]
 8010f2a:	e001      	b.n	8010f30 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010f2c:	2305      	movs	r3, #5
 8010f2e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010f30:	7dfb      	ldrb	r3, [r7, #23]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d121      	bne.n	8010f7a <f_opendir+0xc6>
				obj->id = fs->id;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	88da      	ldrh	r2, [r3, #6]
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010f3e:	2100      	movs	r1, #0
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f7fd fdd1 	bl	800eae8 <dir_sdi>
 8010f46:	4603      	mov	r3, r0
 8010f48:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010f4a:	7dfb      	ldrb	r3, [r7, #23]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d114      	bne.n	8010f7a <f_opendir+0xc6>
					if (obj->sclust) {
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	689b      	ldr	r3, [r3, #8]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00d      	beq.n	8010f74 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010f58:	2100      	movs	r1, #0
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f7fd f9c0 	bl	800e2e0 <inc_lock>
 8010f60:	4602      	mov	r2, r0
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	691b      	ldr	r3, [r3, #16]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d105      	bne.n	8010f7a <f_opendir+0xc6>
 8010f6e:	2312      	movs	r3, #18
 8010f70:	75fb      	strb	r3, [r7, #23]
 8010f72:	e002      	b.n	8010f7a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	2200      	movs	r2, #0
 8010f78:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010f7a:	7dfb      	ldrb	r3, [r7, #23]
 8010f7c:	2b04      	cmp	r3, #4
 8010f7e:	d101      	bne.n	8010f84 <f_opendir+0xd0>
 8010f80:	2305      	movs	r3, #5
 8010f82:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010f84:	7dfb      	ldrb	r3, [r7, #23]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d002      	beq.n	8010f90 <f_opendir+0xdc>
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3718      	adds	r7, #24
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010f9a:	b580      	push	{r7, lr}
 8010f9c:	b084      	sub	sp, #16
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
 8010fa2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f107 0208 	add.w	r2, r7, #8
 8010faa:	4611      	mov	r1, r2
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7ff fa03 	bl	80103b8 <validate>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010fb6:	7bfb      	ldrb	r3, [r7, #15]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d126      	bne.n	801100a <f_readdir+0x70>
		if (!fno) {
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d106      	bne.n	8010fd0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010fc2:	2100      	movs	r1, #0
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f7fd fd8f 	bl	800eae8 <dir_sdi>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	73fb      	strb	r3, [r7, #15]
 8010fce:	e01c      	b.n	801100a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010fd0:	2100      	movs	r1, #0
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7fe f94f 	bl	800f276 <dir_read>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010fdc:	7bfb      	ldrb	r3, [r7, #15]
 8010fde:	2b04      	cmp	r3, #4
 8010fe0:	d101      	bne.n	8010fe6 <f_readdir+0x4c>
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010fe6:	7bfb      	ldrb	r3, [r7, #15]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d10e      	bne.n	801100a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010fec:	6839      	ldr	r1, [r7, #0]
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f7fe fba0 	bl	800f734 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010ff4:	2100      	movs	r1, #0
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f7fd fdf1 	bl	800ebde <dir_next>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011000:	7bfb      	ldrb	r3, [r7, #15]
 8011002:	2b04      	cmp	r3, #4
 8011004:	d101      	bne.n	801100a <f_readdir+0x70>
 8011006:	2300      	movs	r3, #0
 8011008:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801100a:	7bfb      	ldrb	r3, [r7, #15]
}
 801100c:	4618      	mov	r0, r3
 801100e:	3710      	adds	r7, #16
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011014:	b480      	push	{r7}
 8011016:	b087      	sub	sp, #28
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	4613      	mov	r3, r2
 8011020:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011022:	2301      	movs	r3, #1
 8011024:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011026:	2300      	movs	r3, #0
 8011028:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801102a:	4b1f      	ldr	r3, [pc, #124]	@ (80110a8 <FATFS_LinkDriverEx+0x94>)
 801102c:	7a5b      	ldrb	r3, [r3, #9]
 801102e:	b2db      	uxtb	r3, r3
 8011030:	2b00      	cmp	r3, #0
 8011032:	d131      	bne.n	8011098 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011034:	4b1c      	ldr	r3, [pc, #112]	@ (80110a8 <FATFS_LinkDriverEx+0x94>)
 8011036:	7a5b      	ldrb	r3, [r3, #9]
 8011038:	b2db      	uxtb	r3, r3
 801103a:	461a      	mov	r2, r3
 801103c:	4b1a      	ldr	r3, [pc, #104]	@ (80110a8 <FATFS_LinkDriverEx+0x94>)
 801103e:	2100      	movs	r1, #0
 8011040:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011042:	4b19      	ldr	r3, [pc, #100]	@ (80110a8 <FATFS_LinkDriverEx+0x94>)
 8011044:	7a5b      	ldrb	r3, [r3, #9]
 8011046:	b2db      	uxtb	r3, r3
 8011048:	4a17      	ldr	r2, [pc, #92]	@ (80110a8 <FATFS_LinkDriverEx+0x94>)
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	4413      	add	r3, r2
 801104e:	68fa      	ldr	r2, [r7, #12]
 8011050:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011052:	4b15      	ldr	r3, [pc, #84]	@ (80110a8 <FATFS_LinkDriverEx+0x94>)
 8011054:	7a5b      	ldrb	r3, [r3, #9]
 8011056:	b2db      	uxtb	r3, r3
 8011058:	461a      	mov	r2, r3
 801105a:	4b13      	ldr	r3, [pc, #76]	@ (80110a8 <FATFS_LinkDriverEx+0x94>)
 801105c:	4413      	add	r3, r2
 801105e:	79fa      	ldrb	r2, [r7, #7]
 8011060:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011062:	4b11      	ldr	r3, [pc, #68]	@ (80110a8 <FATFS_LinkDriverEx+0x94>)
 8011064:	7a5b      	ldrb	r3, [r3, #9]
 8011066:	b2db      	uxtb	r3, r3
 8011068:	1c5a      	adds	r2, r3, #1
 801106a:	b2d1      	uxtb	r1, r2
 801106c:	4a0e      	ldr	r2, [pc, #56]	@ (80110a8 <FATFS_LinkDriverEx+0x94>)
 801106e:	7251      	strb	r1, [r2, #9]
 8011070:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011072:	7dbb      	ldrb	r3, [r7, #22]
 8011074:	3330      	adds	r3, #48	@ 0x30
 8011076:	b2da      	uxtb	r2, r3
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	3301      	adds	r3, #1
 8011080:	223a      	movs	r2, #58	@ 0x3a
 8011082:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	3302      	adds	r3, #2
 8011088:	222f      	movs	r2, #47	@ 0x2f
 801108a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	3303      	adds	r3, #3
 8011090:	2200      	movs	r2, #0
 8011092:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011094:	2300      	movs	r3, #0
 8011096:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011098:	7dfb      	ldrb	r3, [r7, #23]
}
 801109a:	4618      	mov	r0, r3
 801109c:	371c      	adds	r7, #28
 801109e:	46bd      	mov	sp, r7
 80110a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a4:	4770      	bx	lr
 80110a6:	bf00      	nop
 80110a8:	24004b98 	.word	0x24004b98

080110ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80110b6:	2200      	movs	r2, #0
 80110b8:	6839      	ldr	r1, [r7, #0]
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f7ff ffaa 	bl	8011014 <FATFS_LinkDriverEx>
 80110c0:	4603      	mov	r3, r0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
	...

080110cc <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80110cc:	b480      	push	{r7}
 80110ce:	b089      	sub	sp, #36	@ 0x24
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	4603      	mov	r3, r0
 80110d4:	6039      	str	r1, [r7, #0]
 80110d6:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 80110d8:	88fb      	ldrh	r3, [r7, #6]
 80110da:	2b7f      	cmp	r3, #127	@ 0x7f
 80110dc:	d802      	bhi.n	80110e4 <ff_convert+0x18>
		c = chr;
 80110de:	88fb      	ldrh	r3, [r7, #6]
 80110e0:	837b      	strh	r3, [r7, #26]
 80110e2:	e046      	b.n	8011172 <ff_convert+0xa6>
	} else {
		if (dir) {		/* OEM code to unicode */
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d005      	beq.n	80110f6 <ff_convert+0x2a>
			p = oem2uni;
 80110ea:	4b25      	ldr	r3, [pc, #148]	@ (8011180 <ff_convert+0xb4>)
 80110ec:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 80110ee:	f245 5320 	movw	r3, #21792	@ 0x5520
 80110f2:	60bb      	str	r3, [r7, #8]
 80110f4:	e004      	b.n	8011100 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 80110f6:	4b23      	ldr	r3, [pc, #140]	@ (8011184 <ff_convert+0xb8>)
 80110f8:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 80110fa:	f245 5320 	movw	r3, #21792	@ 0x5520
 80110fe:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 8011100:	2300      	movs	r3, #0
 8011102:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 8011104:	2310      	movs	r3, #16
 8011106:	613b      	str	r3, [r7, #16]
 8011108:	e022      	b.n	8011150 <ff_convert+0x84>
			i = li + (hi - li) / 2;
 801110a:	68ba      	ldr	r2, [r7, #8]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	1ad3      	subs	r3, r2, r3
 8011110:	2b00      	cmp	r3, #0
 8011112:	da00      	bge.n	8011116 <ff_convert+0x4a>
 8011114:	3301      	adds	r3, #1
 8011116:	105b      	asrs	r3, r3, #1
 8011118:	461a      	mov	r2, r3
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	4413      	add	r3, r2
 801111e:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	69fa      	ldr	r2, [r7, #28]
 8011126:	4413      	add	r3, r2
 8011128:	881b      	ldrh	r3, [r3, #0]
 801112a:	88fa      	ldrh	r2, [r7, #6]
 801112c:	429a      	cmp	r2, r3
 801112e:	d013      	beq.n	8011158 <ff_convert+0x8c>
			if (chr > p[i * 2])
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	69fa      	ldr	r2, [r7, #28]
 8011136:	4413      	add	r3, r2
 8011138:	881b      	ldrh	r3, [r3, #0]
 801113a:	88fa      	ldrh	r2, [r7, #6]
 801113c:	429a      	cmp	r2, r3
 801113e:	d902      	bls.n	8011146 <ff_convert+0x7a>
				li = i;
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	60fb      	str	r3, [r7, #12]
 8011144:	e001      	b.n	801114a <ff_convert+0x7e>
			else
				hi = i;
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	3b01      	subs	r3, #1
 801114e:	613b      	str	r3, [r7, #16]
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d1d9      	bne.n	801110a <ff_convert+0x3e>
 8011156:	e000      	b.n	801115a <ff_convert+0x8e>
			if (chr == p[i * 2]) break;
 8011158:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d006      	beq.n	801116e <ff_convert+0xa2>
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	3302      	adds	r3, #2
 8011166:	69fa      	ldr	r2, [r7, #28]
 8011168:	4413      	add	r3, r2
 801116a:	881b      	ldrh	r3, [r3, #0]
 801116c:	e000      	b.n	8011170 <ff_convert+0xa4>
 801116e:	2300      	movs	r3, #0
 8011170:	837b      	strh	r3, [r7, #26]
	}

	return c;
 8011172:	8b7b      	ldrh	r3, [r7, #26]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3724      	adds	r7, #36	@ 0x24
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr
 8011180:	08027a00 	.word	0x08027a00
 8011184:	0801257c 	.word	0x0801257c

08011188 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011188:	b480      	push	{r7}
 801118a:	b087      	sub	sp, #28
 801118c:	af00      	add	r7, sp, #0
 801118e:	4603      	mov	r3, r0
 8011190:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011192:	88fb      	ldrh	r3, [r7, #6]
 8011194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011198:	d201      	bcs.n	801119e <ff_wtoupper+0x16>
 801119a:	4b3e      	ldr	r3, [pc, #248]	@ (8011294 <ff_wtoupper+0x10c>)
 801119c:	e000      	b.n	80111a0 <ff_wtoupper+0x18>
 801119e:	4b3e      	ldr	r3, [pc, #248]	@ (8011298 <ff_wtoupper+0x110>)
 80111a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	1c9a      	adds	r2, r3, #2
 80111a6:	617a      	str	r2, [r7, #20]
 80111a8:	881b      	ldrh	r3, [r3, #0]
 80111aa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80111ac:	8a7b      	ldrh	r3, [r7, #18]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d068      	beq.n	8011284 <ff_wtoupper+0xfc>
 80111b2:	88fa      	ldrh	r2, [r7, #6]
 80111b4:	8a7b      	ldrh	r3, [r7, #18]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d364      	bcc.n	8011284 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	1c9a      	adds	r2, r3, #2
 80111be:	617a      	str	r2, [r7, #20]
 80111c0:	881b      	ldrh	r3, [r3, #0]
 80111c2:	823b      	strh	r3, [r7, #16]
 80111c4:	8a3b      	ldrh	r3, [r7, #16]
 80111c6:	0a1b      	lsrs	r3, r3, #8
 80111c8:	81fb      	strh	r3, [r7, #14]
 80111ca:	8a3b      	ldrh	r3, [r7, #16]
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80111d0:	88fa      	ldrh	r2, [r7, #6]
 80111d2:	8a79      	ldrh	r1, [r7, #18]
 80111d4:	8a3b      	ldrh	r3, [r7, #16]
 80111d6:	440b      	add	r3, r1
 80111d8:	429a      	cmp	r2, r3
 80111da:	da49      	bge.n	8011270 <ff_wtoupper+0xe8>
			switch (cmd) {
 80111dc:	89fb      	ldrh	r3, [r7, #14]
 80111de:	2b08      	cmp	r3, #8
 80111e0:	d84f      	bhi.n	8011282 <ff_wtoupper+0xfa>
 80111e2:	a201      	add	r2, pc, #4	@ (adr r2, 80111e8 <ff_wtoupper+0x60>)
 80111e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111e8:	0801120d 	.word	0x0801120d
 80111ec:	0801121f 	.word	0x0801121f
 80111f0:	08011235 	.word	0x08011235
 80111f4:	0801123d 	.word	0x0801123d
 80111f8:	08011245 	.word	0x08011245
 80111fc:	0801124d 	.word	0x0801124d
 8011200:	08011255 	.word	0x08011255
 8011204:	0801125d 	.word	0x0801125d
 8011208:	08011265 	.word	0x08011265
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801120c:	88fa      	ldrh	r2, [r7, #6]
 801120e:	8a7b      	ldrh	r3, [r7, #18]
 8011210:	1ad3      	subs	r3, r2, r3
 8011212:	005b      	lsls	r3, r3, #1
 8011214:	697a      	ldr	r2, [r7, #20]
 8011216:	4413      	add	r3, r2
 8011218:	881b      	ldrh	r3, [r3, #0]
 801121a:	80fb      	strh	r3, [r7, #6]
 801121c:	e027      	b.n	801126e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801121e:	88fa      	ldrh	r2, [r7, #6]
 8011220:	8a7b      	ldrh	r3, [r7, #18]
 8011222:	1ad3      	subs	r3, r2, r3
 8011224:	b29b      	uxth	r3, r3
 8011226:	f003 0301 	and.w	r3, r3, #1
 801122a:	b29b      	uxth	r3, r3
 801122c:	88fa      	ldrh	r2, [r7, #6]
 801122e:	1ad3      	subs	r3, r2, r3
 8011230:	80fb      	strh	r3, [r7, #6]
 8011232:	e01c      	b.n	801126e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011234:	88fb      	ldrh	r3, [r7, #6]
 8011236:	3b10      	subs	r3, #16
 8011238:	80fb      	strh	r3, [r7, #6]
 801123a:	e018      	b.n	801126e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801123c:	88fb      	ldrh	r3, [r7, #6]
 801123e:	3b20      	subs	r3, #32
 8011240:	80fb      	strh	r3, [r7, #6]
 8011242:	e014      	b.n	801126e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011244:	88fb      	ldrh	r3, [r7, #6]
 8011246:	3b30      	subs	r3, #48	@ 0x30
 8011248:	80fb      	strh	r3, [r7, #6]
 801124a:	e010      	b.n	801126e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801124c:	88fb      	ldrh	r3, [r7, #6]
 801124e:	3b1a      	subs	r3, #26
 8011250:	80fb      	strh	r3, [r7, #6]
 8011252:	e00c      	b.n	801126e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011254:	88fb      	ldrh	r3, [r7, #6]
 8011256:	3308      	adds	r3, #8
 8011258:	80fb      	strh	r3, [r7, #6]
 801125a:	e008      	b.n	801126e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801125c:	88fb      	ldrh	r3, [r7, #6]
 801125e:	3b50      	subs	r3, #80	@ 0x50
 8011260:	80fb      	strh	r3, [r7, #6]
 8011262:	e004      	b.n	801126e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011264:	88fb      	ldrh	r3, [r7, #6]
 8011266:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801126a:	80fb      	strh	r3, [r7, #6]
 801126c:	bf00      	nop
			}
			break;
 801126e:	e008      	b.n	8011282 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011270:	89fb      	ldrh	r3, [r7, #14]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d195      	bne.n	80111a2 <ff_wtoupper+0x1a>
 8011276:	8a3b      	ldrh	r3, [r7, #16]
 8011278:	005b      	lsls	r3, r3, #1
 801127a:	697a      	ldr	r2, [r7, #20]
 801127c:	4413      	add	r3, r2
 801127e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011280:	e78f      	b.n	80111a2 <ff_wtoupper+0x1a>
			break;
 8011282:	bf00      	nop
	}

	return chr;
 8011284:	88fb      	ldrh	r3, [r7, #6]
}
 8011286:	4618      	mov	r0, r3
 8011288:	371c      	adds	r7, #28
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr
 8011292:	bf00      	nop
 8011294:	0803ce84 	.word	0x0803ce84
 8011298:	0803d078 	.word	0x0803d078

0801129c <std>:
 801129c:	2300      	movs	r3, #0
 801129e:	b510      	push	{r4, lr}
 80112a0:	4604      	mov	r4, r0
 80112a2:	e9c0 3300 	strd	r3, r3, [r0]
 80112a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112aa:	6083      	str	r3, [r0, #8]
 80112ac:	8181      	strh	r1, [r0, #12]
 80112ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80112b0:	81c2      	strh	r2, [r0, #14]
 80112b2:	6183      	str	r3, [r0, #24]
 80112b4:	4619      	mov	r1, r3
 80112b6:	2208      	movs	r2, #8
 80112b8:	305c      	adds	r0, #92	@ 0x5c
 80112ba:	f000 faad 	bl	8011818 <memset>
 80112be:	4b0d      	ldr	r3, [pc, #52]	@ (80112f4 <std+0x58>)
 80112c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80112c2:	4b0d      	ldr	r3, [pc, #52]	@ (80112f8 <std+0x5c>)
 80112c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80112c6:	4b0d      	ldr	r3, [pc, #52]	@ (80112fc <std+0x60>)
 80112c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80112ca:	4b0d      	ldr	r3, [pc, #52]	@ (8011300 <std+0x64>)
 80112cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80112ce:	4b0d      	ldr	r3, [pc, #52]	@ (8011304 <std+0x68>)
 80112d0:	6224      	str	r4, [r4, #32]
 80112d2:	429c      	cmp	r4, r3
 80112d4:	d006      	beq.n	80112e4 <std+0x48>
 80112d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80112da:	4294      	cmp	r4, r2
 80112dc:	d002      	beq.n	80112e4 <std+0x48>
 80112de:	33d0      	adds	r3, #208	@ 0xd0
 80112e0:	429c      	cmp	r4, r3
 80112e2:	d105      	bne.n	80112f0 <std+0x54>
 80112e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80112e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112ec:	f000 bb0c 	b.w	8011908 <__retarget_lock_init_recursive>
 80112f0:	bd10      	pop	{r4, pc}
 80112f2:	bf00      	nop
 80112f4:	08011669 	.word	0x08011669
 80112f8:	0801168b 	.word	0x0801168b
 80112fc:	080116c3 	.word	0x080116c3
 8011300:	080116e7 	.word	0x080116e7
 8011304:	24004ba4 	.word	0x24004ba4

08011308 <stdio_exit_handler>:
 8011308:	4a02      	ldr	r2, [pc, #8]	@ (8011314 <stdio_exit_handler+0xc>)
 801130a:	4903      	ldr	r1, [pc, #12]	@ (8011318 <stdio_exit_handler+0x10>)
 801130c:	4803      	ldr	r0, [pc, #12]	@ (801131c <stdio_exit_handler+0x14>)
 801130e:	f000 b869 	b.w	80113e4 <_fwalk_sglue>
 8011312:	bf00      	nop
 8011314:	24000084 	.word	0x24000084
 8011318:	080121d1 	.word	0x080121d1
 801131c:	24000094 	.word	0x24000094

08011320 <cleanup_stdio>:
 8011320:	6841      	ldr	r1, [r0, #4]
 8011322:	4b0c      	ldr	r3, [pc, #48]	@ (8011354 <cleanup_stdio+0x34>)
 8011324:	4299      	cmp	r1, r3
 8011326:	b510      	push	{r4, lr}
 8011328:	4604      	mov	r4, r0
 801132a:	d001      	beq.n	8011330 <cleanup_stdio+0x10>
 801132c:	f000 ff50 	bl	80121d0 <_fflush_r>
 8011330:	68a1      	ldr	r1, [r4, #8]
 8011332:	4b09      	ldr	r3, [pc, #36]	@ (8011358 <cleanup_stdio+0x38>)
 8011334:	4299      	cmp	r1, r3
 8011336:	d002      	beq.n	801133e <cleanup_stdio+0x1e>
 8011338:	4620      	mov	r0, r4
 801133a:	f000 ff49 	bl	80121d0 <_fflush_r>
 801133e:	68e1      	ldr	r1, [r4, #12]
 8011340:	4b06      	ldr	r3, [pc, #24]	@ (801135c <cleanup_stdio+0x3c>)
 8011342:	4299      	cmp	r1, r3
 8011344:	d004      	beq.n	8011350 <cleanup_stdio+0x30>
 8011346:	4620      	mov	r0, r4
 8011348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801134c:	f000 bf40 	b.w	80121d0 <_fflush_r>
 8011350:	bd10      	pop	{r4, pc}
 8011352:	bf00      	nop
 8011354:	24004ba4 	.word	0x24004ba4
 8011358:	24004c0c 	.word	0x24004c0c
 801135c:	24004c74 	.word	0x24004c74

08011360 <global_stdio_init.part.0>:
 8011360:	b510      	push	{r4, lr}
 8011362:	4b0b      	ldr	r3, [pc, #44]	@ (8011390 <global_stdio_init.part.0+0x30>)
 8011364:	4c0b      	ldr	r4, [pc, #44]	@ (8011394 <global_stdio_init.part.0+0x34>)
 8011366:	4a0c      	ldr	r2, [pc, #48]	@ (8011398 <global_stdio_init.part.0+0x38>)
 8011368:	601a      	str	r2, [r3, #0]
 801136a:	4620      	mov	r0, r4
 801136c:	2200      	movs	r2, #0
 801136e:	2104      	movs	r1, #4
 8011370:	f7ff ff94 	bl	801129c <std>
 8011374:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011378:	2201      	movs	r2, #1
 801137a:	2109      	movs	r1, #9
 801137c:	f7ff ff8e 	bl	801129c <std>
 8011380:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011384:	2202      	movs	r2, #2
 8011386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801138a:	2112      	movs	r1, #18
 801138c:	f7ff bf86 	b.w	801129c <std>
 8011390:	24004cdc 	.word	0x24004cdc
 8011394:	24004ba4 	.word	0x24004ba4
 8011398:	08011309 	.word	0x08011309

0801139c <__sfp_lock_acquire>:
 801139c:	4801      	ldr	r0, [pc, #4]	@ (80113a4 <__sfp_lock_acquire+0x8>)
 801139e:	f000 bab4 	b.w	801190a <__retarget_lock_acquire_recursive>
 80113a2:	bf00      	nop
 80113a4:	24004ce5 	.word	0x24004ce5

080113a8 <__sfp_lock_release>:
 80113a8:	4801      	ldr	r0, [pc, #4]	@ (80113b0 <__sfp_lock_release+0x8>)
 80113aa:	f000 baaf 	b.w	801190c <__retarget_lock_release_recursive>
 80113ae:	bf00      	nop
 80113b0:	24004ce5 	.word	0x24004ce5

080113b4 <__sinit>:
 80113b4:	b510      	push	{r4, lr}
 80113b6:	4604      	mov	r4, r0
 80113b8:	f7ff fff0 	bl	801139c <__sfp_lock_acquire>
 80113bc:	6a23      	ldr	r3, [r4, #32]
 80113be:	b11b      	cbz	r3, 80113c8 <__sinit+0x14>
 80113c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113c4:	f7ff bff0 	b.w	80113a8 <__sfp_lock_release>
 80113c8:	4b04      	ldr	r3, [pc, #16]	@ (80113dc <__sinit+0x28>)
 80113ca:	6223      	str	r3, [r4, #32]
 80113cc:	4b04      	ldr	r3, [pc, #16]	@ (80113e0 <__sinit+0x2c>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d1f5      	bne.n	80113c0 <__sinit+0xc>
 80113d4:	f7ff ffc4 	bl	8011360 <global_stdio_init.part.0>
 80113d8:	e7f2      	b.n	80113c0 <__sinit+0xc>
 80113da:	bf00      	nop
 80113dc:	08011321 	.word	0x08011321
 80113e0:	24004cdc 	.word	0x24004cdc

080113e4 <_fwalk_sglue>:
 80113e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113e8:	4607      	mov	r7, r0
 80113ea:	4688      	mov	r8, r1
 80113ec:	4614      	mov	r4, r2
 80113ee:	2600      	movs	r6, #0
 80113f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80113f4:	f1b9 0901 	subs.w	r9, r9, #1
 80113f8:	d505      	bpl.n	8011406 <_fwalk_sglue+0x22>
 80113fa:	6824      	ldr	r4, [r4, #0]
 80113fc:	2c00      	cmp	r4, #0
 80113fe:	d1f7      	bne.n	80113f0 <_fwalk_sglue+0xc>
 8011400:	4630      	mov	r0, r6
 8011402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011406:	89ab      	ldrh	r3, [r5, #12]
 8011408:	2b01      	cmp	r3, #1
 801140a:	d907      	bls.n	801141c <_fwalk_sglue+0x38>
 801140c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011410:	3301      	adds	r3, #1
 8011412:	d003      	beq.n	801141c <_fwalk_sglue+0x38>
 8011414:	4629      	mov	r1, r5
 8011416:	4638      	mov	r0, r7
 8011418:	47c0      	blx	r8
 801141a:	4306      	orrs	r6, r0
 801141c:	3568      	adds	r5, #104	@ 0x68
 801141e:	e7e9      	b.n	80113f4 <_fwalk_sglue+0x10>

08011420 <iprintf>:
 8011420:	b40f      	push	{r0, r1, r2, r3}
 8011422:	b507      	push	{r0, r1, r2, lr}
 8011424:	4906      	ldr	r1, [pc, #24]	@ (8011440 <iprintf+0x20>)
 8011426:	ab04      	add	r3, sp, #16
 8011428:	6808      	ldr	r0, [r1, #0]
 801142a:	f853 2b04 	ldr.w	r2, [r3], #4
 801142e:	6881      	ldr	r1, [r0, #8]
 8011430:	9301      	str	r3, [sp, #4]
 8011432:	f000 fba5 	bl	8011b80 <_vfiprintf_r>
 8011436:	b003      	add	sp, #12
 8011438:	f85d eb04 	ldr.w	lr, [sp], #4
 801143c:	b004      	add	sp, #16
 801143e:	4770      	bx	lr
 8011440:	24000090 	.word	0x24000090

08011444 <_puts_r>:
 8011444:	6a03      	ldr	r3, [r0, #32]
 8011446:	b570      	push	{r4, r5, r6, lr}
 8011448:	6884      	ldr	r4, [r0, #8]
 801144a:	4605      	mov	r5, r0
 801144c:	460e      	mov	r6, r1
 801144e:	b90b      	cbnz	r3, 8011454 <_puts_r+0x10>
 8011450:	f7ff ffb0 	bl	80113b4 <__sinit>
 8011454:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011456:	07db      	lsls	r3, r3, #31
 8011458:	d405      	bmi.n	8011466 <_puts_r+0x22>
 801145a:	89a3      	ldrh	r3, [r4, #12]
 801145c:	0598      	lsls	r0, r3, #22
 801145e:	d402      	bmi.n	8011466 <_puts_r+0x22>
 8011460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011462:	f000 fa52 	bl	801190a <__retarget_lock_acquire_recursive>
 8011466:	89a3      	ldrh	r3, [r4, #12]
 8011468:	0719      	lsls	r1, r3, #28
 801146a:	d502      	bpl.n	8011472 <_puts_r+0x2e>
 801146c:	6923      	ldr	r3, [r4, #16]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d135      	bne.n	80114de <_puts_r+0x9a>
 8011472:	4621      	mov	r1, r4
 8011474:	4628      	mov	r0, r5
 8011476:	f000 f979 	bl	801176c <__swsetup_r>
 801147a:	b380      	cbz	r0, 80114de <_puts_r+0x9a>
 801147c:	f04f 35ff 	mov.w	r5, #4294967295
 8011480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011482:	07da      	lsls	r2, r3, #31
 8011484:	d405      	bmi.n	8011492 <_puts_r+0x4e>
 8011486:	89a3      	ldrh	r3, [r4, #12]
 8011488:	059b      	lsls	r3, r3, #22
 801148a:	d402      	bmi.n	8011492 <_puts_r+0x4e>
 801148c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801148e:	f000 fa3d 	bl	801190c <__retarget_lock_release_recursive>
 8011492:	4628      	mov	r0, r5
 8011494:	bd70      	pop	{r4, r5, r6, pc}
 8011496:	2b00      	cmp	r3, #0
 8011498:	da04      	bge.n	80114a4 <_puts_r+0x60>
 801149a:	69a2      	ldr	r2, [r4, #24]
 801149c:	429a      	cmp	r2, r3
 801149e:	dc17      	bgt.n	80114d0 <_puts_r+0x8c>
 80114a0:	290a      	cmp	r1, #10
 80114a2:	d015      	beq.n	80114d0 <_puts_r+0x8c>
 80114a4:	6823      	ldr	r3, [r4, #0]
 80114a6:	1c5a      	adds	r2, r3, #1
 80114a8:	6022      	str	r2, [r4, #0]
 80114aa:	7019      	strb	r1, [r3, #0]
 80114ac:	68a3      	ldr	r3, [r4, #8]
 80114ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80114b2:	3b01      	subs	r3, #1
 80114b4:	60a3      	str	r3, [r4, #8]
 80114b6:	2900      	cmp	r1, #0
 80114b8:	d1ed      	bne.n	8011496 <_puts_r+0x52>
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	da11      	bge.n	80114e2 <_puts_r+0x9e>
 80114be:	4622      	mov	r2, r4
 80114c0:	210a      	movs	r1, #10
 80114c2:	4628      	mov	r0, r5
 80114c4:	f000 f913 	bl	80116ee <__swbuf_r>
 80114c8:	3001      	adds	r0, #1
 80114ca:	d0d7      	beq.n	801147c <_puts_r+0x38>
 80114cc:	250a      	movs	r5, #10
 80114ce:	e7d7      	b.n	8011480 <_puts_r+0x3c>
 80114d0:	4622      	mov	r2, r4
 80114d2:	4628      	mov	r0, r5
 80114d4:	f000 f90b 	bl	80116ee <__swbuf_r>
 80114d8:	3001      	adds	r0, #1
 80114da:	d1e7      	bne.n	80114ac <_puts_r+0x68>
 80114dc:	e7ce      	b.n	801147c <_puts_r+0x38>
 80114de:	3e01      	subs	r6, #1
 80114e0:	e7e4      	b.n	80114ac <_puts_r+0x68>
 80114e2:	6823      	ldr	r3, [r4, #0]
 80114e4:	1c5a      	adds	r2, r3, #1
 80114e6:	6022      	str	r2, [r4, #0]
 80114e8:	220a      	movs	r2, #10
 80114ea:	701a      	strb	r2, [r3, #0]
 80114ec:	e7ee      	b.n	80114cc <_puts_r+0x88>
	...

080114f0 <puts>:
 80114f0:	4b02      	ldr	r3, [pc, #8]	@ (80114fc <puts+0xc>)
 80114f2:	4601      	mov	r1, r0
 80114f4:	6818      	ldr	r0, [r3, #0]
 80114f6:	f7ff bfa5 	b.w	8011444 <_puts_r>
 80114fa:	bf00      	nop
 80114fc:	24000090 	.word	0x24000090

08011500 <setvbuf>:
 8011500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011504:	461d      	mov	r5, r3
 8011506:	4b57      	ldr	r3, [pc, #348]	@ (8011664 <setvbuf+0x164>)
 8011508:	681f      	ldr	r7, [r3, #0]
 801150a:	4604      	mov	r4, r0
 801150c:	460e      	mov	r6, r1
 801150e:	4690      	mov	r8, r2
 8011510:	b127      	cbz	r7, 801151c <setvbuf+0x1c>
 8011512:	6a3b      	ldr	r3, [r7, #32]
 8011514:	b913      	cbnz	r3, 801151c <setvbuf+0x1c>
 8011516:	4638      	mov	r0, r7
 8011518:	f7ff ff4c 	bl	80113b4 <__sinit>
 801151c:	f1b8 0f02 	cmp.w	r8, #2
 8011520:	d006      	beq.n	8011530 <setvbuf+0x30>
 8011522:	f1b8 0f01 	cmp.w	r8, #1
 8011526:	f200 809a 	bhi.w	801165e <setvbuf+0x15e>
 801152a:	2d00      	cmp	r5, #0
 801152c:	f2c0 8097 	blt.w	801165e <setvbuf+0x15e>
 8011530:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011532:	07d9      	lsls	r1, r3, #31
 8011534:	d405      	bmi.n	8011542 <setvbuf+0x42>
 8011536:	89a3      	ldrh	r3, [r4, #12]
 8011538:	059a      	lsls	r2, r3, #22
 801153a:	d402      	bmi.n	8011542 <setvbuf+0x42>
 801153c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801153e:	f000 f9e4 	bl	801190a <__retarget_lock_acquire_recursive>
 8011542:	4621      	mov	r1, r4
 8011544:	4638      	mov	r0, r7
 8011546:	f000 fe43 	bl	80121d0 <_fflush_r>
 801154a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801154c:	b141      	cbz	r1, 8011560 <setvbuf+0x60>
 801154e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011552:	4299      	cmp	r1, r3
 8011554:	d002      	beq.n	801155c <setvbuf+0x5c>
 8011556:	4638      	mov	r0, r7
 8011558:	f000 f9e8 	bl	801192c <_free_r>
 801155c:	2300      	movs	r3, #0
 801155e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011560:	2300      	movs	r3, #0
 8011562:	61a3      	str	r3, [r4, #24]
 8011564:	6063      	str	r3, [r4, #4]
 8011566:	89a3      	ldrh	r3, [r4, #12]
 8011568:	061b      	lsls	r3, r3, #24
 801156a:	d503      	bpl.n	8011574 <setvbuf+0x74>
 801156c:	6921      	ldr	r1, [r4, #16]
 801156e:	4638      	mov	r0, r7
 8011570:	f000 f9dc 	bl	801192c <_free_r>
 8011574:	89a3      	ldrh	r3, [r4, #12]
 8011576:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 801157a:	f023 0303 	bic.w	r3, r3, #3
 801157e:	f1b8 0f02 	cmp.w	r8, #2
 8011582:	81a3      	strh	r3, [r4, #12]
 8011584:	d061      	beq.n	801164a <setvbuf+0x14a>
 8011586:	ab01      	add	r3, sp, #4
 8011588:	466a      	mov	r2, sp
 801158a:	4621      	mov	r1, r4
 801158c:	4638      	mov	r0, r7
 801158e:	f000 fe47 	bl	8012220 <__swhatbuf_r>
 8011592:	89a3      	ldrh	r3, [r4, #12]
 8011594:	4318      	orrs	r0, r3
 8011596:	81a0      	strh	r0, [r4, #12]
 8011598:	bb2d      	cbnz	r5, 80115e6 <setvbuf+0xe6>
 801159a:	9d00      	ldr	r5, [sp, #0]
 801159c:	4628      	mov	r0, r5
 801159e:	f000 fa0f 	bl	80119c0 <malloc>
 80115a2:	4606      	mov	r6, r0
 80115a4:	2800      	cmp	r0, #0
 80115a6:	d152      	bne.n	801164e <setvbuf+0x14e>
 80115a8:	f8dd 9000 	ldr.w	r9, [sp]
 80115ac:	45a9      	cmp	r9, r5
 80115ae:	d140      	bne.n	8011632 <setvbuf+0x132>
 80115b0:	f04f 35ff 	mov.w	r5, #4294967295
 80115b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115b8:	f043 0202 	orr.w	r2, r3, #2
 80115bc:	81a2      	strh	r2, [r4, #12]
 80115be:	2200      	movs	r2, #0
 80115c0:	60a2      	str	r2, [r4, #8]
 80115c2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80115c6:	6022      	str	r2, [r4, #0]
 80115c8:	6122      	str	r2, [r4, #16]
 80115ca:	2201      	movs	r2, #1
 80115cc:	6162      	str	r2, [r4, #20]
 80115ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80115d0:	07d6      	lsls	r6, r2, #31
 80115d2:	d404      	bmi.n	80115de <setvbuf+0xde>
 80115d4:	0598      	lsls	r0, r3, #22
 80115d6:	d402      	bmi.n	80115de <setvbuf+0xde>
 80115d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115da:	f000 f997 	bl	801190c <__retarget_lock_release_recursive>
 80115de:	4628      	mov	r0, r5
 80115e0:	b003      	add	sp, #12
 80115e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115e6:	2e00      	cmp	r6, #0
 80115e8:	d0d8      	beq.n	801159c <setvbuf+0x9c>
 80115ea:	6a3b      	ldr	r3, [r7, #32]
 80115ec:	b913      	cbnz	r3, 80115f4 <setvbuf+0xf4>
 80115ee:	4638      	mov	r0, r7
 80115f0:	f7ff fee0 	bl	80113b4 <__sinit>
 80115f4:	f1b8 0f01 	cmp.w	r8, #1
 80115f8:	bf08      	it	eq
 80115fa:	89a3      	ldrheq	r3, [r4, #12]
 80115fc:	6026      	str	r6, [r4, #0]
 80115fe:	bf04      	itt	eq
 8011600:	f043 0301 	orreq.w	r3, r3, #1
 8011604:	81a3      	strheq	r3, [r4, #12]
 8011606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801160a:	f013 0208 	ands.w	r2, r3, #8
 801160e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8011612:	d01e      	beq.n	8011652 <setvbuf+0x152>
 8011614:	07d9      	lsls	r1, r3, #31
 8011616:	bf41      	itttt	mi
 8011618:	2200      	movmi	r2, #0
 801161a:	426d      	negmi	r5, r5
 801161c:	60a2      	strmi	r2, [r4, #8]
 801161e:	61a5      	strmi	r5, [r4, #24]
 8011620:	bf58      	it	pl
 8011622:	60a5      	strpl	r5, [r4, #8]
 8011624:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011626:	07d2      	lsls	r2, r2, #31
 8011628:	d401      	bmi.n	801162e <setvbuf+0x12e>
 801162a:	059b      	lsls	r3, r3, #22
 801162c:	d513      	bpl.n	8011656 <setvbuf+0x156>
 801162e:	2500      	movs	r5, #0
 8011630:	e7d5      	b.n	80115de <setvbuf+0xde>
 8011632:	4648      	mov	r0, r9
 8011634:	f000 f9c4 	bl	80119c0 <malloc>
 8011638:	4606      	mov	r6, r0
 801163a:	2800      	cmp	r0, #0
 801163c:	d0b8      	beq.n	80115b0 <setvbuf+0xb0>
 801163e:	89a3      	ldrh	r3, [r4, #12]
 8011640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011644:	81a3      	strh	r3, [r4, #12]
 8011646:	464d      	mov	r5, r9
 8011648:	e7cf      	b.n	80115ea <setvbuf+0xea>
 801164a:	2500      	movs	r5, #0
 801164c:	e7b2      	b.n	80115b4 <setvbuf+0xb4>
 801164e:	46a9      	mov	r9, r5
 8011650:	e7f5      	b.n	801163e <setvbuf+0x13e>
 8011652:	60a2      	str	r2, [r4, #8]
 8011654:	e7e6      	b.n	8011624 <setvbuf+0x124>
 8011656:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011658:	f000 f958 	bl	801190c <__retarget_lock_release_recursive>
 801165c:	e7e7      	b.n	801162e <setvbuf+0x12e>
 801165e:	f04f 35ff 	mov.w	r5, #4294967295
 8011662:	e7bc      	b.n	80115de <setvbuf+0xde>
 8011664:	24000090 	.word	0x24000090

08011668 <__sread>:
 8011668:	b510      	push	{r4, lr}
 801166a:	460c      	mov	r4, r1
 801166c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011670:	f000 f8fc 	bl	801186c <_read_r>
 8011674:	2800      	cmp	r0, #0
 8011676:	bfab      	itete	ge
 8011678:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801167a:	89a3      	ldrhlt	r3, [r4, #12]
 801167c:	181b      	addge	r3, r3, r0
 801167e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011682:	bfac      	ite	ge
 8011684:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011686:	81a3      	strhlt	r3, [r4, #12]
 8011688:	bd10      	pop	{r4, pc}

0801168a <__swrite>:
 801168a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801168e:	461f      	mov	r7, r3
 8011690:	898b      	ldrh	r3, [r1, #12]
 8011692:	05db      	lsls	r3, r3, #23
 8011694:	4605      	mov	r5, r0
 8011696:	460c      	mov	r4, r1
 8011698:	4616      	mov	r6, r2
 801169a:	d505      	bpl.n	80116a8 <__swrite+0x1e>
 801169c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116a0:	2302      	movs	r3, #2
 80116a2:	2200      	movs	r2, #0
 80116a4:	f000 f8d0 	bl	8011848 <_lseek_r>
 80116a8:	89a3      	ldrh	r3, [r4, #12]
 80116aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80116b2:	81a3      	strh	r3, [r4, #12]
 80116b4:	4632      	mov	r2, r6
 80116b6:	463b      	mov	r3, r7
 80116b8:	4628      	mov	r0, r5
 80116ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116be:	f000 b8e7 	b.w	8011890 <_write_r>

080116c2 <__sseek>:
 80116c2:	b510      	push	{r4, lr}
 80116c4:	460c      	mov	r4, r1
 80116c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116ca:	f000 f8bd 	bl	8011848 <_lseek_r>
 80116ce:	1c43      	adds	r3, r0, #1
 80116d0:	89a3      	ldrh	r3, [r4, #12]
 80116d2:	bf15      	itete	ne
 80116d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80116d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80116da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80116de:	81a3      	strheq	r3, [r4, #12]
 80116e0:	bf18      	it	ne
 80116e2:	81a3      	strhne	r3, [r4, #12]
 80116e4:	bd10      	pop	{r4, pc}

080116e6 <__sclose>:
 80116e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116ea:	f000 b89d 	b.w	8011828 <_close_r>

080116ee <__swbuf_r>:
 80116ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116f0:	460e      	mov	r6, r1
 80116f2:	4614      	mov	r4, r2
 80116f4:	4605      	mov	r5, r0
 80116f6:	b118      	cbz	r0, 8011700 <__swbuf_r+0x12>
 80116f8:	6a03      	ldr	r3, [r0, #32]
 80116fa:	b90b      	cbnz	r3, 8011700 <__swbuf_r+0x12>
 80116fc:	f7ff fe5a 	bl	80113b4 <__sinit>
 8011700:	69a3      	ldr	r3, [r4, #24]
 8011702:	60a3      	str	r3, [r4, #8]
 8011704:	89a3      	ldrh	r3, [r4, #12]
 8011706:	071a      	lsls	r2, r3, #28
 8011708:	d501      	bpl.n	801170e <__swbuf_r+0x20>
 801170a:	6923      	ldr	r3, [r4, #16]
 801170c:	b943      	cbnz	r3, 8011720 <__swbuf_r+0x32>
 801170e:	4621      	mov	r1, r4
 8011710:	4628      	mov	r0, r5
 8011712:	f000 f82b 	bl	801176c <__swsetup_r>
 8011716:	b118      	cbz	r0, 8011720 <__swbuf_r+0x32>
 8011718:	f04f 37ff 	mov.w	r7, #4294967295
 801171c:	4638      	mov	r0, r7
 801171e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011720:	6823      	ldr	r3, [r4, #0]
 8011722:	6922      	ldr	r2, [r4, #16]
 8011724:	1a98      	subs	r0, r3, r2
 8011726:	6963      	ldr	r3, [r4, #20]
 8011728:	b2f6      	uxtb	r6, r6
 801172a:	4283      	cmp	r3, r0
 801172c:	4637      	mov	r7, r6
 801172e:	dc05      	bgt.n	801173c <__swbuf_r+0x4e>
 8011730:	4621      	mov	r1, r4
 8011732:	4628      	mov	r0, r5
 8011734:	f000 fd4c 	bl	80121d0 <_fflush_r>
 8011738:	2800      	cmp	r0, #0
 801173a:	d1ed      	bne.n	8011718 <__swbuf_r+0x2a>
 801173c:	68a3      	ldr	r3, [r4, #8]
 801173e:	3b01      	subs	r3, #1
 8011740:	60a3      	str	r3, [r4, #8]
 8011742:	6823      	ldr	r3, [r4, #0]
 8011744:	1c5a      	adds	r2, r3, #1
 8011746:	6022      	str	r2, [r4, #0]
 8011748:	701e      	strb	r6, [r3, #0]
 801174a:	6962      	ldr	r2, [r4, #20]
 801174c:	1c43      	adds	r3, r0, #1
 801174e:	429a      	cmp	r2, r3
 8011750:	d004      	beq.n	801175c <__swbuf_r+0x6e>
 8011752:	89a3      	ldrh	r3, [r4, #12]
 8011754:	07db      	lsls	r3, r3, #31
 8011756:	d5e1      	bpl.n	801171c <__swbuf_r+0x2e>
 8011758:	2e0a      	cmp	r6, #10
 801175a:	d1df      	bne.n	801171c <__swbuf_r+0x2e>
 801175c:	4621      	mov	r1, r4
 801175e:	4628      	mov	r0, r5
 8011760:	f000 fd36 	bl	80121d0 <_fflush_r>
 8011764:	2800      	cmp	r0, #0
 8011766:	d0d9      	beq.n	801171c <__swbuf_r+0x2e>
 8011768:	e7d6      	b.n	8011718 <__swbuf_r+0x2a>
	...

0801176c <__swsetup_r>:
 801176c:	b538      	push	{r3, r4, r5, lr}
 801176e:	4b29      	ldr	r3, [pc, #164]	@ (8011814 <__swsetup_r+0xa8>)
 8011770:	4605      	mov	r5, r0
 8011772:	6818      	ldr	r0, [r3, #0]
 8011774:	460c      	mov	r4, r1
 8011776:	b118      	cbz	r0, 8011780 <__swsetup_r+0x14>
 8011778:	6a03      	ldr	r3, [r0, #32]
 801177a:	b90b      	cbnz	r3, 8011780 <__swsetup_r+0x14>
 801177c:	f7ff fe1a 	bl	80113b4 <__sinit>
 8011780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011784:	0719      	lsls	r1, r3, #28
 8011786:	d422      	bmi.n	80117ce <__swsetup_r+0x62>
 8011788:	06da      	lsls	r2, r3, #27
 801178a:	d407      	bmi.n	801179c <__swsetup_r+0x30>
 801178c:	2209      	movs	r2, #9
 801178e:	602a      	str	r2, [r5, #0]
 8011790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011794:	81a3      	strh	r3, [r4, #12]
 8011796:	f04f 30ff 	mov.w	r0, #4294967295
 801179a:	e033      	b.n	8011804 <__swsetup_r+0x98>
 801179c:	0758      	lsls	r0, r3, #29
 801179e:	d512      	bpl.n	80117c6 <__swsetup_r+0x5a>
 80117a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117a2:	b141      	cbz	r1, 80117b6 <__swsetup_r+0x4a>
 80117a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117a8:	4299      	cmp	r1, r3
 80117aa:	d002      	beq.n	80117b2 <__swsetup_r+0x46>
 80117ac:	4628      	mov	r0, r5
 80117ae:	f000 f8bd 	bl	801192c <_free_r>
 80117b2:	2300      	movs	r3, #0
 80117b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80117b6:	89a3      	ldrh	r3, [r4, #12]
 80117b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80117bc:	81a3      	strh	r3, [r4, #12]
 80117be:	2300      	movs	r3, #0
 80117c0:	6063      	str	r3, [r4, #4]
 80117c2:	6923      	ldr	r3, [r4, #16]
 80117c4:	6023      	str	r3, [r4, #0]
 80117c6:	89a3      	ldrh	r3, [r4, #12]
 80117c8:	f043 0308 	orr.w	r3, r3, #8
 80117cc:	81a3      	strh	r3, [r4, #12]
 80117ce:	6923      	ldr	r3, [r4, #16]
 80117d0:	b94b      	cbnz	r3, 80117e6 <__swsetup_r+0x7a>
 80117d2:	89a3      	ldrh	r3, [r4, #12]
 80117d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80117d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80117dc:	d003      	beq.n	80117e6 <__swsetup_r+0x7a>
 80117de:	4621      	mov	r1, r4
 80117e0:	4628      	mov	r0, r5
 80117e2:	f000 fd43 	bl	801226c <__smakebuf_r>
 80117e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117ea:	f013 0201 	ands.w	r2, r3, #1
 80117ee:	d00a      	beq.n	8011806 <__swsetup_r+0x9a>
 80117f0:	2200      	movs	r2, #0
 80117f2:	60a2      	str	r2, [r4, #8]
 80117f4:	6962      	ldr	r2, [r4, #20]
 80117f6:	4252      	negs	r2, r2
 80117f8:	61a2      	str	r2, [r4, #24]
 80117fa:	6922      	ldr	r2, [r4, #16]
 80117fc:	b942      	cbnz	r2, 8011810 <__swsetup_r+0xa4>
 80117fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011802:	d1c5      	bne.n	8011790 <__swsetup_r+0x24>
 8011804:	bd38      	pop	{r3, r4, r5, pc}
 8011806:	0799      	lsls	r1, r3, #30
 8011808:	bf58      	it	pl
 801180a:	6962      	ldrpl	r2, [r4, #20]
 801180c:	60a2      	str	r2, [r4, #8]
 801180e:	e7f4      	b.n	80117fa <__swsetup_r+0x8e>
 8011810:	2000      	movs	r0, #0
 8011812:	e7f7      	b.n	8011804 <__swsetup_r+0x98>
 8011814:	24000090 	.word	0x24000090

08011818 <memset>:
 8011818:	4402      	add	r2, r0
 801181a:	4603      	mov	r3, r0
 801181c:	4293      	cmp	r3, r2
 801181e:	d100      	bne.n	8011822 <memset+0xa>
 8011820:	4770      	bx	lr
 8011822:	f803 1b01 	strb.w	r1, [r3], #1
 8011826:	e7f9      	b.n	801181c <memset+0x4>

08011828 <_close_r>:
 8011828:	b538      	push	{r3, r4, r5, lr}
 801182a:	4d06      	ldr	r5, [pc, #24]	@ (8011844 <_close_r+0x1c>)
 801182c:	2300      	movs	r3, #0
 801182e:	4604      	mov	r4, r0
 8011830:	4608      	mov	r0, r1
 8011832:	602b      	str	r3, [r5, #0]
 8011834:	f7ee ff94 	bl	8000760 <_close>
 8011838:	1c43      	adds	r3, r0, #1
 801183a:	d102      	bne.n	8011842 <_close_r+0x1a>
 801183c:	682b      	ldr	r3, [r5, #0]
 801183e:	b103      	cbz	r3, 8011842 <_close_r+0x1a>
 8011840:	6023      	str	r3, [r4, #0]
 8011842:	bd38      	pop	{r3, r4, r5, pc}
 8011844:	24004ce0 	.word	0x24004ce0

08011848 <_lseek_r>:
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	4d07      	ldr	r5, [pc, #28]	@ (8011868 <_lseek_r+0x20>)
 801184c:	4604      	mov	r4, r0
 801184e:	4608      	mov	r0, r1
 8011850:	4611      	mov	r1, r2
 8011852:	2200      	movs	r2, #0
 8011854:	602a      	str	r2, [r5, #0]
 8011856:	461a      	mov	r2, r3
 8011858:	f7ee ff99 	bl	800078e <_lseek>
 801185c:	1c43      	adds	r3, r0, #1
 801185e:	d102      	bne.n	8011866 <_lseek_r+0x1e>
 8011860:	682b      	ldr	r3, [r5, #0]
 8011862:	b103      	cbz	r3, 8011866 <_lseek_r+0x1e>
 8011864:	6023      	str	r3, [r4, #0]
 8011866:	bd38      	pop	{r3, r4, r5, pc}
 8011868:	24004ce0 	.word	0x24004ce0

0801186c <_read_r>:
 801186c:	b538      	push	{r3, r4, r5, lr}
 801186e:	4d07      	ldr	r5, [pc, #28]	@ (801188c <_read_r+0x20>)
 8011870:	4604      	mov	r4, r0
 8011872:	4608      	mov	r0, r1
 8011874:	4611      	mov	r1, r2
 8011876:	2200      	movs	r2, #0
 8011878:	602a      	str	r2, [r5, #0]
 801187a:	461a      	mov	r2, r3
 801187c:	f7ee ff98 	bl	80007b0 <_read>
 8011880:	1c43      	adds	r3, r0, #1
 8011882:	d102      	bne.n	801188a <_read_r+0x1e>
 8011884:	682b      	ldr	r3, [r5, #0]
 8011886:	b103      	cbz	r3, 801188a <_read_r+0x1e>
 8011888:	6023      	str	r3, [r4, #0]
 801188a:	bd38      	pop	{r3, r4, r5, pc}
 801188c:	24004ce0 	.word	0x24004ce0

08011890 <_write_r>:
 8011890:	b538      	push	{r3, r4, r5, lr}
 8011892:	4d07      	ldr	r5, [pc, #28]	@ (80118b0 <_write_r+0x20>)
 8011894:	4604      	mov	r4, r0
 8011896:	4608      	mov	r0, r1
 8011898:	4611      	mov	r1, r2
 801189a:	2200      	movs	r2, #0
 801189c:	602a      	str	r2, [r5, #0]
 801189e:	461a      	mov	r2, r3
 80118a0:	f7ee ff32 	bl	8000708 <_write>
 80118a4:	1c43      	adds	r3, r0, #1
 80118a6:	d102      	bne.n	80118ae <_write_r+0x1e>
 80118a8:	682b      	ldr	r3, [r5, #0]
 80118aa:	b103      	cbz	r3, 80118ae <_write_r+0x1e>
 80118ac:	6023      	str	r3, [r4, #0]
 80118ae:	bd38      	pop	{r3, r4, r5, pc}
 80118b0:	24004ce0 	.word	0x24004ce0

080118b4 <__errno>:
 80118b4:	4b01      	ldr	r3, [pc, #4]	@ (80118bc <__errno+0x8>)
 80118b6:	6818      	ldr	r0, [r3, #0]
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	24000090 	.word	0x24000090

080118c0 <__libc_init_array>:
 80118c0:	b570      	push	{r4, r5, r6, lr}
 80118c2:	4d0d      	ldr	r5, [pc, #52]	@ (80118f8 <__libc_init_array+0x38>)
 80118c4:	4c0d      	ldr	r4, [pc, #52]	@ (80118fc <__libc_init_array+0x3c>)
 80118c6:	1b64      	subs	r4, r4, r5
 80118c8:	10a4      	asrs	r4, r4, #2
 80118ca:	2600      	movs	r6, #0
 80118cc:	42a6      	cmp	r6, r4
 80118ce:	d109      	bne.n	80118e4 <__libc_init_array+0x24>
 80118d0:	4d0b      	ldr	r5, [pc, #44]	@ (8011900 <__libc_init_array+0x40>)
 80118d2:	4c0c      	ldr	r4, [pc, #48]	@ (8011904 <__libc_init_array+0x44>)
 80118d4:	f000 fd38 	bl	8012348 <_init>
 80118d8:	1b64      	subs	r4, r4, r5
 80118da:	10a4      	asrs	r4, r4, #2
 80118dc:	2600      	movs	r6, #0
 80118de:	42a6      	cmp	r6, r4
 80118e0:	d105      	bne.n	80118ee <__libc_init_array+0x2e>
 80118e2:	bd70      	pop	{r4, r5, r6, pc}
 80118e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80118e8:	4798      	blx	r3
 80118ea:	3601      	adds	r6, #1
 80118ec:	e7ee      	b.n	80118cc <__libc_init_array+0xc>
 80118ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80118f2:	4798      	blx	r3
 80118f4:	3601      	adds	r6, #1
 80118f6:	e7f2      	b.n	80118de <__libc_init_array+0x1e>
 80118f8:	0803d170 	.word	0x0803d170
 80118fc:	0803d170 	.word	0x0803d170
 8011900:	0803d170 	.word	0x0803d170
 8011904:	0803d174 	.word	0x0803d174

08011908 <__retarget_lock_init_recursive>:
 8011908:	4770      	bx	lr

0801190a <__retarget_lock_acquire_recursive>:
 801190a:	4770      	bx	lr

0801190c <__retarget_lock_release_recursive>:
 801190c:	4770      	bx	lr

0801190e <memcpy>:
 801190e:	440a      	add	r2, r1
 8011910:	4291      	cmp	r1, r2
 8011912:	f100 33ff 	add.w	r3, r0, #4294967295
 8011916:	d100      	bne.n	801191a <memcpy+0xc>
 8011918:	4770      	bx	lr
 801191a:	b510      	push	{r4, lr}
 801191c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011924:	4291      	cmp	r1, r2
 8011926:	d1f9      	bne.n	801191c <memcpy+0xe>
 8011928:	bd10      	pop	{r4, pc}
	...

0801192c <_free_r>:
 801192c:	b538      	push	{r3, r4, r5, lr}
 801192e:	4605      	mov	r5, r0
 8011930:	2900      	cmp	r1, #0
 8011932:	d041      	beq.n	80119b8 <_free_r+0x8c>
 8011934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011938:	1f0c      	subs	r4, r1, #4
 801193a:	2b00      	cmp	r3, #0
 801193c:	bfb8      	it	lt
 801193e:	18e4      	addlt	r4, r4, r3
 8011940:	f000 f8e8 	bl	8011b14 <__malloc_lock>
 8011944:	4a1d      	ldr	r2, [pc, #116]	@ (80119bc <_free_r+0x90>)
 8011946:	6813      	ldr	r3, [r2, #0]
 8011948:	b933      	cbnz	r3, 8011958 <_free_r+0x2c>
 801194a:	6063      	str	r3, [r4, #4]
 801194c:	6014      	str	r4, [r2, #0]
 801194e:	4628      	mov	r0, r5
 8011950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011954:	f000 b8e4 	b.w	8011b20 <__malloc_unlock>
 8011958:	42a3      	cmp	r3, r4
 801195a:	d908      	bls.n	801196e <_free_r+0x42>
 801195c:	6820      	ldr	r0, [r4, #0]
 801195e:	1821      	adds	r1, r4, r0
 8011960:	428b      	cmp	r3, r1
 8011962:	bf01      	itttt	eq
 8011964:	6819      	ldreq	r1, [r3, #0]
 8011966:	685b      	ldreq	r3, [r3, #4]
 8011968:	1809      	addeq	r1, r1, r0
 801196a:	6021      	streq	r1, [r4, #0]
 801196c:	e7ed      	b.n	801194a <_free_r+0x1e>
 801196e:	461a      	mov	r2, r3
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	b10b      	cbz	r3, 8011978 <_free_r+0x4c>
 8011974:	42a3      	cmp	r3, r4
 8011976:	d9fa      	bls.n	801196e <_free_r+0x42>
 8011978:	6811      	ldr	r1, [r2, #0]
 801197a:	1850      	adds	r0, r2, r1
 801197c:	42a0      	cmp	r0, r4
 801197e:	d10b      	bne.n	8011998 <_free_r+0x6c>
 8011980:	6820      	ldr	r0, [r4, #0]
 8011982:	4401      	add	r1, r0
 8011984:	1850      	adds	r0, r2, r1
 8011986:	4283      	cmp	r3, r0
 8011988:	6011      	str	r1, [r2, #0]
 801198a:	d1e0      	bne.n	801194e <_free_r+0x22>
 801198c:	6818      	ldr	r0, [r3, #0]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	6053      	str	r3, [r2, #4]
 8011992:	4408      	add	r0, r1
 8011994:	6010      	str	r0, [r2, #0]
 8011996:	e7da      	b.n	801194e <_free_r+0x22>
 8011998:	d902      	bls.n	80119a0 <_free_r+0x74>
 801199a:	230c      	movs	r3, #12
 801199c:	602b      	str	r3, [r5, #0]
 801199e:	e7d6      	b.n	801194e <_free_r+0x22>
 80119a0:	6820      	ldr	r0, [r4, #0]
 80119a2:	1821      	adds	r1, r4, r0
 80119a4:	428b      	cmp	r3, r1
 80119a6:	bf04      	itt	eq
 80119a8:	6819      	ldreq	r1, [r3, #0]
 80119aa:	685b      	ldreq	r3, [r3, #4]
 80119ac:	6063      	str	r3, [r4, #4]
 80119ae:	bf04      	itt	eq
 80119b0:	1809      	addeq	r1, r1, r0
 80119b2:	6021      	streq	r1, [r4, #0]
 80119b4:	6054      	str	r4, [r2, #4]
 80119b6:	e7ca      	b.n	801194e <_free_r+0x22>
 80119b8:	bd38      	pop	{r3, r4, r5, pc}
 80119ba:	bf00      	nop
 80119bc:	24004cec 	.word	0x24004cec

080119c0 <malloc>:
 80119c0:	4b02      	ldr	r3, [pc, #8]	@ (80119cc <malloc+0xc>)
 80119c2:	4601      	mov	r1, r0
 80119c4:	6818      	ldr	r0, [r3, #0]
 80119c6:	f000 b825 	b.w	8011a14 <_malloc_r>
 80119ca:	bf00      	nop
 80119cc:	24000090 	.word	0x24000090

080119d0 <sbrk_aligned>:
 80119d0:	b570      	push	{r4, r5, r6, lr}
 80119d2:	4e0f      	ldr	r6, [pc, #60]	@ (8011a10 <sbrk_aligned+0x40>)
 80119d4:	460c      	mov	r4, r1
 80119d6:	6831      	ldr	r1, [r6, #0]
 80119d8:	4605      	mov	r5, r0
 80119da:	b911      	cbnz	r1, 80119e2 <sbrk_aligned+0x12>
 80119dc:	f000 fca4 	bl	8012328 <_sbrk_r>
 80119e0:	6030      	str	r0, [r6, #0]
 80119e2:	4621      	mov	r1, r4
 80119e4:	4628      	mov	r0, r5
 80119e6:	f000 fc9f 	bl	8012328 <_sbrk_r>
 80119ea:	1c43      	adds	r3, r0, #1
 80119ec:	d103      	bne.n	80119f6 <sbrk_aligned+0x26>
 80119ee:	f04f 34ff 	mov.w	r4, #4294967295
 80119f2:	4620      	mov	r0, r4
 80119f4:	bd70      	pop	{r4, r5, r6, pc}
 80119f6:	1cc4      	adds	r4, r0, #3
 80119f8:	f024 0403 	bic.w	r4, r4, #3
 80119fc:	42a0      	cmp	r0, r4
 80119fe:	d0f8      	beq.n	80119f2 <sbrk_aligned+0x22>
 8011a00:	1a21      	subs	r1, r4, r0
 8011a02:	4628      	mov	r0, r5
 8011a04:	f000 fc90 	bl	8012328 <_sbrk_r>
 8011a08:	3001      	adds	r0, #1
 8011a0a:	d1f2      	bne.n	80119f2 <sbrk_aligned+0x22>
 8011a0c:	e7ef      	b.n	80119ee <sbrk_aligned+0x1e>
 8011a0e:	bf00      	nop
 8011a10:	24004ce8 	.word	0x24004ce8

08011a14 <_malloc_r>:
 8011a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a18:	1ccd      	adds	r5, r1, #3
 8011a1a:	f025 0503 	bic.w	r5, r5, #3
 8011a1e:	3508      	adds	r5, #8
 8011a20:	2d0c      	cmp	r5, #12
 8011a22:	bf38      	it	cc
 8011a24:	250c      	movcc	r5, #12
 8011a26:	2d00      	cmp	r5, #0
 8011a28:	4606      	mov	r6, r0
 8011a2a:	db01      	blt.n	8011a30 <_malloc_r+0x1c>
 8011a2c:	42a9      	cmp	r1, r5
 8011a2e:	d904      	bls.n	8011a3a <_malloc_r+0x26>
 8011a30:	230c      	movs	r3, #12
 8011a32:	6033      	str	r3, [r6, #0]
 8011a34:	2000      	movs	r0, #0
 8011a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b10 <_malloc_r+0xfc>
 8011a3e:	f000 f869 	bl	8011b14 <__malloc_lock>
 8011a42:	f8d8 3000 	ldr.w	r3, [r8]
 8011a46:	461c      	mov	r4, r3
 8011a48:	bb44      	cbnz	r4, 8011a9c <_malloc_r+0x88>
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	4630      	mov	r0, r6
 8011a4e:	f7ff ffbf 	bl	80119d0 <sbrk_aligned>
 8011a52:	1c43      	adds	r3, r0, #1
 8011a54:	4604      	mov	r4, r0
 8011a56:	d158      	bne.n	8011b0a <_malloc_r+0xf6>
 8011a58:	f8d8 4000 	ldr.w	r4, [r8]
 8011a5c:	4627      	mov	r7, r4
 8011a5e:	2f00      	cmp	r7, #0
 8011a60:	d143      	bne.n	8011aea <_malloc_r+0xd6>
 8011a62:	2c00      	cmp	r4, #0
 8011a64:	d04b      	beq.n	8011afe <_malloc_r+0xea>
 8011a66:	6823      	ldr	r3, [r4, #0]
 8011a68:	4639      	mov	r1, r7
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	eb04 0903 	add.w	r9, r4, r3
 8011a70:	f000 fc5a 	bl	8012328 <_sbrk_r>
 8011a74:	4581      	cmp	r9, r0
 8011a76:	d142      	bne.n	8011afe <_malloc_r+0xea>
 8011a78:	6821      	ldr	r1, [r4, #0]
 8011a7a:	1a6d      	subs	r5, r5, r1
 8011a7c:	4629      	mov	r1, r5
 8011a7e:	4630      	mov	r0, r6
 8011a80:	f7ff ffa6 	bl	80119d0 <sbrk_aligned>
 8011a84:	3001      	adds	r0, #1
 8011a86:	d03a      	beq.n	8011afe <_malloc_r+0xea>
 8011a88:	6823      	ldr	r3, [r4, #0]
 8011a8a:	442b      	add	r3, r5
 8011a8c:	6023      	str	r3, [r4, #0]
 8011a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8011a92:	685a      	ldr	r2, [r3, #4]
 8011a94:	bb62      	cbnz	r2, 8011af0 <_malloc_r+0xdc>
 8011a96:	f8c8 7000 	str.w	r7, [r8]
 8011a9a:	e00f      	b.n	8011abc <_malloc_r+0xa8>
 8011a9c:	6822      	ldr	r2, [r4, #0]
 8011a9e:	1b52      	subs	r2, r2, r5
 8011aa0:	d420      	bmi.n	8011ae4 <_malloc_r+0xd0>
 8011aa2:	2a0b      	cmp	r2, #11
 8011aa4:	d917      	bls.n	8011ad6 <_malloc_r+0xc2>
 8011aa6:	1961      	adds	r1, r4, r5
 8011aa8:	42a3      	cmp	r3, r4
 8011aaa:	6025      	str	r5, [r4, #0]
 8011aac:	bf18      	it	ne
 8011aae:	6059      	strne	r1, [r3, #4]
 8011ab0:	6863      	ldr	r3, [r4, #4]
 8011ab2:	bf08      	it	eq
 8011ab4:	f8c8 1000 	streq.w	r1, [r8]
 8011ab8:	5162      	str	r2, [r4, r5]
 8011aba:	604b      	str	r3, [r1, #4]
 8011abc:	4630      	mov	r0, r6
 8011abe:	f000 f82f 	bl	8011b20 <__malloc_unlock>
 8011ac2:	f104 000b 	add.w	r0, r4, #11
 8011ac6:	1d23      	adds	r3, r4, #4
 8011ac8:	f020 0007 	bic.w	r0, r0, #7
 8011acc:	1ac2      	subs	r2, r0, r3
 8011ace:	bf1c      	itt	ne
 8011ad0:	1a1b      	subne	r3, r3, r0
 8011ad2:	50a3      	strne	r3, [r4, r2]
 8011ad4:	e7af      	b.n	8011a36 <_malloc_r+0x22>
 8011ad6:	6862      	ldr	r2, [r4, #4]
 8011ad8:	42a3      	cmp	r3, r4
 8011ada:	bf0c      	ite	eq
 8011adc:	f8c8 2000 	streq.w	r2, [r8]
 8011ae0:	605a      	strne	r2, [r3, #4]
 8011ae2:	e7eb      	b.n	8011abc <_malloc_r+0xa8>
 8011ae4:	4623      	mov	r3, r4
 8011ae6:	6864      	ldr	r4, [r4, #4]
 8011ae8:	e7ae      	b.n	8011a48 <_malloc_r+0x34>
 8011aea:	463c      	mov	r4, r7
 8011aec:	687f      	ldr	r7, [r7, #4]
 8011aee:	e7b6      	b.n	8011a5e <_malloc_r+0x4a>
 8011af0:	461a      	mov	r2, r3
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	42a3      	cmp	r3, r4
 8011af6:	d1fb      	bne.n	8011af0 <_malloc_r+0xdc>
 8011af8:	2300      	movs	r3, #0
 8011afa:	6053      	str	r3, [r2, #4]
 8011afc:	e7de      	b.n	8011abc <_malloc_r+0xa8>
 8011afe:	230c      	movs	r3, #12
 8011b00:	6033      	str	r3, [r6, #0]
 8011b02:	4630      	mov	r0, r6
 8011b04:	f000 f80c 	bl	8011b20 <__malloc_unlock>
 8011b08:	e794      	b.n	8011a34 <_malloc_r+0x20>
 8011b0a:	6005      	str	r5, [r0, #0]
 8011b0c:	e7d6      	b.n	8011abc <_malloc_r+0xa8>
 8011b0e:	bf00      	nop
 8011b10:	24004cec 	.word	0x24004cec

08011b14 <__malloc_lock>:
 8011b14:	4801      	ldr	r0, [pc, #4]	@ (8011b1c <__malloc_lock+0x8>)
 8011b16:	f7ff bef8 	b.w	801190a <__retarget_lock_acquire_recursive>
 8011b1a:	bf00      	nop
 8011b1c:	24004ce4 	.word	0x24004ce4

08011b20 <__malloc_unlock>:
 8011b20:	4801      	ldr	r0, [pc, #4]	@ (8011b28 <__malloc_unlock+0x8>)
 8011b22:	f7ff bef3 	b.w	801190c <__retarget_lock_release_recursive>
 8011b26:	bf00      	nop
 8011b28:	24004ce4 	.word	0x24004ce4

08011b2c <__sfputc_r>:
 8011b2c:	6893      	ldr	r3, [r2, #8]
 8011b2e:	3b01      	subs	r3, #1
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	b410      	push	{r4}
 8011b34:	6093      	str	r3, [r2, #8]
 8011b36:	da08      	bge.n	8011b4a <__sfputc_r+0x1e>
 8011b38:	6994      	ldr	r4, [r2, #24]
 8011b3a:	42a3      	cmp	r3, r4
 8011b3c:	db01      	blt.n	8011b42 <__sfputc_r+0x16>
 8011b3e:	290a      	cmp	r1, #10
 8011b40:	d103      	bne.n	8011b4a <__sfputc_r+0x1e>
 8011b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b46:	f7ff bdd2 	b.w	80116ee <__swbuf_r>
 8011b4a:	6813      	ldr	r3, [r2, #0]
 8011b4c:	1c58      	adds	r0, r3, #1
 8011b4e:	6010      	str	r0, [r2, #0]
 8011b50:	7019      	strb	r1, [r3, #0]
 8011b52:	4608      	mov	r0, r1
 8011b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b58:	4770      	bx	lr

08011b5a <__sfputs_r>:
 8011b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b5c:	4606      	mov	r6, r0
 8011b5e:	460f      	mov	r7, r1
 8011b60:	4614      	mov	r4, r2
 8011b62:	18d5      	adds	r5, r2, r3
 8011b64:	42ac      	cmp	r4, r5
 8011b66:	d101      	bne.n	8011b6c <__sfputs_r+0x12>
 8011b68:	2000      	movs	r0, #0
 8011b6a:	e007      	b.n	8011b7c <__sfputs_r+0x22>
 8011b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b70:	463a      	mov	r2, r7
 8011b72:	4630      	mov	r0, r6
 8011b74:	f7ff ffda 	bl	8011b2c <__sfputc_r>
 8011b78:	1c43      	adds	r3, r0, #1
 8011b7a:	d1f3      	bne.n	8011b64 <__sfputs_r+0xa>
 8011b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011b80 <_vfiprintf_r>:
 8011b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b84:	460d      	mov	r5, r1
 8011b86:	b09d      	sub	sp, #116	@ 0x74
 8011b88:	4614      	mov	r4, r2
 8011b8a:	4698      	mov	r8, r3
 8011b8c:	4606      	mov	r6, r0
 8011b8e:	b118      	cbz	r0, 8011b98 <_vfiprintf_r+0x18>
 8011b90:	6a03      	ldr	r3, [r0, #32]
 8011b92:	b90b      	cbnz	r3, 8011b98 <_vfiprintf_r+0x18>
 8011b94:	f7ff fc0e 	bl	80113b4 <__sinit>
 8011b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b9a:	07d9      	lsls	r1, r3, #31
 8011b9c:	d405      	bmi.n	8011baa <_vfiprintf_r+0x2a>
 8011b9e:	89ab      	ldrh	r3, [r5, #12]
 8011ba0:	059a      	lsls	r2, r3, #22
 8011ba2:	d402      	bmi.n	8011baa <_vfiprintf_r+0x2a>
 8011ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ba6:	f7ff feb0 	bl	801190a <__retarget_lock_acquire_recursive>
 8011baa:	89ab      	ldrh	r3, [r5, #12]
 8011bac:	071b      	lsls	r3, r3, #28
 8011bae:	d501      	bpl.n	8011bb4 <_vfiprintf_r+0x34>
 8011bb0:	692b      	ldr	r3, [r5, #16]
 8011bb2:	b99b      	cbnz	r3, 8011bdc <_vfiprintf_r+0x5c>
 8011bb4:	4629      	mov	r1, r5
 8011bb6:	4630      	mov	r0, r6
 8011bb8:	f7ff fdd8 	bl	801176c <__swsetup_r>
 8011bbc:	b170      	cbz	r0, 8011bdc <_vfiprintf_r+0x5c>
 8011bbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bc0:	07dc      	lsls	r4, r3, #31
 8011bc2:	d504      	bpl.n	8011bce <_vfiprintf_r+0x4e>
 8011bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc8:	b01d      	add	sp, #116	@ 0x74
 8011bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bce:	89ab      	ldrh	r3, [r5, #12]
 8011bd0:	0598      	lsls	r0, r3, #22
 8011bd2:	d4f7      	bmi.n	8011bc4 <_vfiprintf_r+0x44>
 8011bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bd6:	f7ff fe99 	bl	801190c <__retarget_lock_release_recursive>
 8011bda:	e7f3      	b.n	8011bc4 <_vfiprintf_r+0x44>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8011be0:	2320      	movs	r3, #32
 8011be2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011be6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bea:	2330      	movs	r3, #48	@ 0x30
 8011bec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011d9c <_vfiprintf_r+0x21c>
 8011bf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011bf4:	f04f 0901 	mov.w	r9, #1
 8011bf8:	4623      	mov	r3, r4
 8011bfa:	469a      	mov	sl, r3
 8011bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c00:	b10a      	cbz	r2, 8011c06 <_vfiprintf_r+0x86>
 8011c02:	2a25      	cmp	r2, #37	@ 0x25
 8011c04:	d1f9      	bne.n	8011bfa <_vfiprintf_r+0x7a>
 8011c06:	ebba 0b04 	subs.w	fp, sl, r4
 8011c0a:	d00b      	beq.n	8011c24 <_vfiprintf_r+0xa4>
 8011c0c:	465b      	mov	r3, fp
 8011c0e:	4622      	mov	r2, r4
 8011c10:	4629      	mov	r1, r5
 8011c12:	4630      	mov	r0, r6
 8011c14:	f7ff ffa1 	bl	8011b5a <__sfputs_r>
 8011c18:	3001      	adds	r0, #1
 8011c1a:	f000 80a7 	beq.w	8011d6c <_vfiprintf_r+0x1ec>
 8011c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c20:	445a      	add	r2, fp
 8011c22:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c24:	f89a 3000 	ldrb.w	r3, [sl]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	f000 809f 	beq.w	8011d6c <_vfiprintf_r+0x1ec>
 8011c2e:	2300      	movs	r3, #0
 8011c30:	f04f 32ff 	mov.w	r2, #4294967295
 8011c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c38:	f10a 0a01 	add.w	sl, sl, #1
 8011c3c:	9304      	str	r3, [sp, #16]
 8011c3e:	9307      	str	r3, [sp, #28]
 8011c40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011c44:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c46:	4654      	mov	r4, sl
 8011c48:	2205      	movs	r2, #5
 8011c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c4e:	4853      	ldr	r0, [pc, #332]	@ (8011d9c <_vfiprintf_r+0x21c>)
 8011c50:	f7ee fb46 	bl	80002e0 <memchr>
 8011c54:	9a04      	ldr	r2, [sp, #16]
 8011c56:	b9d8      	cbnz	r0, 8011c90 <_vfiprintf_r+0x110>
 8011c58:	06d1      	lsls	r1, r2, #27
 8011c5a:	bf44      	itt	mi
 8011c5c:	2320      	movmi	r3, #32
 8011c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c62:	0713      	lsls	r3, r2, #28
 8011c64:	bf44      	itt	mi
 8011c66:	232b      	movmi	r3, #43	@ 0x2b
 8011c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8011c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c72:	d015      	beq.n	8011ca0 <_vfiprintf_r+0x120>
 8011c74:	9a07      	ldr	r2, [sp, #28]
 8011c76:	4654      	mov	r4, sl
 8011c78:	2000      	movs	r0, #0
 8011c7a:	f04f 0c0a 	mov.w	ip, #10
 8011c7e:	4621      	mov	r1, r4
 8011c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c84:	3b30      	subs	r3, #48	@ 0x30
 8011c86:	2b09      	cmp	r3, #9
 8011c88:	d94b      	bls.n	8011d22 <_vfiprintf_r+0x1a2>
 8011c8a:	b1b0      	cbz	r0, 8011cba <_vfiprintf_r+0x13a>
 8011c8c:	9207      	str	r2, [sp, #28]
 8011c8e:	e014      	b.n	8011cba <_vfiprintf_r+0x13a>
 8011c90:	eba0 0308 	sub.w	r3, r0, r8
 8011c94:	fa09 f303 	lsl.w	r3, r9, r3
 8011c98:	4313      	orrs	r3, r2
 8011c9a:	9304      	str	r3, [sp, #16]
 8011c9c:	46a2      	mov	sl, r4
 8011c9e:	e7d2      	b.n	8011c46 <_vfiprintf_r+0xc6>
 8011ca0:	9b03      	ldr	r3, [sp, #12]
 8011ca2:	1d19      	adds	r1, r3, #4
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	9103      	str	r1, [sp, #12]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	bfbb      	ittet	lt
 8011cac:	425b      	neglt	r3, r3
 8011cae:	f042 0202 	orrlt.w	r2, r2, #2
 8011cb2:	9307      	strge	r3, [sp, #28]
 8011cb4:	9307      	strlt	r3, [sp, #28]
 8011cb6:	bfb8      	it	lt
 8011cb8:	9204      	strlt	r2, [sp, #16]
 8011cba:	7823      	ldrb	r3, [r4, #0]
 8011cbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8011cbe:	d10a      	bne.n	8011cd6 <_vfiprintf_r+0x156>
 8011cc0:	7863      	ldrb	r3, [r4, #1]
 8011cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cc4:	d132      	bne.n	8011d2c <_vfiprintf_r+0x1ac>
 8011cc6:	9b03      	ldr	r3, [sp, #12]
 8011cc8:	1d1a      	adds	r2, r3, #4
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	9203      	str	r2, [sp, #12]
 8011cce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011cd2:	3402      	adds	r4, #2
 8011cd4:	9305      	str	r3, [sp, #20]
 8011cd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011dac <_vfiprintf_r+0x22c>
 8011cda:	7821      	ldrb	r1, [r4, #0]
 8011cdc:	2203      	movs	r2, #3
 8011cde:	4650      	mov	r0, sl
 8011ce0:	f7ee fafe 	bl	80002e0 <memchr>
 8011ce4:	b138      	cbz	r0, 8011cf6 <_vfiprintf_r+0x176>
 8011ce6:	9b04      	ldr	r3, [sp, #16]
 8011ce8:	eba0 000a 	sub.w	r0, r0, sl
 8011cec:	2240      	movs	r2, #64	@ 0x40
 8011cee:	4082      	lsls	r2, r0
 8011cf0:	4313      	orrs	r3, r2
 8011cf2:	3401      	adds	r4, #1
 8011cf4:	9304      	str	r3, [sp, #16]
 8011cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cfa:	4829      	ldr	r0, [pc, #164]	@ (8011da0 <_vfiprintf_r+0x220>)
 8011cfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d00:	2206      	movs	r2, #6
 8011d02:	f7ee faed 	bl	80002e0 <memchr>
 8011d06:	2800      	cmp	r0, #0
 8011d08:	d03f      	beq.n	8011d8a <_vfiprintf_r+0x20a>
 8011d0a:	4b26      	ldr	r3, [pc, #152]	@ (8011da4 <_vfiprintf_r+0x224>)
 8011d0c:	bb1b      	cbnz	r3, 8011d56 <_vfiprintf_r+0x1d6>
 8011d0e:	9b03      	ldr	r3, [sp, #12]
 8011d10:	3307      	adds	r3, #7
 8011d12:	f023 0307 	bic.w	r3, r3, #7
 8011d16:	3308      	adds	r3, #8
 8011d18:	9303      	str	r3, [sp, #12]
 8011d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d1c:	443b      	add	r3, r7
 8011d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d20:	e76a      	b.n	8011bf8 <_vfiprintf_r+0x78>
 8011d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d26:	460c      	mov	r4, r1
 8011d28:	2001      	movs	r0, #1
 8011d2a:	e7a8      	b.n	8011c7e <_vfiprintf_r+0xfe>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	3401      	adds	r4, #1
 8011d30:	9305      	str	r3, [sp, #20]
 8011d32:	4619      	mov	r1, r3
 8011d34:	f04f 0c0a 	mov.w	ip, #10
 8011d38:	4620      	mov	r0, r4
 8011d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d3e:	3a30      	subs	r2, #48	@ 0x30
 8011d40:	2a09      	cmp	r2, #9
 8011d42:	d903      	bls.n	8011d4c <_vfiprintf_r+0x1cc>
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d0c6      	beq.n	8011cd6 <_vfiprintf_r+0x156>
 8011d48:	9105      	str	r1, [sp, #20]
 8011d4a:	e7c4      	b.n	8011cd6 <_vfiprintf_r+0x156>
 8011d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d50:	4604      	mov	r4, r0
 8011d52:	2301      	movs	r3, #1
 8011d54:	e7f0      	b.n	8011d38 <_vfiprintf_r+0x1b8>
 8011d56:	ab03      	add	r3, sp, #12
 8011d58:	9300      	str	r3, [sp, #0]
 8011d5a:	462a      	mov	r2, r5
 8011d5c:	4b12      	ldr	r3, [pc, #72]	@ (8011da8 <_vfiprintf_r+0x228>)
 8011d5e:	a904      	add	r1, sp, #16
 8011d60:	4630      	mov	r0, r6
 8011d62:	f3af 8000 	nop.w
 8011d66:	4607      	mov	r7, r0
 8011d68:	1c78      	adds	r0, r7, #1
 8011d6a:	d1d6      	bne.n	8011d1a <_vfiprintf_r+0x19a>
 8011d6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d6e:	07d9      	lsls	r1, r3, #31
 8011d70:	d405      	bmi.n	8011d7e <_vfiprintf_r+0x1fe>
 8011d72:	89ab      	ldrh	r3, [r5, #12]
 8011d74:	059a      	lsls	r2, r3, #22
 8011d76:	d402      	bmi.n	8011d7e <_vfiprintf_r+0x1fe>
 8011d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d7a:	f7ff fdc7 	bl	801190c <__retarget_lock_release_recursive>
 8011d7e:	89ab      	ldrh	r3, [r5, #12]
 8011d80:	065b      	lsls	r3, r3, #25
 8011d82:	f53f af1f 	bmi.w	8011bc4 <_vfiprintf_r+0x44>
 8011d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d88:	e71e      	b.n	8011bc8 <_vfiprintf_r+0x48>
 8011d8a:	ab03      	add	r3, sp, #12
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	462a      	mov	r2, r5
 8011d90:	4b05      	ldr	r3, [pc, #20]	@ (8011da8 <_vfiprintf_r+0x228>)
 8011d92:	a904      	add	r1, sp, #16
 8011d94:	4630      	mov	r0, r6
 8011d96:	f000 f879 	bl	8011e8c <_printf_i>
 8011d9a:	e7e4      	b.n	8011d66 <_vfiprintf_r+0x1e6>
 8011d9c:	0803d134 	.word	0x0803d134
 8011da0:	0803d13e 	.word	0x0803d13e
 8011da4:	00000000 	.word	0x00000000
 8011da8:	08011b5b 	.word	0x08011b5b
 8011dac:	0803d13a 	.word	0x0803d13a

08011db0 <_printf_common>:
 8011db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011db4:	4616      	mov	r6, r2
 8011db6:	4698      	mov	r8, r3
 8011db8:	688a      	ldr	r2, [r1, #8]
 8011dba:	690b      	ldr	r3, [r1, #16]
 8011dbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011dc0:	4293      	cmp	r3, r2
 8011dc2:	bfb8      	it	lt
 8011dc4:	4613      	movlt	r3, r2
 8011dc6:	6033      	str	r3, [r6, #0]
 8011dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011dcc:	4607      	mov	r7, r0
 8011dce:	460c      	mov	r4, r1
 8011dd0:	b10a      	cbz	r2, 8011dd6 <_printf_common+0x26>
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	6033      	str	r3, [r6, #0]
 8011dd6:	6823      	ldr	r3, [r4, #0]
 8011dd8:	0699      	lsls	r1, r3, #26
 8011dda:	bf42      	ittt	mi
 8011ddc:	6833      	ldrmi	r3, [r6, #0]
 8011dde:	3302      	addmi	r3, #2
 8011de0:	6033      	strmi	r3, [r6, #0]
 8011de2:	6825      	ldr	r5, [r4, #0]
 8011de4:	f015 0506 	ands.w	r5, r5, #6
 8011de8:	d106      	bne.n	8011df8 <_printf_common+0x48>
 8011dea:	f104 0a19 	add.w	sl, r4, #25
 8011dee:	68e3      	ldr	r3, [r4, #12]
 8011df0:	6832      	ldr	r2, [r6, #0]
 8011df2:	1a9b      	subs	r3, r3, r2
 8011df4:	42ab      	cmp	r3, r5
 8011df6:	dc26      	bgt.n	8011e46 <_printf_common+0x96>
 8011df8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011dfc:	6822      	ldr	r2, [r4, #0]
 8011dfe:	3b00      	subs	r3, #0
 8011e00:	bf18      	it	ne
 8011e02:	2301      	movne	r3, #1
 8011e04:	0692      	lsls	r2, r2, #26
 8011e06:	d42b      	bmi.n	8011e60 <_printf_common+0xb0>
 8011e08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011e0c:	4641      	mov	r1, r8
 8011e0e:	4638      	mov	r0, r7
 8011e10:	47c8      	blx	r9
 8011e12:	3001      	adds	r0, #1
 8011e14:	d01e      	beq.n	8011e54 <_printf_common+0xa4>
 8011e16:	6823      	ldr	r3, [r4, #0]
 8011e18:	6922      	ldr	r2, [r4, #16]
 8011e1a:	f003 0306 	and.w	r3, r3, #6
 8011e1e:	2b04      	cmp	r3, #4
 8011e20:	bf02      	ittt	eq
 8011e22:	68e5      	ldreq	r5, [r4, #12]
 8011e24:	6833      	ldreq	r3, [r6, #0]
 8011e26:	1aed      	subeq	r5, r5, r3
 8011e28:	68a3      	ldr	r3, [r4, #8]
 8011e2a:	bf0c      	ite	eq
 8011e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e30:	2500      	movne	r5, #0
 8011e32:	4293      	cmp	r3, r2
 8011e34:	bfc4      	itt	gt
 8011e36:	1a9b      	subgt	r3, r3, r2
 8011e38:	18ed      	addgt	r5, r5, r3
 8011e3a:	2600      	movs	r6, #0
 8011e3c:	341a      	adds	r4, #26
 8011e3e:	42b5      	cmp	r5, r6
 8011e40:	d11a      	bne.n	8011e78 <_printf_common+0xc8>
 8011e42:	2000      	movs	r0, #0
 8011e44:	e008      	b.n	8011e58 <_printf_common+0xa8>
 8011e46:	2301      	movs	r3, #1
 8011e48:	4652      	mov	r2, sl
 8011e4a:	4641      	mov	r1, r8
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	47c8      	blx	r9
 8011e50:	3001      	adds	r0, #1
 8011e52:	d103      	bne.n	8011e5c <_printf_common+0xac>
 8011e54:	f04f 30ff 	mov.w	r0, #4294967295
 8011e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e5c:	3501      	adds	r5, #1
 8011e5e:	e7c6      	b.n	8011dee <_printf_common+0x3e>
 8011e60:	18e1      	adds	r1, r4, r3
 8011e62:	1c5a      	adds	r2, r3, #1
 8011e64:	2030      	movs	r0, #48	@ 0x30
 8011e66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011e6a:	4422      	add	r2, r4
 8011e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011e70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011e74:	3302      	adds	r3, #2
 8011e76:	e7c7      	b.n	8011e08 <_printf_common+0x58>
 8011e78:	2301      	movs	r3, #1
 8011e7a:	4622      	mov	r2, r4
 8011e7c:	4641      	mov	r1, r8
 8011e7e:	4638      	mov	r0, r7
 8011e80:	47c8      	blx	r9
 8011e82:	3001      	adds	r0, #1
 8011e84:	d0e6      	beq.n	8011e54 <_printf_common+0xa4>
 8011e86:	3601      	adds	r6, #1
 8011e88:	e7d9      	b.n	8011e3e <_printf_common+0x8e>
	...

08011e8c <_printf_i>:
 8011e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e90:	7e0f      	ldrb	r7, [r1, #24]
 8011e92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011e94:	2f78      	cmp	r7, #120	@ 0x78
 8011e96:	4691      	mov	r9, r2
 8011e98:	4680      	mov	r8, r0
 8011e9a:	460c      	mov	r4, r1
 8011e9c:	469a      	mov	sl, r3
 8011e9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011ea2:	d807      	bhi.n	8011eb4 <_printf_i+0x28>
 8011ea4:	2f62      	cmp	r7, #98	@ 0x62
 8011ea6:	d80a      	bhi.n	8011ebe <_printf_i+0x32>
 8011ea8:	2f00      	cmp	r7, #0
 8011eaa:	f000 80d1 	beq.w	8012050 <_printf_i+0x1c4>
 8011eae:	2f58      	cmp	r7, #88	@ 0x58
 8011eb0:	f000 80b8 	beq.w	8012024 <_printf_i+0x198>
 8011eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011eb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011ebc:	e03a      	b.n	8011f34 <_printf_i+0xa8>
 8011ebe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011ec2:	2b15      	cmp	r3, #21
 8011ec4:	d8f6      	bhi.n	8011eb4 <_printf_i+0x28>
 8011ec6:	a101      	add	r1, pc, #4	@ (adr r1, 8011ecc <_printf_i+0x40>)
 8011ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ecc:	08011f25 	.word	0x08011f25
 8011ed0:	08011f39 	.word	0x08011f39
 8011ed4:	08011eb5 	.word	0x08011eb5
 8011ed8:	08011eb5 	.word	0x08011eb5
 8011edc:	08011eb5 	.word	0x08011eb5
 8011ee0:	08011eb5 	.word	0x08011eb5
 8011ee4:	08011f39 	.word	0x08011f39
 8011ee8:	08011eb5 	.word	0x08011eb5
 8011eec:	08011eb5 	.word	0x08011eb5
 8011ef0:	08011eb5 	.word	0x08011eb5
 8011ef4:	08011eb5 	.word	0x08011eb5
 8011ef8:	08012037 	.word	0x08012037
 8011efc:	08011f63 	.word	0x08011f63
 8011f00:	08011ff1 	.word	0x08011ff1
 8011f04:	08011eb5 	.word	0x08011eb5
 8011f08:	08011eb5 	.word	0x08011eb5
 8011f0c:	08012059 	.word	0x08012059
 8011f10:	08011eb5 	.word	0x08011eb5
 8011f14:	08011f63 	.word	0x08011f63
 8011f18:	08011eb5 	.word	0x08011eb5
 8011f1c:	08011eb5 	.word	0x08011eb5
 8011f20:	08011ff9 	.word	0x08011ff9
 8011f24:	6833      	ldr	r3, [r6, #0]
 8011f26:	1d1a      	adds	r2, r3, #4
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	6032      	str	r2, [r6, #0]
 8011f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011f34:	2301      	movs	r3, #1
 8011f36:	e09c      	b.n	8012072 <_printf_i+0x1e6>
 8011f38:	6833      	ldr	r3, [r6, #0]
 8011f3a:	6820      	ldr	r0, [r4, #0]
 8011f3c:	1d19      	adds	r1, r3, #4
 8011f3e:	6031      	str	r1, [r6, #0]
 8011f40:	0606      	lsls	r6, r0, #24
 8011f42:	d501      	bpl.n	8011f48 <_printf_i+0xbc>
 8011f44:	681d      	ldr	r5, [r3, #0]
 8011f46:	e003      	b.n	8011f50 <_printf_i+0xc4>
 8011f48:	0645      	lsls	r5, r0, #25
 8011f4a:	d5fb      	bpl.n	8011f44 <_printf_i+0xb8>
 8011f4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011f50:	2d00      	cmp	r5, #0
 8011f52:	da03      	bge.n	8011f5c <_printf_i+0xd0>
 8011f54:	232d      	movs	r3, #45	@ 0x2d
 8011f56:	426d      	negs	r5, r5
 8011f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f5c:	4858      	ldr	r0, [pc, #352]	@ (80120c0 <_printf_i+0x234>)
 8011f5e:	230a      	movs	r3, #10
 8011f60:	e011      	b.n	8011f86 <_printf_i+0xfa>
 8011f62:	6821      	ldr	r1, [r4, #0]
 8011f64:	6833      	ldr	r3, [r6, #0]
 8011f66:	0608      	lsls	r0, r1, #24
 8011f68:	f853 5b04 	ldr.w	r5, [r3], #4
 8011f6c:	d402      	bmi.n	8011f74 <_printf_i+0xe8>
 8011f6e:	0649      	lsls	r1, r1, #25
 8011f70:	bf48      	it	mi
 8011f72:	b2ad      	uxthmi	r5, r5
 8011f74:	2f6f      	cmp	r7, #111	@ 0x6f
 8011f76:	4852      	ldr	r0, [pc, #328]	@ (80120c0 <_printf_i+0x234>)
 8011f78:	6033      	str	r3, [r6, #0]
 8011f7a:	bf14      	ite	ne
 8011f7c:	230a      	movne	r3, #10
 8011f7e:	2308      	moveq	r3, #8
 8011f80:	2100      	movs	r1, #0
 8011f82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011f86:	6866      	ldr	r6, [r4, #4]
 8011f88:	60a6      	str	r6, [r4, #8]
 8011f8a:	2e00      	cmp	r6, #0
 8011f8c:	db05      	blt.n	8011f9a <_printf_i+0x10e>
 8011f8e:	6821      	ldr	r1, [r4, #0]
 8011f90:	432e      	orrs	r6, r5
 8011f92:	f021 0104 	bic.w	r1, r1, #4
 8011f96:	6021      	str	r1, [r4, #0]
 8011f98:	d04b      	beq.n	8012032 <_printf_i+0x1a6>
 8011f9a:	4616      	mov	r6, r2
 8011f9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8011fa0:	fb03 5711 	mls	r7, r3, r1, r5
 8011fa4:	5dc7      	ldrb	r7, [r0, r7]
 8011fa6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011faa:	462f      	mov	r7, r5
 8011fac:	42bb      	cmp	r3, r7
 8011fae:	460d      	mov	r5, r1
 8011fb0:	d9f4      	bls.n	8011f9c <_printf_i+0x110>
 8011fb2:	2b08      	cmp	r3, #8
 8011fb4:	d10b      	bne.n	8011fce <_printf_i+0x142>
 8011fb6:	6823      	ldr	r3, [r4, #0]
 8011fb8:	07df      	lsls	r7, r3, #31
 8011fba:	d508      	bpl.n	8011fce <_printf_i+0x142>
 8011fbc:	6923      	ldr	r3, [r4, #16]
 8011fbe:	6861      	ldr	r1, [r4, #4]
 8011fc0:	4299      	cmp	r1, r3
 8011fc2:	bfde      	ittt	le
 8011fc4:	2330      	movle	r3, #48	@ 0x30
 8011fc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011fca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011fce:	1b92      	subs	r2, r2, r6
 8011fd0:	6122      	str	r2, [r4, #16]
 8011fd2:	f8cd a000 	str.w	sl, [sp]
 8011fd6:	464b      	mov	r3, r9
 8011fd8:	aa03      	add	r2, sp, #12
 8011fda:	4621      	mov	r1, r4
 8011fdc:	4640      	mov	r0, r8
 8011fde:	f7ff fee7 	bl	8011db0 <_printf_common>
 8011fe2:	3001      	adds	r0, #1
 8011fe4:	d14a      	bne.n	801207c <_printf_i+0x1f0>
 8011fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8011fea:	b004      	add	sp, #16
 8011fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ff0:	6823      	ldr	r3, [r4, #0]
 8011ff2:	f043 0320 	orr.w	r3, r3, #32
 8011ff6:	6023      	str	r3, [r4, #0]
 8011ff8:	4832      	ldr	r0, [pc, #200]	@ (80120c4 <_printf_i+0x238>)
 8011ffa:	2778      	movs	r7, #120	@ 0x78
 8011ffc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012000:	6823      	ldr	r3, [r4, #0]
 8012002:	6831      	ldr	r1, [r6, #0]
 8012004:	061f      	lsls	r7, r3, #24
 8012006:	f851 5b04 	ldr.w	r5, [r1], #4
 801200a:	d402      	bmi.n	8012012 <_printf_i+0x186>
 801200c:	065f      	lsls	r7, r3, #25
 801200e:	bf48      	it	mi
 8012010:	b2ad      	uxthmi	r5, r5
 8012012:	6031      	str	r1, [r6, #0]
 8012014:	07d9      	lsls	r1, r3, #31
 8012016:	bf44      	itt	mi
 8012018:	f043 0320 	orrmi.w	r3, r3, #32
 801201c:	6023      	strmi	r3, [r4, #0]
 801201e:	b11d      	cbz	r5, 8012028 <_printf_i+0x19c>
 8012020:	2310      	movs	r3, #16
 8012022:	e7ad      	b.n	8011f80 <_printf_i+0xf4>
 8012024:	4826      	ldr	r0, [pc, #152]	@ (80120c0 <_printf_i+0x234>)
 8012026:	e7e9      	b.n	8011ffc <_printf_i+0x170>
 8012028:	6823      	ldr	r3, [r4, #0]
 801202a:	f023 0320 	bic.w	r3, r3, #32
 801202e:	6023      	str	r3, [r4, #0]
 8012030:	e7f6      	b.n	8012020 <_printf_i+0x194>
 8012032:	4616      	mov	r6, r2
 8012034:	e7bd      	b.n	8011fb2 <_printf_i+0x126>
 8012036:	6833      	ldr	r3, [r6, #0]
 8012038:	6825      	ldr	r5, [r4, #0]
 801203a:	6961      	ldr	r1, [r4, #20]
 801203c:	1d18      	adds	r0, r3, #4
 801203e:	6030      	str	r0, [r6, #0]
 8012040:	062e      	lsls	r6, r5, #24
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	d501      	bpl.n	801204a <_printf_i+0x1be>
 8012046:	6019      	str	r1, [r3, #0]
 8012048:	e002      	b.n	8012050 <_printf_i+0x1c4>
 801204a:	0668      	lsls	r0, r5, #25
 801204c:	d5fb      	bpl.n	8012046 <_printf_i+0x1ba>
 801204e:	8019      	strh	r1, [r3, #0]
 8012050:	2300      	movs	r3, #0
 8012052:	6123      	str	r3, [r4, #16]
 8012054:	4616      	mov	r6, r2
 8012056:	e7bc      	b.n	8011fd2 <_printf_i+0x146>
 8012058:	6833      	ldr	r3, [r6, #0]
 801205a:	1d1a      	adds	r2, r3, #4
 801205c:	6032      	str	r2, [r6, #0]
 801205e:	681e      	ldr	r6, [r3, #0]
 8012060:	6862      	ldr	r2, [r4, #4]
 8012062:	2100      	movs	r1, #0
 8012064:	4630      	mov	r0, r6
 8012066:	f7ee f93b 	bl	80002e0 <memchr>
 801206a:	b108      	cbz	r0, 8012070 <_printf_i+0x1e4>
 801206c:	1b80      	subs	r0, r0, r6
 801206e:	6060      	str	r0, [r4, #4]
 8012070:	6863      	ldr	r3, [r4, #4]
 8012072:	6123      	str	r3, [r4, #16]
 8012074:	2300      	movs	r3, #0
 8012076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801207a:	e7aa      	b.n	8011fd2 <_printf_i+0x146>
 801207c:	6923      	ldr	r3, [r4, #16]
 801207e:	4632      	mov	r2, r6
 8012080:	4649      	mov	r1, r9
 8012082:	4640      	mov	r0, r8
 8012084:	47d0      	blx	sl
 8012086:	3001      	adds	r0, #1
 8012088:	d0ad      	beq.n	8011fe6 <_printf_i+0x15a>
 801208a:	6823      	ldr	r3, [r4, #0]
 801208c:	079b      	lsls	r3, r3, #30
 801208e:	d413      	bmi.n	80120b8 <_printf_i+0x22c>
 8012090:	68e0      	ldr	r0, [r4, #12]
 8012092:	9b03      	ldr	r3, [sp, #12]
 8012094:	4298      	cmp	r0, r3
 8012096:	bfb8      	it	lt
 8012098:	4618      	movlt	r0, r3
 801209a:	e7a6      	b.n	8011fea <_printf_i+0x15e>
 801209c:	2301      	movs	r3, #1
 801209e:	4632      	mov	r2, r6
 80120a0:	4649      	mov	r1, r9
 80120a2:	4640      	mov	r0, r8
 80120a4:	47d0      	blx	sl
 80120a6:	3001      	adds	r0, #1
 80120a8:	d09d      	beq.n	8011fe6 <_printf_i+0x15a>
 80120aa:	3501      	adds	r5, #1
 80120ac:	68e3      	ldr	r3, [r4, #12]
 80120ae:	9903      	ldr	r1, [sp, #12]
 80120b0:	1a5b      	subs	r3, r3, r1
 80120b2:	42ab      	cmp	r3, r5
 80120b4:	dcf2      	bgt.n	801209c <_printf_i+0x210>
 80120b6:	e7eb      	b.n	8012090 <_printf_i+0x204>
 80120b8:	2500      	movs	r5, #0
 80120ba:	f104 0619 	add.w	r6, r4, #25
 80120be:	e7f5      	b.n	80120ac <_printf_i+0x220>
 80120c0:	0803d145 	.word	0x0803d145
 80120c4:	0803d156 	.word	0x0803d156

080120c8 <__sflush_r>:
 80120c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80120cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d0:	0716      	lsls	r6, r2, #28
 80120d2:	4605      	mov	r5, r0
 80120d4:	460c      	mov	r4, r1
 80120d6:	d454      	bmi.n	8012182 <__sflush_r+0xba>
 80120d8:	684b      	ldr	r3, [r1, #4]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	dc02      	bgt.n	80120e4 <__sflush_r+0x1c>
 80120de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	dd48      	ble.n	8012176 <__sflush_r+0xae>
 80120e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80120e6:	2e00      	cmp	r6, #0
 80120e8:	d045      	beq.n	8012176 <__sflush_r+0xae>
 80120ea:	2300      	movs	r3, #0
 80120ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80120f0:	682f      	ldr	r7, [r5, #0]
 80120f2:	6a21      	ldr	r1, [r4, #32]
 80120f4:	602b      	str	r3, [r5, #0]
 80120f6:	d030      	beq.n	801215a <__sflush_r+0x92>
 80120f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80120fa:	89a3      	ldrh	r3, [r4, #12]
 80120fc:	0759      	lsls	r1, r3, #29
 80120fe:	d505      	bpl.n	801210c <__sflush_r+0x44>
 8012100:	6863      	ldr	r3, [r4, #4]
 8012102:	1ad2      	subs	r2, r2, r3
 8012104:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012106:	b10b      	cbz	r3, 801210c <__sflush_r+0x44>
 8012108:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801210a:	1ad2      	subs	r2, r2, r3
 801210c:	2300      	movs	r3, #0
 801210e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012110:	6a21      	ldr	r1, [r4, #32]
 8012112:	4628      	mov	r0, r5
 8012114:	47b0      	blx	r6
 8012116:	1c43      	adds	r3, r0, #1
 8012118:	89a3      	ldrh	r3, [r4, #12]
 801211a:	d106      	bne.n	801212a <__sflush_r+0x62>
 801211c:	6829      	ldr	r1, [r5, #0]
 801211e:	291d      	cmp	r1, #29
 8012120:	d82b      	bhi.n	801217a <__sflush_r+0xb2>
 8012122:	4a2a      	ldr	r2, [pc, #168]	@ (80121cc <__sflush_r+0x104>)
 8012124:	40ca      	lsrs	r2, r1
 8012126:	07d6      	lsls	r6, r2, #31
 8012128:	d527      	bpl.n	801217a <__sflush_r+0xb2>
 801212a:	2200      	movs	r2, #0
 801212c:	6062      	str	r2, [r4, #4]
 801212e:	04d9      	lsls	r1, r3, #19
 8012130:	6922      	ldr	r2, [r4, #16]
 8012132:	6022      	str	r2, [r4, #0]
 8012134:	d504      	bpl.n	8012140 <__sflush_r+0x78>
 8012136:	1c42      	adds	r2, r0, #1
 8012138:	d101      	bne.n	801213e <__sflush_r+0x76>
 801213a:	682b      	ldr	r3, [r5, #0]
 801213c:	b903      	cbnz	r3, 8012140 <__sflush_r+0x78>
 801213e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012140:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012142:	602f      	str	r7, [r5, #0]
 8012144:	b1b9      	cbz	r1, 8012176 <__sflush_r+0xae>
 8012146:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801214a:	4299      	cmp	r1, r3
 801214c:	d002      	beq.n	8012154 <__sflush_r+0x8c>
 801214e:	4628      	mov	r0, r5
 8012150:	f7ff fbec 	bl	801192c <_free_r>
 8012154:	2300      	movs	r3, #0
 8012156:	6363      	str	r3, [r4, #52]	@ 0x34
 8012158:	e00d      	b.n	8012176 <__sflush_r+0xae>
 801215a:	2301      	movs	r3, #1
 801215c:	4628      	mov	r0, r5
 801215e:	47b0      	blx	r6
 8012160:	4602      	mov	r2, r0
 8012162:	1c50      	adds	r0, r2, #1
 8012164:	d1c9      	bne.n	80120fa <__sflush_r+0x32>
 8012166:	682b      	ldr	r3, [r5, #0]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d0c6      	beq.n	80120fa <__sflush_r+0x32>
 801216c:	2b1d      	cmp	r3, #29
 801216e:	d001      	beq.n	8012174 <__sflush_r+0xac>
 8012170:	2b16      	cmp	r3, #22
 8012172:	d11e      	bne.n	80121b2 <__sflush_r+0xea>
 8012174:	602f      	str	r7, [r5, #0]
 8012176:	2000      	movs	r0, #0
 8012178:	e022      	b.n	80121c0 <__sflush_r+0xf8>
 801217a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801217e:	b21b      	sxth	r3, r3
 8012180:	e01b      	b.n	80121ba <__sflush_r+0xf2>
 8012182:	690f      	ldr	r7, [r1, #16]
 8012184:	2f00      	cmp	r7, #0
 8012186:	d0f6      	beq.n	8012176 <__sflush_r+0xae>
 8012188:	0793      	lsls	r3, r2, #30
 801218a:	680e      	ldr	r6, [r1, #0]
 801218c:	bf08      	it	eq
 801218e:	694b      	ldreq	r3, [r1, #20]
 8012190:	600f      	str	r7, [r1, #0]
 8012192:	bf18      	it	ne
 8012194:	2300      	movne	r3, #0
 8012196:	eba6 0807 	sub.w	r8, r6, r7
 801219a:	608b      	str	r3, [r1, #8]
 801219c:	f1b8 0f00 	cmp.w	r8, #0
 80121a0:	dde9      	ble.n	8012176 <__sflush_r+0xae>
 80121a2:	6a21      	ldr	r1, [r4, #32]
 80121a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80121a6:	4643      	mov	r3, r8
 80121a8:	463a      	mov	r2, r7
 80121aa:	4628      	mov	r0, r5
 80121ac:	47b0      	blx	r6
 80121ae:	2800      	cmp	r0, #0
 80121b0:	dc08      	bgt.n	80121c4 <__sflush_r+0xfc>
 80121b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121ba:	81a3      	strh	r3, [r4, #12]
 80121bc:	f04f 30ff 	mov.w	r0, #4294967295
 80121c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c4:	4407      	add	r7, r0
 80121c6:	eba8 0800 	sub.w	r8, r8, r0
 80121ca:	e7e7      	b.n	801219c <__sflush_r+0xd4>
 80121cc:	20400001 	.word	0x20400001

080121d0 <_fflush_r>:
 80121d0:	b538      	push	{r3, r4, r5, lr}
 80121d2:	690b      	ldr	r3, [r1, #16]
 80121d4:	4605      	mov	r5, r0
 80121d6:	460c      	mov	r4, r1
 80121d8:	b913      	cbnz	r3, 80121e0 <_fflush_r+0x10>
 80121da:	2500      	movs	r5, #0
 80121dc:	4628      	mov	r0, r5
 80121de:	bd38      	pop	{r3, r4, r5, pc}
 80121e0:	b118      	cbz	r0, 80121ea <_fflush_r+0x1a>
 80121e2:	6a03      	ldr	r3, [r0, #32]
 80121e4:	b90b      	cbnz	r3, 80121ea <_fflush_r+0x1a>
 80121e6:	f7ff f8e5 	bl	80113b4 <__sinit>
 80121ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d0f3      	beq.n	80121da <_fflush_r+0xa>
 80121f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80121f4:	07d0      	lsls	r0, r2, #31
 80121f6:	d404      	bmi.n	8012202 <_fflush_r+0x32>
 80121f8:	0599      	lsls	r1, r3, #22
 80121fa:	d402      	bmi.n	8012202 <_fflush_r+0x32>
 80121fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80121fe:	f7ff fb84 	bl	801190a <__retarget_lock_acquire_recursive>
 8012202:	4628      	mov	r0, r5
 8012204:	4621      	mov	r1, r4
 8012206:	f7ff ff5f 	bl	80120c8 <__sflush_r>
 801220a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801220c:	07da      	lsls	r2, r3, #31
 801220e:	4605      	mov	r5, r0
 8012210:	d4e4      	bmi.n	80121dc <_fflush_r+0xc>
 8012212:	89a3      	ldrh	r3, [r4, #12]
 8012214:	059b      	lsls	r3, r3, #22
 8012216:	d4e1      	bmi.n	80121dc <_fflush_r+0xc>
 8012218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801221a:	f7ff fb77 	bl	801190c <__retarget_lock_release_recursive>
 801221e:	e7dd      	b.n	80121dc <_fflush_r+0xc>

08012220 <__swhatbuf_r>:
 8012220:	b570      	push	{r4, r5, r6, lr}
 8012222:	460c      	mov	r4, r1
 8012224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012228:	2900      	cmp	r1, #0
 801222a:	b096      	sub	sp, #88	@ 0x58
 801222c:	4615      	mov	r5, r2
 801222e:	461e      	mov	r6, r3
 8012230:	da0d      	bge.n	801224e <__swhatbuf_r+0x2e>
 8012232:	89a3      	ldrh	r3, [r4, #12]
 8012234:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012238:	f04f 0100 	mov.w	r1, #0
 801223c:	bf14      	ite	ne
 801223e:	2340      	movne	r3, #64	@ 0x40
 8012240:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012244:	2000      	movs	r0, #0
 8012246:	6031      	str	r1, [r6, #0]
 8012248:	602b      	str	r3, [r5, #0]
 801224a:	b016      	add	sp, #88	@ 0x58
 801224c:	bd70      	pop	{r4, r5, r6, pc}
 801224e:	466a      	mov	r2, sp
 8012250:	f000 f848 	bl	80122e4 <_fstat_r>
 8012254:	2800      	cmp	r0, #0
 8012256:	dbec      	blt.n	8012232 <__swhatbuf_r+0x12>
 8012258:	9901      	ldr	r1, [sp, #4]
 801225a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801225e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012262:	4259      	negs	r1, r3
 8012264:	4159      	adcs	r1, r3
 8012266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801226a:	e7eb      	b.n	8012244 <__swhatbuf_r+0x24>

0801226c <__smakebuf_r>:
 801226c:	898b      	ldrh	r3, [r1, #12]
 801226e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012270:	079d      	lsls	r5, r3, #30
 8012272:	4606      	mov	r6, r0
 8012274:	460c      	mov	r4, r1
 8012276:	d507      	bpl.n	8012288 <__smakebuf_r+0x1c>
 8012278:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801227c:	6023      	str	r3, [r4, #0]
 801227e:	6123      	str	r3, [r4, #16]
 8012280:	2301      	movs	r3, #1
 8012282:	6163      	str	r3, [r4, #20]
 8012284:	b003      	add	sp, #12
 8012286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012288:	ab01      	add	r3, sp, #4
 801228a:	466a      	mov	r2, sp
 801228c:	f7ff ffc8 	bl	8012220 <__swhatbuf_r>
 8012290:	9f00      	ldr	r7, [sp, #0]
 8012292:	4605      	mov	r5, r0
 8012294:	4639      	mov	r1, r7
 8012296:	4630      	mov	r0, r6
 8012298:	f7ff fbbc 	bl	8011a14 <_malloc_r>
 801229c:	b948      	cbnz	r0, 80122b2 <__smakebuf_r+0x46>
 801229e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122a2:	059a      	lsls	r2, r3, #22
 80122a4:	d4ee      	bmi.n	8012284 <__smakebuf_r+0x18>
 80122a6:	f023 0303 	bic.w	r3, r3, #3
 80122aa:	f043 0302 	orr.w	r3, r3, #2
 80122ae:	81a3      	strh	r3, [r4, #12]
 80122b0:	e7e2      	b.n	8012278 <__smakebuf_r+0xc>
 80122b2:	89a3      	ldrh	r3, [r4, #12]
 80122b4:	6020      	str	r0, [r4, #0]
 80122b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122ba:	81a3      	strh	r3, [r4, #12]
 80122bc:	9b01      	ldr	r3, [sp, #4]
 80122be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80122c2:	b15b      	cbz	r3, 80122dc <__smakebuf_r+0x70>
 80122c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122c8:	4630      	mov	r0, r6
 80122ca:	f000 f81d 	bl	8012308 <_isatty_r>
 80122ce:	b128      	cbz	r0, 80122dc <__smakebuf_r+0x70>
 80122d0:	89a3      	ldrh	r3, [r4, #12]
 80122d2:	f023 0303 	bic.w	r3, r3, #3
 80122d6:	f043 0301 	orr.w	r3, r3, #1
 80122da:	81a3      	strh	r3, [r4, #12]
 80122dc:	89a3      	ldrh	r3, [r4, #12]
 80122de:	431d      	orrs	r5, r3
 80122e0:	81a5      	strh	r5, [r4, #12]
 80122e2:	e7cf      	b.n	8012284 <__smakebuf_r+0x18>

080122e4 <_fstat_r>:
 80122e4:	b538      	push	{r3, r4, r5, lr}
 80122e6:	4d07      	ldr	r5, [pc, #28]	@ (8012304 <_fstat_r+0x20>)
 80122e8:	2300      	movs	r3, #0
 80122ea:	4604      	mov	r4, r0
 80122ec:	4608      	mov	r0, r1
 80122ee:	4611      	mov	r1, r2
 80122f0:	602b      	str	r3, [r5, #0]
 80122f2:	f7ee fa85 	bl	8000800 <_fstat>
 80122f6:	1c43      	adds	r3, r0, #1
 80122f8:	d102      	bne.n	8012300 <_fstat_r+0x1c>
 80122fa:	682b      	ldr	r3, [r5, #0]
 80122fc:	b103      	cbz	r3, 8012300 <_fstat_r+0x1c>
 80122fe:	6023      	str	r3, [r4, #0]
 8012300:	bd38      	pop	{r3, r4, r5, pc}
 8012302:	bf00      	nop
 8012304:	24004ce0 	.word	0x24004ce0

08012308 <_isatty_r>:
 8012308:	b538      	push	{r3, r4, r5, lr}
 801230a:	4d06      	ldr	r5, [pc, #24]	@ (8012324 <_isatty_r+0x1c>)
 801230c:	2300      	movs	r3, #0
 801230e:	4604      	mov	r4, r0
 8012310:	4608      	mov	r0, r1
 8012312:	602b      	str	r3, [r5, #0]
 8012314:	f7ee f9e2 	bl	80006dc <_isatty>
 8012318:	1c43      	adds	r3, r0, #1
 801231a:	d102      	bne.n	8012322 <_isatty_r+0x1a>
 801231c:	682b      	ldr	r3, [r5, #0]
 801231e:	b103      	cbz	r3, 8012322 <_isatty_r+0x1a>
 8012320:	6023      	str	r3, [r4, #0]
 8012322:	bd38      	pop	{r3, r4, r5, pc}
 8012324:	24004ce0 	.word	0x24004ce0

08012328 <_sbrk_r>:
 8012328:	b538      	push	{r3, r4, r5, lr}
 801232a:	4d06      	ldr	r5, [pc, #24]	@ (8012344 <_sbrk_r+0x1c>)
 801232c:	2300      	movs	r3, #0
 801232e:	4604      	mov	r4, r0
 8012330:	4608      	mov	r0, r1
 8012332:	602b      	str	r3, [r5, #0]
 8012334:	f7ef f812 	bl	800135c <_sbrk>
 8012338:	1c43      	adds	r3, r0, #1
 801233a:	d102      	bne.n	8012342 <_sbrk_r+0x1a>
 801233c:	682b      	ldr	r3, [r5, #0]
 801233e:	b103      	cbz	r3, 8012342 <_sbrk_r+0x1a>
 8012340:	6023      	str	r3, [r4, #0]
 8012342:	bd38      	pop	{r3, r4, r5, pc}
 8012344:	24004ce0 	.word	0x24004ce0

08012348 <_init>:
 8012348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801234a:	bf00      	nop
 801234c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801234e:	bc08      	pop	{r3}
 8012350:	469e      	mov	lr, r3
 8012352:	4770      	bx	lr

08012354 <_fini>:
 8012354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012356:	bf00      	nop
 8012358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801235a:	bc08      	pop	{r3}
 801235c:	469e      	mov	lr, r3
 801235e:	4770      	bx	lr
